[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/children.js",
    "content": "import { getReactElementFromJSONX, } from './main';\r\n/**\r\n * returns a valid jsonx.children property\r\n * @param {Object} options\r\n * @param {Object} [options.jsonx ={}]- Valid JSONX JSON \r\n * @param {Object} [options.props=options.jsonx.children] - Props to pull children  Object.assign(jsonx.props,jsonx.asyncprops,jsonx.thisprops,jsonx.windowprops) \r\n * @returns {Object[]|String} returns a valid jsonx.children property that's either an array of JSONX objects or a string \r\n * @example \r\n * const sampleJSONX = {\r\n  component: 'div',\r\n  props: {\r\n    id: 'generatedJSONX',\r\n    className:'jsonx',\r\n  },\r\n  children: [\r\n    {\r\n      component: 'p',\r\n      props: {\r\n        style: {\r\n          color: 'red',\r\n        },\r\n      },\r\n      children:'hello world',\r\n    },\r\n    {\r\n      component: 'div',\r\n      children: [\r\n        {\r\n          component: 'ul',\r\n          children: [\r\n            {\r\n              component: 'li',\r\n              children:'list',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\nconst JSONXChildren = getChildrenProperty({ jsonx: sampleJSONX, }); //=> [ [jsonx Object],[jsonx Object]]\r\nconst JSONXChildrenPTag = getChildrenProperty({ jsonx: sampleJSONX.children[ 0 ], }); //=>hello world\r\n */\r\nexport function getChildrenProperty(options = {}) {\r\n  const { jsonx = {}, } = options;\r\n  const props = options.props || jsonx.props || {};\r\n  if (typeof props._children!=='undefined' /* && !jsonx.children */) {\r\n    if (Array.isArray(props._children) || typeof props._children === 'string' || typeof props._children === 'number'){\r\n      return props._children;\r\n    } else {\r\n      return jsonx.children;\r\n    }\r\n  } else if (typeof jsonx.children === 'undefined'){\r\n    if (props && props.children && (typeof props.children !== 'undefined' || Array.isArray(props.children))) {\r\n      return props.children;\r\n    } else {\r\n      return null;  \r\n    }\r\n  } else {\r\n    return jsonx.children;\r\n  }\r\n}\r\n\r\n/**\r\n * Used to pass properties down to child components if passprops is set to true\r\n * @param {Object} options\r\n * @param {Object} [options.jsonx ={}] - Valid JSONX JSON \r\n * @param {Object} [options.childjsonx ={}] - Valid JSONX JSON \r\n * @param {Number} options.renderIndex - React key property \r\n * @param {Object} [options.props=options.jsonx.props] - Props to pull children  Object.assign(jsonx.props,jsonx.asyncprops,jsonx.thisprops,jsonx.windowprops) \r\n * @returns {Object|String} returns a valid  Valid JSONX Child object or a string \r\n */\r\nexport function getChildrenProps(options = {}) {\r\n  const { jsonx = {}, childjsonx, renderIndex, } = options;\r\n  const props = options.props || jsonx.props || {};\r\n\r\n  return (jsonx.passprops && typeof childjsonx==='object')\r\n    ? Object.assign({},\r\n      childjsonx, {\r\n        props: Object.assign({},\r\n          props,\r\n          ((childjsonx.thisprops && childjsonx.thisprops.style) // this is to make sure when you bind props, if you've defined props in a dynamic property, to not use bind props to  remove passing down styles\r\n            || (childjsonx.asyncprops && childjsonx.asyncprops.style)\r\n            || (childjsonx.windowprops && childjsonx.windowprops.style))\r\n            ? {}\r\n            : {\r\n              style: {},\r\n            },\r\n          childjsonx.props,\r\n          { key: renderIndex + Math.random(), }),\r\n      })\r\n    : childjsonx;\r\n}\r\n\r\n/**\r\n * returns React Child Elements via JSONX\r\n * @param {*} options \r\n * @property {object} this - options for getReactElementFromJSONX\r\n * @property {Object} [this.componentLibraries] - react components to render with JSONX\r\n * @property {boolean} [this.debug=false] - use debug messages\r\n * @property {function} [this.logError=console.error] - error logging function\r\n * @property {string[]} [this.boundedComponents=[]] - list of components that require a bound this context (usefult for redux router)\r\n */\r\nexport function getJSONXChildren(options = {}) {\r\n  // eslint-disable-next-line\r\n  const { jsonx, resources, renderIndex, logError = console.error, } = options;\r\n  try {\r\n    const props = options.props || jsonx.props || {};\r\n    jsonx.children = getChildrenProperty({ jsonx, props, });\r\n    props._children = undefined;\r\n    delete props._children;\r\n\r\n    return (jsonx.children && Array.isArray(jsonx.children) && typeof jsonx.children !== 'string')\r\n      ? jsonx.children.map(childjsonx => getReactElementFromJSONX.call(this, getChildrenProps({ jsonx, childjsonx, props, renderIndex, }), resources))\r\n      : jsonx.children;\r\n\r\n  } catch (e) {\r\n    logError(e);\r\n    return null;\r\n  }\r\n}",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/jsonx/src/children.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "getChildrenProperty",
    "memberof": "src/children.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/children.js~getChildrenProperty",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/children.js",
    "importStyle": "{getChildrenProperty}",
    "description": "returns a valid jsonx.children property",
    "examples": [
      "const sampleJSONX = {\ncomponent: 'div',\nprops: {\nid: 'generatedJSONX',\nclassName:'jsonx',\n},\nchildren: [\n{\ncomponent: 'p',\nprops: {\nstyle: {\ncolor: 'red',\n},\n},\nchildren:'hello world',\n},\n{\ncomponent: 'div',\nchildren: [\n{\ncomponent: 'ul',\nchildren: [\n{\ncomponent: 'li',\nchildren:'list',\n},\n],\n},\n],\n},\n],\n};\nconst JSONXChildren = getChildrenProperty({ jsonx: sampleJSONX, }); //=> [ [jsonx Object],[jsonx Object]]\nconst JSONXChildrenPTag = getChildrenProperty({ jsonx: sampleJSONX.children[ 0 ], }); //=>hello world"
    ],
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object[]|String} returns a valid jsonx.children property that's either an array of JSONX objects or a string "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.jsonx",
        "description": "Valid JSONX JSON"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "options.jsonx.children",
        "defaultRaw": "options.jsonx.children",
        "name": "options.props",
        "description": "Props to pull children  Object.assign(jsonx.props,jsonx.asyncprops,jsonx.thisprops,jsonx.windowprops)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]",
        "String"
      ],
      "spread": false,
      "description": "returns a valid jsonx.children property that's either an array of JSONX objects or a string"
    }
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "getChildrenProps",
    "memberof": "src/children.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/children.js~getChildrenProps",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/children.js",
    "importStyle": "{getChildrenProps}",
    "description": "Used to pass properties down to child components if passprops is set to true",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|String} returns a valid  Valid JSONX Child object or a string "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.jsonx",
        "description": "Valid JSONX JSON"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.childjsonx",
        "description": "Valid JSONX JSON"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.renderIndex",
        "description": "React key property"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "options.jsonx.props",
        "defaultRaw": "options.jsonx.props",
        "name": "options.props",
        "description": "Props to pull children  Object.assign(jsonx.props,jsonx.asyncprops,jsonx.thisprops,jsonx.windowprops)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "String"
      ],
      "spread": false,
      "description": "returns a valid  Valid JSONX Child object or a string"
    }
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "getJSONXChildren",
    "memberof": "src/children.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/children.js~getJSONXChildren",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/children.js",
    "importStyle": "{getJSONXChildren}",
    "description": "returns React Child Elements via JSONX",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "this",
        "description": "options for getReactElementFromJSONX"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "this.componentLibraries",
        "description": "react components to render with JSONX"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "this.debug",
        "description": "use debug messages"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "console.error",
        "defaultRaw": "console.error",
        "name": "this.logError",
        "description": "error logging function"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "this.boundedComponents",
        "description": "list of components that require a bound this context (usefult for redux router)"
      }
    ]
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "src/components.js",
    "content": "import React, { useState, useEffect, useContext, useReducer, useCallback, useMemo, useRef, useImperativeHandle, useLayoutEffect, useDebugValue, Fragment, Suspense, lazy, createContext, } from 'react';\r\nimport * as memoryCache from 'memory-cache';\r\n// import {cache} from 'memory-cache';\r\n// import cache from 'memory-cache';\r\nimport { default as ReactDOMElements, } from 'react-dom-factories';\r\nimport { getAdvancedBinding, fetchJSON, } from './utils';\r\nimport createReactClass from 'create-react-class';\r\nimport { getReactElementFromJSONX, } from './main';\r\nconst cache = new memoryCache.Cache();\r\n// if (typeof window === 'undefined') {\r\n//   var window = window || global.window || {};\r\n// }\r\n/**\r\n * @memberOf components\r\n */\r\nexport let advancedBinding = getAdvancedBinding();\r\n// require;\r\n/**\r\n * object of all react components available for JSONX\r\n * @memberOf components\r\n */\r\nexport let componentMap = Object.assign({ Fragment, Suspense, }, ReactDOMElements, (typeof window ==='object') ? window.__jsonx_custom_elements : {});\r\n\r\n/**\r\n * getBoundedComponents returns reactComponents with certain elements that have this bounded to select components in the boundedComponents list \r\n * @memberOf components\r\n * @param {Object} options - options for getBoundedComponents \r\n * @param {Object} options.reactComponents - all react components available for JSONX\r\n * @param {string[]} boundedComponents - list of components to bind JSONX this context (usually helpful for navigation and redux-router)\r\n * @returns {Object} reactComponents object of all react components available for JSONX\r\n */\r\nexport function getBoundedComponents(options = {}) {\r\n  const { reactComponents, boundedComponents=[], } = options;\r\n  if (advancedBinding || options.advancedBinding) {\r\n    return Object.assign({}, reactComponents, boundedComponents.reduce((result, componentName) => {\r\n      result[ componentName ] = reactComponents[ componentName ].bind(this);\r\n      return result;\r\n    }, {}));\r\n    // reactComponents.ResponsiveLink = ResponsiveLink.bind(this);\r\n  } else return reactComponents;\r\n}\r\n\r\n/**\r\n * returns a react component from a component library\r\n * @memberOf components\r\n * @param {Object} options - options for getComponentFromLibrary\r\n * @param {Object} [options.componentLibraries={}] - react component library like bootstrap\r\n * @param {Object} [options.jsonx={}] - any valid JSONX JSON\r\n * @returns {function|undefined} react component from react library like bootstrap, material design or bulma\r\n */\r\nexport function getComponentFromLibrary(options = {}) {\r\n  const { componentLibraries = {}, jsonx = {}, } = options;\r\n  const libComponent = Object.keys(componentLibraries)\r\n    .map(libraryName => {\r\n      const cleanLibraryName = jsonx.component.replace(`${libraryName}.`, '');\r\n      const libraryNameArray = cleanLibraryName.split('.');\r\n      if (libraryNameArray.length === 2\r\n        && componentLibraries[ libraryName ]\r\n        && componentLibraries[ libraryName ][ libraryNameArray[ 0 ] ]\r\n        && typeof componentLibraries[ libraryName ][ libraryNameArray[ 0 ] ][ libraryNameArray[ 1 ] ] !== 'undefined') {\r\n        return componentLibraries[ libraryName ][ libraryNameArray[ 0 ] ][ libraryNameArray[ 1 ] ];\r\n      } else if (typeof componentLibraries[ libraryName ][ cleanLibraryName ] !== 'undefined') {\r\n        return componentLibraries[ libraryName ][ cleanLibraryName ];\r\n      }\r\n    })\r\n    .filter(val => val)[ 0 ];\r\n  return libComponent;\r\n}\r\n\r\n/**\r\n * returns a react element from jsonx.component\r\n * @memberOf components\r\n * @example\r\n * // returns react elements\r\n * getComponentFromMap({jsonx:{component:'div'}})=>div\r\n * getComponentFromMap({jsonx:{component:'MyModal'},reactComponents:{MyModal:MyModal extends React.Component}})=>MyModal\r\n * getComponentFromMap({jsonx:{component:'reactBootstap.nav'},componentLibraries:{reactBootstrap,}})=>reactBootstap.nav\r\n * @param {Object} options - options for getComponentFromMap\r\n * @param {object} [options.jsonx={}] - any valid JSONX JSON object\r\n * @param {Object} [options.reactComponents={}] - react components to render\r\n * @param {Object} [options.componentLibraries={}] - react components to render from another component library like bootstrap or bulma\r\n * @param {function} [options.logError=console.error] - error logging function\r\n * @param {boolean} [options.debug=false] - use debug messages\r\n * @returns {string|function|class} valid react element\r\n */\r\nexport function getComponentFromMap(options = {}) {\r\n  // eslint-disable-next-line\r\n  const { jsonx = {}, reactComponents = {}, componentLibraries = {}, logError = console.error, debug } = options;\r\n\r\n  try {\r\n    if (typeof jsonx.component !== 'string' && typeof jsonx.component === 'function') {\r\n      return jsonx.component;\r\n    } else if (ReactDOMElements[jsonx.component]) {\r\n      return jsonx.component;\r\n    } else if (reactComponents[ jsonx.component ]) {\r\n      return reactComponents[jsonx.component];\r\n    } else if (typeof jsonx.component ==='string' && jsonx.component.indexOf('.') > 0 && getComponentFromLibrary({ jsonx, componentLibraries, })) {\r\n      return getComponentFromLibrary({ jsonx, componentLibraries, });\r\n    } else {\r\n      throw new ReferenceError(`Invalid React Component (${jsonx.component})`);\r\n    }\r\n  } catch (e) {\r\n    if(debug) logError(e, (e.stack) ? e.stack : 'no stack');\r\n    throw e;\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a new function from an options object\r\n * @memberOf components\r\n * @param {Object} options \r\n * @param {String} [options.body=''] - Function string body\r\n * @param {String[]} [options.args=[]] - Function arguments\r\n * @returns {Function} \r\n */\r\nexport function getFunctionFromEval(options = {}) {\r\n  if (typeof options === 'function') return options;\r\n  const { body = '', args = [], name, } = options;\r\n  const argus = [].concat(args);\r\n  argus.push(body);\r\n  const evalFunction = Function.prototype.constructor.apply({ name, }, argus);\r\n  if (name) {\r\n    Object.defineProperty(evalFunction, 'name', { value: name, });\r\n  }\r\n  return evalFunction;\r\n}\r\n\r\n/**\r\n * Returns a new React Component\r\n * @memberOf components\r\n * @param {Boolean} [options.returnFactory=true] - returns a React component if true otherwise returns Component Class \r\n * @param {Object} [options.resources={}] - asyncprops for component\r\n * @param {String} [options.name ] - Component name\r\n * @param {Function} [options.lazy ] - function that resolves {reactComponent,options} to lazy load component for code splitting\r\n * @param {Boolean} [options.use_getState=true] - define getState prop\r\n * @param {Boolean} [options.bindContext=true] - bind class this reference to render function components\r\n * @param {Boolean} [options.passprops ] - pass props to rendered component\r\n * @param {Boolean} [options.passstate] - pass state as props to rendered component\r\n * @param {Object} [reactComponent={}] - an object of functions used for create-react-class\r\n * @param {Object} reactComponent.render.body - Valid JSONX JSON\r\n * @param {String} reactComponent.getDefaultProps.body - return an object for the default props\r\n * @param {String} reactComponent.getInitialState.body - return an object for the default state\r\n * @returns {Function} \r\n * @see {@link https://reactjs.org/docs/react-without-es6.html} \r\n */\r\nexport function getReactClassComponent(reactComponent = {}, options = {}) {\r\n  // const util = require('util');\r\n  // console.log(util.inspect({ reactComponent },{depth:20}));\r\n  if (options.lazy) {\r\n    return lazy(() => options.lazy(reactComponent, Object.assign({}, options, { lazy: false, })).then((lazyComponent) => {\r\n      return {\r\n        default: getReactClassComponent(...lazyComponent),\r\n      };\r\n    }));\r\n  }\r\n  const context = this || {};\r\n  const { returnFactory = true, resources = {}, use_getState=true, bindContext=true, disableRenderIndexKey = true, } = options;\r\n  const rjc = Object.assign({\r\n    getDefaultProps: {\r\n      body:'return {};',\r\n    },\r\n    getInitialState: {\r\n      body:'return {};',\r\n    },\r\n  }, reactComponent);\r\n  const rjcKeys = Object.keys(rjc);\r\n  if (rjcKeys.includes('render') === false) {\r\n    throw new ReferenceError('React components require a render method');\r\n  }\r\n  const classOptions = rjcKeys.reduce((result, val) => { \r\n    if (typeof rjc[ val ] === 'function') rjc[ val ] = { body: rjc[ val ], };\r\n    const args = rjc[ val ].arguments;\r\n    const body = rjc[ val ].body;\r\n    if (!body) {\r\n      console.warn({ rjc, });\r\n      throw new SyntaxError(`Function(${val}) requires a function body`);\r\n    }\r\n    if (args && !Array.isArray(args) && (args.length &&(args.length && args.filter(arg=>typeof arg==='string').length)) ) {\r\n      throw new TypeError(`Function(${val}) arguments must be an array or variable names`);\r\n    }\r\n    if (val === 'render') {\r\n      result[ val ] = function () {\r\n        if (options.passprops && this.props) body.props = Object.assign({}, body.props, this.props);\r\n        if (options.passstate && this.state) body.props = Object.assign({}, body.props, this.state);\r\n        return getReactElementFromJSONX.call(Object.assign(\r\n          {},\r\n          context,\r\n          bindContext ? this : {},\r\n          { disableRenderIndexKey, },\r\n          {\r\n            props: use_getState\r\n              ? Object.assign({}, this.props, { getState: () => this.state, })\r\n              : this.props,\r\n          }\r\n        ), body, resources);\r\n      };\r\n    } else {\r\n      result[ val ] = typeof body === 'function'\r\n        ? body\r\n        : getFunctionFromEval({\r\n          body,\r\n          args,\r\n        });\r\n    }\r\n\r\n    return result;\r\n  }, {});\r\n  const reactComponentClass = createReactClass(classOptions);\r\n  if (options.name) {\r\n    Object.defineProperty(\r\n      reactComponentClass,\r\n      'name',\r\n      {\r\n        value: options.name,\r\n      }\r\n    );\r\n  }\r\n  const reactClass = returnFactory\r\n    ? React.createFactory(reactComponentClass)\r\n    : reactComponentClass;\r\n  return reactClass;\r\n}\r\n\r\nexport function DynamicComponent(props={}) {\r\n  const { useCache = true, cacheTimeout = 60 * 60 * 5, loadingJSONX= { component:'div', children:'...Loading', },\r\n  loadingErrorJSONX= { component:'div', children:[{component:'span',children:'Error: '},{ component:'span',  resourceprops:{_children:['error','message']}, }], }, cacheTimeoutFunction = () => { }, jsonx, transformFunction = data => data, fetchURL, fetchOptions, fetchFunction, } = props;\r\n  const context = this || {};\r\n  const [ state, setState ] = useState({ hasLoaded: false, hasError: false, resources: {}, error:undefined, });\r\n  const transformer = useMemo(()=>getFunctionFromEval(transformFunction), [ transformFunction ]);\r\n  const timeoutFunction = useMemo(()=>getFunctionFromEval(cacheTimeoutFunction), [ cacheTimeoutFunction ]);\r\n  const renderJSONX = useMemo(()=>getReactElementFromJSONX.bind({context}), [ context ]);\r\n  const loadingComponent = useMemo(()=>renderJSONX(loadingJSONX), [ loadingJSONX ]);\r\n  const loadingError = useMemo(()=>renderJSONX(loadingErrorJSONX,{error:state.error}), [ loadingErrorJSONX, state.error ]);\r\n\r\n  useEffect(() => { \r\n    async function getData() {\r\n      try {\r\n        let transformedData;\r\n        if (useCache && cache.get(fetchURL)) {\r\n          transformedData = cache.get(fetchURL);\r\n        } else {\r\n          let fetchedData;\r\n          if (fetchFunction) {\r\n            fetchedData = await fetchFunction(fetchURL, fetchOptions);\r\n          } else fetchedData = await fetchJSON(fetchURL, fetchOptions);\r\n          transformedData = await transformer(fetchedData);\r\n          if (useCache) cache.put(fetchURL, transformedData, cacheTimeout,timeoutFunction);\r\n        }\r\n        setState(prevState=>Object.assign({},prevState,{ hasLoaded: true, hasError: false, resources: transformedData, }));\r\n      } catch (e) {\r\n        if(context.debug) console.warn(e);\r\n        setState({ hasError: true, error:e, });\r\n      }\r\n    }\r\n    if(fetchURL) getData();\r\n  }, [ fetchURL, fetchOptions ]);\r\n  if (!fetchURL) return null;\r\n  else if (state.hasError) {\r\n    return loadingError;\r\n  } else if (state.hasLoaded === false) {\r\n    return loadingComponent;\r\n  } else return renderJSONX(jsonx, state.resources);\r\n}\r\n\r\n/**\r\n * Returns new React Function Component\r\n * @memberOf components\r\n * @todo set 'functionprops' to set arguments for function\r\n * @param {*} reactComponent - Valid JSONX to render\r\n * @param {String} functionBody - String of function component body\r\n * @param {String} options.name - Function Component name \r\n * @returns {Function}\r\n * @see {@link https://reactjs.org/docs/hooks-intro.html}\r\n * @example\r\n  const jsonxRender = {\r\n   component:'div',\r\n   passprops:'true',\r\n   children:[ \r\n     {\r\n      component:'input',\r\n      thisprops:{\r\n          value:['count'],\r\n        },\r\n     },\r\n      {\r\n        component:'button',\r\n       __dangerouslyBindEvalProps:{\r\n        onClick:function(count,setCount){\r\n          setCount(count+1);\r\n          console.log('this is inline',{count,setCount});\r\n        },\r\n        // onClick:`(function(count,setCount){\r\n        //   setCount(count+1)\r\n        //   console.log('this is inline',{count,setCount});\r\n        // })`,\r\n        children:'Click me'\r\n      }\r\n   ]\r\n  };\r\n  const functionBody = 'const [count, setCount] = useState(0); const functionprops = {count,setCount};'\r\n  const options = { name: IntroHook}\r\n  const MyCustomFunctionComponent = jsonx._jsonxComponents.getReactFunctionComponent({jsonxRender, functionBody, options});\r\n   */\r\nexport function getReactFunctionComponent(reactComponent = {}, functionBody = '', options = {}) {\r\n  if (options.lazy) {\r\n    return lazy(() => options.lazy(reactComponent, functionBody, Object.assign({}, options, { lazy: false, })).then((lazyComponent) => {\r\n      return {\r\n        default: getReactFunctionComponent(...lazyComponent),\r\n      };\r\n    }));\r\n  }\r\n  if (typeof options === 'undefined' || typeof options.bind === 'undefined') options.bind = true;\r\n  const { resources = {}, args=[], } = options;\r\n\r\n  const props = reactComponent.props;\r\n  const functionArgs = [ React, useState, useEffect, useContext, useReducer, useCallback, useMemo, useRef, useImperativeHandle, useLayoutEffect, useDebugValue, getReactElementFromJSONX, reactComponent, resources, props, ];\r\n  if (typeof functionBody === 'function') functionBody = functionBody.toString();\r\n  const functionComponent = Function('React', 'useState', 'useEffect', 'useContext', 'useReducer', 'useCallback', 'useMemo', 'useRef', 'useImperativeHandle', 'useLayoutEffect', 'useDebugValue', 'getReactElementFromJSONX', 'reactComponent', 'resources', 'props', `\r\n    const self = this;\r\n    return function ${options.name || 'Anonymous'}(props){\r\n      ${functionBody}\r\n      if(typeof exposeProps==='undefined' || exposeProps){\r\n        reactComponent.props = Object.assign({},props,typeof exposeProps==='undefined'?{}:exposeProps);\r\n        // reactComponent.__functionargs = Object.keys(exposeProps);\r\n      } else{\r\n        reactComponent.props =  props;\r\n      }\r\n      if(!props.children) delete props.children;\r\n      const context = ${options.bind?'Object.assign(self,this)':'this'};\r\n      return getReactElementFromJSONX.call(context, reactComponent);\r\n    }\r\n  `);\r\n  if (options.name) {\r\n    Object.defineProperty(\r\n      functionComponent,\r\n      'name',\r\n      {\r\n        value: options.name,\r\n      }\r\n    );\r\n  }\r\n  return (options.bind) ? functionComponent.call(this, ...functionArgs) : functionComponent(...functionArgs);\r\n}\r\n/**\r\n * @memberOf components\r\n */\r\nexport function getReactContext(options = {}) {\r\n  return createContext(options.value);\r\n}",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/jsonx/src/components.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "cache",
    "memberof": "src/components.js",
    "static": true,
    "longname": "src/components.js~cache",
    "access": "public",
    "export": false,
    "importPath": "jsonx/src/components.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "advancedBinding",
    "memberof": "src/components.js",
    "static": true,
    "longname": "src/components.js~advancedBinding",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/components.js",
    "importStyle": "{advancedBinding}",
    "description": "",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "components"
      }
    ]
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "componentMap",
    "memberof": "src/components.js",
    "static": true,
    "longname": "src/components.js~componentMap",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/components.js",
    "importStyle": "{componentMap}",
    "description": "object of all react components available for JSONX",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "components"
      }
    ]
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "getBoundedComponents",
    "memberof": "src/components.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components.js~getBoundedComponents",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/components.js",
    "importStyle": "{getBoundedComponents}",
    "description": "getBoundedComponents returns reactComponents with certain elements that have this bounded to select components in the boundedComponents list ",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "components"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} reactComponents object of all react components available for JSONX"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options for getBoundedComponents"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.reactComponents",
        "description": "all react components available for JSONX"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "boundedComponents",
        "description": "list of components to bind JSONX this context (usually helpful for navigation and redux-router)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "reactComponents object of all react components available for JSONX"
    }
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "getComponentFromLibrary",
    "memberof": "src/components.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components.js~getComponentFromLibrary",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/components.js",
    "importStyle": "{getComponentFromLibrary}",
    "description": "returns a react component from a component library",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "components"
      },
      {
        "tagName": "@returns",
        "tagValue": "{function|undefined} react component from react library like bootstrap, material design or bulma"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options for getComponentFromLibrary"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.componentLibraries",
        "description": "react component library like bootstrap"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.jsonx",
        "description": "any valid JSONX JSON"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function",
        "undefined"
      ],
      "spread": false,
      "description": "react component from react library like bootstrap, material design or bulma"
    }
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "getComponentFromMap",
    "memberof": "src/components.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components.js~getComponentFromMap",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/components.js",
    "importStyle": "{getComponentFromMap}",
    "description": "returns a react element from jsonx.component",
    "examples": [
      "// returns react elements\ngetComponentFromMap({jsonx:{component:'div'}})=>div\ngetComponentFromMap({jsonx:{component:'MyModal'},reactComponents:{MyModal:MyModal extends React.Component}})=>MyModal\ngetComponentFromMap({jsonx:{component:'reactBootstap.nav'},componentLibraries:{reactBootstrap,}})=>reactBootstap.nav"
    ],
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "components"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string|function|class} valid react element"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options for getComponentFromMap"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.jsonx",
        "description": "any valid JSONX JSON object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.reactComponents",
        "description": "react components to render"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.componentLibraries",
        "description": "react components to render from another component library like bootstrap or bulma"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "console.error",
        "defaultRaw": "console.error",
        "name": "options.logError",
        "description": "error logging function"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.debug",
        "description": "use debug messages"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "function",
        "class"
      ],
      "spread": false,
      "description": "valid react element"
    }
  },
  {
    "__docId__": 59,
    "kind": "function",
    "name": "getFunctionFromEval",
    "memberof": "src/components.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components.js~getFunctionFromEval",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/components.js",
    "importStyle": "{getFunctionFromEval}",
    "description": "Returns a new function from an options object",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "components"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Function} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "options.body",
        "description": "Function string body"
      },
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "options.args",
        "description": "Function arguments"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "getReactClassComponent",
    "memberof": "src/components.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components.js~getReactClassComponent",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/components.js",
    "importStyle": "{getReactClassComponent}",
    "description": "Returns a new React Component",
    "see": [
      "{@link https://reactjs.org/docs/react-without-es6.html} "
    ],
    "lineNumber": 146,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "components"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Function} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.returnFactory",
        "description": "returns a React component if true otherwise returns Component Class"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.resources",
        "description": "asyncprops for component"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.name",
        "description": "Component name"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.lazy",
        "description": "function that resolves {reactComponent,options} to lazy load component for code splitting"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.use_getState",
        "description": "define getState prop"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.bindContext",
        "description": "bind class this reference to render function components"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.passprops",
        "description": "pass props to rendered component"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.passstate",
        "description": "pass state as props to rendered component"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "reactComponent",
        "description": "an object of functions used for create-react-class"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "reactComponent.render.body",
        "description": "Valid JSONX JSON"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "reactComponent.getDefaultProps.body",
        "description": "return an object for the default props"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "reactComponent.getInitialState.body",
        "description": "return an object for the default state"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "DynamicComponent",
    "memberof": "src/components.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components.js~DynamicComponent",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/components.js",
    "importStyle": "{DynamicComponent}",
    "description": null,
    "lineNumber": 224,
    "undocument": true
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "getReactFunctionComponent",
    "memberof": "src/components.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components.js~getReactFunctionComponent",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/components.js",
    "importStyle": "{getReactFunctionComponent}",
    "description": "Returns new React Function Component",
    "examples": [
      "const jsonxRender = {\ncomponent:'div',\npassprops:'true',\nchildren:[ \n{\ncomponent:'input',\nthisprops:{\nvalue:['count'],\n},\n},\n{\ncomponent:'button',\n__dangerouslyBindEvalProps:{\nonClick:function(count,setCount){\nsetCount(count+1);\nconsole.log('this is inline',{count,setCount});\n},\n// onClick:`(function(count,setCount){\n//   setCount(count+1)\n//   console.log('this is inline',{count,setCount});\n// })`,\nchildren:'Click me'\n}\n]\n};\nconst functionBody = 'const [count, setCount] = useState(0); const functionprops = {count,setCount};'\nconst options = { name: IntroHook}\nconst MyCustomFunctionComponent = jsonx._jsonxComponents.getReactFunctionComponent({jsonxRender, functionBody, options});"
    ],
    "see": [
      "{@link https://reactjs.org/docs/hooks-intro.html}"
    ],
    "lineNumber": 304,
    "todo": [
      "set 'functionprops' to set arguments for function"
    ],
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "components"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "reactComponent",
        "description": "Valid JSONX to render"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "functionBody",
        "description": "String of function component body"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.name",
        "description": "Function Component name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "getReactContext",
    "memberof": "src/components.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components.js~getReactContext",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/components.js",
    "importStyle": "{getReactContext}",
    "description": "",
    "lineNumber": 347,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "components"
      }
    ]
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "src/express.js",
    "content": "import { outputHTML, } from './main';\r\nimport path from 'path';\r\n/**\r\n * Use JSONX for express view rendering\r\n * @param {string} filePath - path to jsonx express view \r\n * @param {object} options - property used for express view {locals}\r\n * @param {object} options.__boundConfig - property used to bind this object for JSONX, can be used to add custom components\r\n * @param {string} [options.__DOCTYPE=\"<!DOCTYPE html>\"] - html doctype string\r\n * @param {*} callback \r\n */\r\nexport function __express(filePath, options, callback) {\r\n  try {\r\n    const jsonxModule = options.__jsonx;//|| require(filePath);\r\n    const resources = Object.assign({}, options);\r\n    delete resources.__boundConfig;\r\n    delete resources.__DOCTYPE;\r\n    delete resources.__jsonx;\r\n    const context = Object.assign({}, options.__boundConfig);\r\n    if (path.extname('.json')) context.useJSON = true;\r\n  \r\n    const jsonxRenderedString = outputHTML.call(context, {\r\n      jsonx: jsonxModule,\r\n      resources,\r\n    });\r\n    const template = `${options.__DOCTYPE || '<!DOCTYPE html>'}\r\n${jsonxRenderedString}`;\r\n    if (typeof callback === 'function') callback(null, template);\r\n    else return template;\r\n  } catch (e) {\r\n    if (typeof callback === 'function') callback(e);\r\n    else throw e;\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/jsonx/src/express.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "__express",
    "memberof": "src/express.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/express.js~__express",
    "access": "private",
    "export": true,
    "importPath": "jsonx/src/express.js",
    "importStyle": "{__express}",
    "description": "Use JSONX for express view rendering",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "path to jsonx express view"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "property used for express view {locals}"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.__boundConfig",
        "description": "property used to bind this object for JSONX, can be used to add custom components"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"<!DOCTYPE html>\"",
        "defaultRaw": "<!DOCTYPE html>",
        "name": "options.__DOCTYPE",
        "description": "html doctype string"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/main.js",
    "content": "// import React, { createElement, } from 'react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactDOMServer from 'react-dom/server';\nimport useGlobalHook from 'use-global-hook';\n\nimport * as jsonxComponents from './components';\nimport * as jsonxProps from './props';\nimport * as jsonxChildren from './children';\nimport * as jsonxUtils from './utils';\nconst createElement = React.createElement;\nconst { componentMap, getComponentFromMap, getBoundedComponents, DynamicComponent, } = jsonxComponents;\nconst { getComputedProps, } = jsonxProps;\nconst { getJSONXChildren, } = jsonxChildren;\nconst { displayComponent, } = jsonxUtils;\nexport let renderIndex = 0;\n\n/**\n * Use JSONX without any configuration to render JSONX JSON to HTML and insert JSONX into querySelector using ReactDOM.render\n * @example\n * // Uses react to create <!DOCTYPE html><body><div id=\"myApp\"><div class=\"jsonx-generated\"><p style=\"color:red;\">hello world</p></div></div></body>\n * jsonx.jsonxRender({ jsonx: { component: 'div', props:{className:'jsonx-generated',children:[{ component:'p',props:{style:{color:'red'}}, children:'hello world' }]}}, querySelector:'#myApp', });\n * @param {object} config - options used to inject html via ReactDOM.render\n * @param {object} config.jsonx - any valid JSONX JSON object\n * @param {object} config.resources - any additional resource used for asynchronous properties\n * @param {string} config.querySelector - selector for document.querySelector\n * @property {object} this - options for getReactElementFromJSONX\n */\nexport function jsonxRender(config = {}) {\n  const { jsonx, resources, querySelector, options, DOM, portal, } = config;\n  const Render = portal ? ReactDOM.createPortal : ReactDOM.render;\n  Render(\n    getReactElementFromJSONX.call(this || {}, jsonx, resources, options),\n    DOM || document.querySelector(querySelector)\n  );\n}\n\n/**\n * Use ReactDOMServer.renderToString to render html from JSONX\n * @example\n * // Uses react to create <div class=\"jsonx-generated\"><p style=\"color:red;\">hello world</p></div>\n * jsonx.outputHTML({ jsonx: { component: 'div', props:{className:'jsonx-generated',children:[{ component:'p',props:{style:{color:'red'}}, children:'hello world' }]}}, });\n * @param {object} config - options used to inject html via ReactDOM.render\n * @param {object} config.jsonx - any valid JSONX JSON object\n * @param {object} config.resources - any additional resource used for asynchronous properties\n * @property {object} this - options for getReactElementFromJSONX\n * @returns {string} React genereated html via JSONX JSON\n */\nexport function outputHTML(config = {}) {\n  const { jsonx, resources, } = config;\n  \n  return (this && this.useJSON)\n    ? ReactDOMServer.renderToString(getReactElementFromJSON.call(this || {}, jsonx, resources))\n    : ReactDOMServer.renderToString(getReactElementFromJSONX.call(this || {}, jsonx, resources));\n}\n\n/**\n * Use React.createElement and JSONX JSON to create React elements\n * @example\n * // Uses react to create the equivalent JSX <myComponent style={{color:blue}}>hello world</myComponent>\n * jsonx.getReactElementFromJSONX({component:'myCompnent',props:{style:{color:'blue'}},children:'hello world'})\n * @param {object} jsonx - any valid JSONX JSON object\n * @param {object} resources - any additional resource used for asynchronous properties\n * @property {object} this - options for getReactElementFromJSONX\n * @property {Object} [this.componentLibraries] - react components to render with JSONX\n * @property {boolean} [this.debug=false] - use debug messages\n * @property {boolean} [this.returnJSON=false] - return json object of {type,props,children} instead of react element\n * @property {boolean} [this.disableRenderIndexKey=false] - disables auto assign a key prop\n * @property {function} [this.logError=console.error] - error logging function\n * @property {string[]} [this.boundedComponents=[]] - list of components that require a bound this context (usefult for redux router)\n * @returns {function} React element via React.createElement\n */\nexport function getReactElementFromJSONX(jsonx = {}, resources = {}) {\n  // eslint-disable-next-line\n  const { componentLibraries = {}, debug = false, returnJSON=false, logError = console.error, boundedComponents = [], disableRenderIndexKey = true, } = this || {};\n  // const componentLibraries = this.componentLibraries;\n  if (!jsonx) return null;\n  if (jsonx.type) jsonx.component = jsonx.type;\n  if (jsonxUtils.validSimpleJSONXSyntax(jsonx)) jsonx = jsonxUtils.simpleJSONXSyntax(jsonx);\n  if (!jsonx.component) return createElement('span', {}, debug ? 'Error: Missing Component Object' : '');\n  try {\n    const components = Object.assign({ DynamicComponent: DynamicComponent.bind(this), }, componentMap, this.reactComponents);\n\n    const reactComponents = (boundedComponents.length)\n      ? getBoundedComponents.call(this, { boundedComponents, reactComponents: components, })\n      : components;\n    renderIndex++;\n    const element = getComponentFromMap({ jsonx, reactComponents, componentLibraries, debug, logError, });\n    const props = getComputedProps.call(this, { jsonx, resources, renderIndex, componentLibraries, debug, logError, disableRenderIndexKey, });\n    const displayElement = (jsonx.comparisonprops)\n      ? displayComponent.call(this, { jsonx, props, renderIndex, componentLibraries, debug, })\n      : true;\n    if (displayElement) {\n      const children = getJSONXChildren.call(this, { jsonx, props, resources, renderIndex, });\n      if (returnJSON) return { type:element, props, children, };\n      return createElement(element, props, children);\n    } else {\n      return null;\n    }\n  } catch (e) {\n    if (debug) {\n      logError({ jsonx, resources, }, 'this', this);\n      logError(e, (e.stack) ? e.stack : 'no stack');\n    }\n    throw e;\n  }\n}\n\nexport const getRenderedJSON = getReactElementFromJSONX;\nexport const getReactElement = getReactElementFromJSONX;\n\n/** converts a json object {type,props,children} into a react element \n * @example\n * jsonx.getReactElementFromJSON({type:'div',props:{title:'some title attribute'},children:'inner html text'})\n * @param {Object|String} options.type - 'div' or react component\n * @param {Object} options.props - props for react element\n * @param {String|[Object]} options.children - children elements\n * @returns {function} React element via React.createElement\n*/\nexport function getReactElementFromJSON({ type, props, children, }) {\n  return createElement(type, props, Array.isArray(children)\n    ? children.map(getReactElementFromJSON)\n    : children);\n}\n\n/** converts a jsonx json object into a react function component \n * @example\n * jsonx.compile({jsonx:{component:'div',props:{title:'some title attribute'},children:'inner html text'}}) //=>React Function Component\n * @param {Object} jsonx - valid JSONX JSON\n * @param {Object} resources - props for react element\n * @returns {function} React element via React.createElement\n*/\nexport function compile(jsonx, resources) {\n  const context = Object.assign({}, this, { returnJSON: true, });\n  const json = getReactElementFromJSONX.call(context, jsonx, resources);\n  const func = function compiledJSONX(props) {\n    json.props = Object.assign({}, json.props, props);\n    return getReactElementFromJSON(json);\n  };\n  Object.defineProperty(func, 'name', { value: this.name, });\n  return func;\n}\n\n/**\n * converts JSONX JSON IR to JSX\n * @example\n * jsonx.jsonToJSX({ type: 'div', props: { key: 5, title: 'test' }, children: 'hello' }) // => '<div key={5} title=\"test\">hello</div>'\n * @param {Object} json - {type,props,children}\n * @returns {String} jsx string\n */\nexport function outputJSX(jsonx, resources) {\n  const context = Object.assign({}, this, { returnJSON: true, });\n  const json = getReactElementFromJSONX.call(context, jsonx, resources);\n  return jsonToJSX(json);\n}\n\n/**\n * Compiles JSONX into JSON IR format for react create element\n * @example\n * jsonx.outputJSON({ component: 'div', props: { title: 'test', }, children: 'hello', }); //=> { type: 'div',\n props: { key: 5, title: 'test' },\n children: 'hello' }\n * @property {object} this - options for getReactElementFromJSONX\n * @param {object} jsonx - any valid JSONX JSON object\n * @param {object} resources - any additional resource used for asynchronous properties\n * @returns {Object} json - {type,props,children}\n */\nexport function outputJSON(jsonx, resources) {\n  const context = Object.assign({}, this, { returnJSON: true, });\n  return getReactElementFromJSONX.call(context, jsonx, resources);\n}\nexport const jsonxHTMLString = outputHTML;\n\n/**\n * converts JSONX JSON IR to JSX\n * @example\n * jsonx.jsonToJSX({ type: 'div', props: { key: 5, title: 'test' }, children: 'hello' }) // => '<div key={5} title=\"test\">hello</div>'\n * @param {Object} json - {type,props,children}\n * @returns {String} jsx string\n */\nexport function jsonToJSX(json) {\n  const propsString = json.props\n    ? Object.keys(json.props)\n      .filter(prop => prop.includes('__eval_') === false)\n      .reduce((propString, prop) => {\n        propString += ` ${prop.toString()}=${\n          typeof json.props[ prop ] === 'string'\n            ? `\"${json.props[ prop ].toString()}\"`\n            : `{${(json.props[ `__eval_${prop}` ]||json.props[ prop ]).toString()}}`\n        }`;\n        return propString;\n      }, '')\n    : '';\n  return Array.isArray(json.children)\n    ? `<${json.type} ${propsString}>\n  ${json.children.map(jsonToJSX)}\n</${json.type}>`\n    : `<${json.type}${propsString}>${json.children}</${json.type}>`;\n}\n/**\n * Exposes react module used in JSONX\n * @returns {Object} React\n */\nexport function __getReact() {\n  return React;\n}\n\n/**\n * Exposes react dom module used in JSONX\n * @returns {Object} ReactDOM\n */\nexport function __getReactDOM() {\n  return ReactDOM;\n}\n\n/**\n * Exposes global hook used in JSONX\n * @returns {Object} useGlobalHook\n */\nexport function __getUseGlobalHook() {\n  return useGlobalHook;\n}\n\nexport const _jsonxChildren = jsonxChildren;\nexport const _jsonxComponents = jsonxComponents;\nexport const _jsonxProps = jsonxProps;\nexport const _jsonxUtils = jsonxUtils;\nexport { __express, __express as renderFile, } from './express';\n\nexport default getReactElementFromJSONX;",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/jsonx/src/main.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "createElement",
    "memberof": "src/main.js",
    "static": true,
    "longname": "src/main.js~createElement",
    "access": "public",
    "export": false,
    "importPath": "jsonx/src/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "componentMap",
    "memberof": "src/main.js",
    "static": true,
    "longname": "src/main.js~componentMap",
    "access": "public",
    "export": false,
    "importPath": "jsonx/src/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "getComputedProps",
    "memberof": "src/main.js",
    "static": true,
    "longname": "src/main.js~getComputedProps",
    "access": "public",
    "export": false,
    "importPath": "jsonx/src/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "getJSONXChildren",
    "memberof": "src/main.js",
    "static": true,
    "longname": "src/main.js~getJSONXChildren",
    "access": "public",
    "export": false,
    "importPath": "jsonx/src/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "displayComponent",
    "memberof": "src/main.js",
    "static": true,
    "longname": "src/main.js~displayComponent",
    "access": "public",
    "export": false,
    "importPath": "jsonx/src/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "renderIndex",
    "memberof": "src/main.js",
    "static": true,
    "longname": "src/main.js~renderIndex",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/main.js",
    "importStyle": "{renderIndex}",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "jsonxRender",
    "memberof": "src/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/main.js~jsonxRender",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/main.js",
    "importStyle": "{jsonxRender}",
    "description": "Use JSONX without any configuration to render JSONX JSON to HTML and insert JSONX into querySelector using ReactDOM.render",
    "examples": [
      "// Uses react to create <!DOCTYPE html><body><div id=\"myApp\"><div class=\"jsonx-generated\"><p style=\"color:red;\">hello world</p></div></div></body>\njsonx.jsonxRender({ jsonx: { component: 'div', props:{className:'jsonx-generated',children:[{ component:'p',props:{style:{color:'red'}}, children:'hello world' }]}}, querySelector:'#myApp', });"
    ],
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "options used to inject html via ReactDOM.render"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.jsonx",
        "description": "any valid JSONX JSON object"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.resources",
        "description": "any additional resource used for asynchronous properties"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.querySelector",
        "description": "selector for document.querySelector"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "this",
        "description": "options for getReactElementFromJSONX"
      }
    ]
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "outputHTML",
    "memberof": "src/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/main.js~outputHTML",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/main.js",
    "importStyle": "{outputHTML}",
    "description": "Use ReactDOMServer.renderToString to render html from JSONX",
    "examples": [
      "// Uses react to create <div class=\"jsonx-generated\"><p style=\"color:red;\">hello world</p></div>\njsonx.outputHTML({ jsonx: { component: 'div', props:{className:'jsonx-generated',children:[{ component:'p',props:{style:{color:'red'}}, children:'hello world' }]}}, });"
    ],
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} React genereated html via JSONX JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "options used to inject html via ReactDOM.render"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.jsonx",
        "description": "any valid JSONX JSON object"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.resources",
        "description": "any additional resource used for asynchronous properties"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "this",
        "description": "options for getReactElementFromJSONX"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "React genereated html via JSONX JSON"
    }
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "getReactElementFromJSONX",
    "memberof": "src/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/main.js~getReactElementFromJSONX",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/main.js",
    "importStyle": "{getReactElementFromJSONX}",
    "description": "Use React.createElement and JSONX JSON to create React elements",
    "examples": [
      "// Uses react to create the equivalent JSX <myComponent style={{color:blue}}>hello world</myComponent>\njsonx.getReactElementFromJSONX({component:'myCompnent',props:{style:{color:'blue'}},children:'hello world'})"
    ],
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function} React element via React.createElement"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "jsonx",
        "description": "any valid JSONX JSON object"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "resources",
        "description": "any additional resource used for asynchronous properties"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "this",
        "description": "options for getReactElementFromJSONX"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "this.componentLibraries",
        "description": "react components to render with JSONX"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "this.debug",
        "description": "use debug messages"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "this.returnJSON",
        "description": "return json object of {type,props,children} instead of react element"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "this.disableRenderIndexKey",
        "description": "disables auto assign a key prop"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "console.error",
        "defaultRaw": "console.error",
        "name": "this.logError",
        "description": "error logging function"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "this.boundedComponents",
        "description": "list of components that require a bound this context (usefult for redux router)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "React element via React.createElement"
    }
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "getRenderedJSON",
    "memberof": "src/main.js",
    "static": true,
    "longname": "src/main.js~getRenderedJSON",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/main.js",
    "importStyle": "{getRenderedJSON}",
    "description": null,
    "lineNumber": 109,
    "undocument": true
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "getReactElement",
    "memberof": "src/main.js",
    "static": true,
    "longname": "src/main.js~getReactElement",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/main.js",
    "importStyle": "{getReactElement}",
    "description": null,
    "lineNumber": 110,
    "undocument": true
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "getReactElementFromJSON",
    "memberof": "src/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/main.js~getReactElementFromJSON",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/main.js",
    "importStyle": "{getReactElementFromJSON}",
    "description": "converts a json object {type,props,children} into a react element ",
    "examples": [
      "jsonx.getReactElementFromJSON({type:'div',props:{title:'some title attribute'},children:'inner html text'})"
    ],
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function} React element via React.createElement"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.type",
        "description": "'div' or react component"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.props",
        "description": "props for react element"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "[Object]"
        ],
        "spread": false,
        "optional": false,
        "name": "options.children",
        "description": "children elements"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "React element via React.createElement"
    }
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "compile",
    "memberof": "src/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/main.js~compile",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/main.js",
    "importStyle": "{compile}",
    "description": "converts a jsonx json object into a react function component ",
    "examples": [
      "jsonx.compile({jsonx:{component:'div',props:{title:'some title attribute'},children:'inner html text'}}) //=>React Function Component"
    ],
    "lineNumber": 133,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function} React element via React.createElement"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "jsonx",
        "description": "valid JSONX JSON"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "resources",
        "description": "props for react element"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "React element via React.createElement"
    }
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "outputJSX",
    "memberof": "src/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/main.js~outputJSX",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/main.js",
    "importStyle": "{outputJSX}",
    "description": "converts JSONX JSON IR to JSX",
    "examples": [
      "jsonx.jsonToJSX({ type: 'div', props: { key: 5, title: 'test' }, children: 'hello' }) // => '<div key={5} title=\"test\">hello</div>'"
    ],
    "lineNumber": 151,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} jsx string"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "{type,props,children}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "jsx string"
    }
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "outputJSON",
    "memberof": "src/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/main.js~outputJSON",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/main.js",
    "importStyle": "{outputJSON}",
    "description": "Compiles JSONX into JSON IR format for react create element",
    "examples": [
      "jsonx.outputJSON({ component: 'div', props: { title: 'test', }, children: 'hello', }); //=> { type: 'div',\nprops: { key: 5, title: 'test' },\nchildren: 'hello' }"
    ],
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} json - {type,props,children}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "jsonx",
        "description": "any valid JSONX JSON object"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "resources",
        "description": "any additional resource used for asynchronous properties"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "this",
        "description": "options for getReactElementFromJSONX"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "json - {type,props,children}"
    }
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "jsonxHTMLString",
    "memberof": "src/main.js",
    "static": true,
    "longname": "src/main.js~jsonxHTMLString",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/main.js",
    "importStyle": "{jsonxHTMLString}",
    "description": null,
    "lineNumber": 172,
    "undocument": true
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "jsonToJSX",
    "memberof": "src/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/main.js~jsonToJSX",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/main.js",
    "importStyle": "{jsonToJSX}",
    "description": "converts JSONX JSON IR to JSX",
    "examples": [
      "jsonx.jsonToJSX({ type: 'div', props: { key: 5, title: 'test' }, children: 'hello' }) // => '<div key={5} title=\"test\">hello</div>'"
    ],
    "lineNumber": 181,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} jsx string"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "{type,props,children}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "jsx string"
    }
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "__getReact",
    "memberof": "src/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/main.js~__getReact",
    "access": "private",
    "export": true,
    "importPath": "jsonx/src/main.js",
    "importStyle": "{__getReact}",
    "description": "Exposes react module used in JSONX",
    "lineNumber": 204,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} React"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "React"
    }
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "__getReactDOM",
    "memberof": "src/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/main.js~__getReactDOM",
    "access": "private",
    "export": true,
    "importPath": "jsonx/src/main.js",
    "importStyle": "{__getReactDOM}",
    "description": "Exposes react dom module used in JSONX",
    "lineNumber": 212,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} ReactDOM"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "ReactDOM"
    }
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "__getUseGlobalHook",
    "memberof": "src/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/main.js~__getUseGlobalHook",
    "access": "private",
    "export": true,
    "importPath": "jsonx/src/main.js",
    "importStyle": "{__getUseGlobalHook}",
    "description": "Exposes global hook used in JSONX",
    "lineNumber": 220,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} useGlobalHook"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "useGlobalHook"
    }
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "_jsonxChildren",
    "memberof": "src/main.js",
    "static": true,
    "longname": "src/main.js~_jsonxChildren",
    "access": "private",
    "export": true,
    "importPath": "jsonx/src/main.js",
    "importStyle": "{_jsonxChildren}",
    "description": null,
    "lineNumber": 224,
    "undocument": true
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "_jsonxComponents",
    "memberof": "src/main.js",
    "static": true,
    "longname": "src/main.js~_jsonxComponents",
    "access": "private",
    "export": true,
    "importPath": "jsonx/src/main.js",
    "importStyle": "{_jsonxComponents}",
    "description": null,
    "lineNumber": 225,
    "undocument": true
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "_jsonxProps",
    "memberof": "src/main.js",
    "static": true,
    "longname": "src/main.js~_jsonxProps",
    "access": "private",
    "export": true,
    "importPath": "jsonx/src/main.js",
    "importStyle": "{_jsonxProps}",
    "description": null,
    "lineNumber": 226,
    "undocument": true
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "_jsonxUtils",
    "memberof": "src/main.js",
    "static": true,
    "longname": "src/main.js~_jsonxUtils",
    "access": "private",
    "export": true,
    "importPath": "jsonx/src/main.js",
    "importStyle": "{_jsonxUtils}",
    "description": null,
    "lineNumber": 227,
    "undocument": true
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "src/props.js",
    "content": "import React from 'react';\r\nimport { getRenderedJSON, } from './main';\r\nimport * as utilities from './utils';\r\nimport { getComponentFromMap, getReactFunctionComponent, getReactContext, } from './components';\r\n// if (typeof window === 'undefined') {\r\n//   var window = window || {};\r\n// }\r\n\r\n//https://stackoverflow.com/questions/1007981/how-to-get-function-parameter-names-values-dynamically\r\nexport const STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\r\nexport const ARGUMENT_NAMES = /([^\\s,]+)/g;\r\n/**\r\n * returns the names of parameters from a function declaration\r\n * @example\r\n * const arrowFunctionAdd = (a,b)=>a+b;\r\n * function regularFunctionAdd(c,d){return c+d;}\r\n * getParamNames(arrowFunctionAdd) // => ['a','b']\r\n * getParamNames(regularFunctionAdd) // => ['c','d']\r\n * @param {Function} func \r\n * @todo write tests\r\n */\r\nexport function getParamNames(func) {\r\n  var fnStr = func.toString().replace(STRIP_COMMENTS, '');\r\n  var result = fnStr.slice(fnStr.indexOf('(')+1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\r\n  if(result === null){\r\n    result = [];\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * It uses traverse on a traverseObject to returns a resolved object on propName. So if you're making an ajax call and want to pass properties into a component, you can assign them using asyncprops and reference object properties by an array of property paths\r\n * @param {Object} [traverseObject={}] - the object that contains values of propName\r\n * @param {Object} options \r\n * @param {Object} options.jsonx - Valid JSONX JSON \r\n * @param {Object} [options.propName='asyncprops'] - Property on JSONX to resolve values onto, i.e (asyncprops,thisprops,windowprops) \r\n * @returns {Object} resolved object\r\n * @example\r\n const traverseObject = {\r\n  user: {\r\n    name: 'jsonx',\r\n    description: 'react withouth javascript',\r\n  },\r\n  stats: {\r\n    logins: 102,\r\n    comments: 3,\r\n  },\r\n  authentication: 'OAuth2',\r\n};\r\nconst testJSONX = {\r\n  component: 'div',\r\n  props: {\r\n    id: 'generatedJSONX',\r\n    className:'jsonx',\r\n  },\r\n  asyncprops:{\r\n    auth: [ 'authentication', ],\r\n    username: [ 'user', 'name', ],\r\n  },\r\n  children: [\r\n    {\r\n      component: 'p',\r\n      props: {\r\n        style: {\r\n          color: 'red',\r\n          fontWeight:'bold',\r\n        },\r\n      },\r\n      children:'hello world',\r\n    },\r\n  ],\r\n};\r\nconst JSONXP = getJSONXProps({ jsonx: testJSONX, traverseObject, });\r\n// => {\r\n//   auth: 'OAuth2',\r\n//   username: 'jsonx'\r\n// }\r\n\r\n//finally resolves:\r\nconst testJSONX = {\r\n  component: 'div',\r\n  props: {\r\n    id: 'generatedJSONX',\r\n    className:'jsonx',\r\n    auth: 'OAuth2',\r\n    username: 'jsonx',\r\n  },\r\n  children: [\r\n    {\r\n      component: 'p',\r\n      props: {\r\n        style: {\r\n          color: 'red',\r\n          fontWeight:'bold',\r\n        },\r\n      },\r\n      children:'hello world',\r\n    },\r\n  ],\r\n};\r\n */\r\nexport function getJSONXProps(options = {}) {\r\n  // eslint-disable-next-line\r\n  let { jsonx = {}, propName = 'asyncprops', traverseObject = {}, } = options;\r\n  // return (jsonx.asyncprops && typeof jsonx.asyncprops === 'object')\r\n  // ? utilities.traverse(jsonx.asyncprops, resources)\r\n  // : {};\r\n  return (jsonx[ propName ] && typeof jsonx[ propName ] === 'object')\r\n    ? utilities.traverse(jsonx[ propName ], traverseObject)\r\n    : {};\r\n}\r\n\r\n/**\r\n * returns children jsonx components defined on __spreadComponent spread over an array on props.__spread\r\n * @param {*} options \r\n */\r\nexport function getChildrenComponents(options = {}) {\r\n  const { allProps = {}, jsonx = {}, } = options;\r\n  // const asyncprops = getJSONXProps({ jsonx, propName: 'spreadprops', traverseObject: allProps, });\r\n  if (Array.isArray(allProps.__spread) === false) {\r\n    if ((this && this.debug) || jsonx.debug) {\r\n      return {\r\n        children: new Error('Using __spreadComponent requires an array prop \\'__spread\\'').toString(),\r\n      };\r\n    } else {\r\n      return { children:undefined, };\r\n    }\r\n  } else {\r\n    return {\r\n      _children: allProps.__spread.map(__item => {\r\n        const clonedChild = Object.assign({}, jsonx.__spreadComponent);\r\n        const clonedChildProps = Object.assign({}, clonedChild.props);\r\n        clonedChildProps.__item = __item;\r\n        clonedChild.props = clonedChildProps;\r\n        return clonedChild;\r\n      }),\r\n    };\r\n  }\r\n}\r\n\r\nexport function boundArgsReducer(jsonx = {}) {\r\n  return (args, arg) => {\r\n    let val;\r\n    if (this && this.state && typeof this.state[ arg ] !== 'undefined') val = (this.state[ arg ]);\r\n    else if (this && this.props && typeof this.props[ arg ] !== 'undefined') val = (this.props[ arg ]);\r\n    else if (jsonx.props && typeof jsonx.props[ arg ] !== 'undefined') val = (jsonx.props[ arg ]);\r\n    if (typeof val !== 'undefined') args.push(val);\r\n    return args.filter(a=>typeof a!=='undefined');\r\n  };\r\n}\r\n\r\n/**\r\n * Used to evalute javascript and set those variables as props. getEvalProps evaluates __dangerouslyEvalProps and __dangerouslyBindEvalProps properties with eval, this is used when component properties are functions, __dangerouslyBindEvalProps is used when those functions require that this is bound to the function. For __dangerouslyBindEvalProps it must resolve an expression, so functions should be wrapped in (). I.e. (function f(x){ return this.minimum+x;})\r\n * @param {Object} options \r\n * @param {Object} options.jsonx - Valid JSONX JSON \r\n * @returns {Object} returns resolved object with evaluated javascript\r\n * @example\r\n const testVals = {\r\n    auth: 'true',\r\n    username: '(user={})=>user.name',\r\n  };\r\n  const testJSONX = Object.assign({}, sampleJSONX, {\r\n    __dangerouslyEvalProps: testVals, __dangerouslyBindEvalProps: {\r\n      email: '(function getUser(user={}){ return this.testBound(); })',\r\n    },\r\n  });\r\n  const JSONXP = getEvalProps.call({ testBound: () => 'bounded', }, { jsonx: testJSONX, });\r\n  const evalutedComputedFunc = JSONXP.username({ name: 'bob', });\r\n  const evalutedComputedBoundFunc = JSONXP.email({ email:'test@email.domain', });\r\n  // expect(JSONXP.auth).to.be.true;\r\n  // expect(evalutedComputedFunc).to.eql('bob');\r\n  // expect(evalutedComputedBoundFunc).to.eql('bounded');\r\n */\r\nexport function getEvalProps(options = {}) {\r\n  const { jsonx, } = options;\r\n  const scopedEval = eval; //https://github.com/rollup/rollup/wiki/Troubleshooting#avoiding-eval\r\n  let evAllProps = {};\r\n  if (jsonx.__dangerouslyEvalAllProps) {\r\n    let evVal;\r\n    try {\r\n      // eslint-disable-next-line\r\n      evVal = (typeof evVal === 'function')\r\n        ? jsonx.__dangerouslyEvalAllProps\r\n        : scopedEval(jsonx.__dangerouslyEvalAllProps);\r\n    } catch (e) { \r\n      if (this.debug || jsonx.debug) evVal = e;\r\n    }\r\n    evAllProps = evVal.call(this, { jsonx, });\r\n  }\r\n  const evProps = Object.keys(jsonx.__dangerouslyEvalProps || {}).reduce((eprops, epropName) => {\r\n    let evVal;\r\n    let evValString;\r\n    try {\r\n      // eslint-disable-next-line\r\n      evVal = scopedEval(jsonx.__dangerouslyEvalProps[ epropName ]);\r\n      evValString = evVal.toString();\r\n    } catch (e) { \r\n      if (this.debug || jsonx.debug) evVal = e;\r\n    }\r\n    eprops[ epropName ] = (typeof evVal === 'function')\r\n      ? evVal.call(this, { jsonx, })\r\n      : evVal;\r\n    if (this.exposeEval) eprops[ `__eval_${epropName}` ] = evValString;\r\n    return eprops;\r\n  }, {});\r\n  const evBindProps = Object.keys(jsonx.__dangerouslyBindEvalProps || {}).reduce((eprops, epropName) => {\r\n    let evVal;\r\n    let evValString;\r\n\r\n    try {\r\n      let args;\r\n      const functionBody = jsonx.__dangerouslyBindEvalProps[ epropName ];\r\n      // InlineFunction = Function.prototype.constructor.apply({}, args);\r\n      let functionDefinition;\r\n      if (typeof functionBody === 'function') {\r\n        functionDefinition = functionBody;\r\n      } else {\r\n        functionDefinition = scopedEval(jsonx.__dangerouslyBindEvalProps[ epropName ]);\r\n        evValString = functionDefinition.toString();\r\n\r\n      } // eslint-disable-next-line\r\n      if (jsonx.__functionargs && jsonx.__functionargs[epropName]) {\r\n        args = [this, ].concat(jsonx.__functionargs[epropName].reduce(boundArgsReducer.call(this, jsonx), []));\r\n      } else if (jsonx.__functionparams===false) {\r\n        args = [this, ];\r\n      } else {\r\n        const functionDefArgs = getParamNames(functionDefinition);\r\n        args = [this, ].concat(functionDefArgs.reduce(boundArgsReducer.call(this, jsonx), []));\r\n      }\r\n      // eslint-disable-next-line\r\n      evVal = functionDefinition.bind(...args);\r\n    } catch (e) { \r\n      if (this.debug || jsonx.debug) evVal = e;\r\n    }\r\n    // eslint-disable-next-line\r\n    eprops[ epropName ] = evVal;\r\n    if (this.exposeEval) eprops[ `__eval_${epropName}` ] = evValString;\r\n    return eprops;\r\n  }, {});\r\n\r\n  return Object.assign({}, evProps, evBindProps, evAllProps);\r\n}\r\n\r\n/**\r\n * Resolves jsonx.__dangerouslyInsertComponents into an object that turns each value into a React components. This is typically used in a library like Recharts where you pass custom components for chart ticks or plot points. \r\n * @param {Object} options \r\n * @param {Object} options.jsonx - Valid JSONX JSON \r\n * @param {Object} [options.resources={}] - object to use for resourceprops(asyncprops), usually a result of an asynchronous call\r\n * @returns {Object} resolved object of React Components\r\n */\r\nexport function getComponentProps(options = {}) {\r\n  const { jsonx, resources, } = options;\r\n  return Object.keys(jsonx.__dangerouslyInsertComponents).reduce((cprops, cpropName) => {\r\n    let componentVal;\r\n    try {\r\n      // eslint-disable-next-line\r\n      componentVal = getRenderedJSON.call(this, jsonx.__dangerouslyInsertComponents[ cpropName ], resources);\r\n    } catch (e) {\r\n      if (this.debug || jsonx.debug) componentVal = e;\r\n    }\r\n    cprops[ cpropName ] = componentVal;\r\n    return cprops;\r\n  }, {});\r\n}\r\n\r\nexport function getReactComponents(options) {\r\n  const { jsonx, resources, } = options;\r\n  const functionComponents = (!jsonx.__dangerouslyInsertFunctionComponents)\r\n    ? {}\r\n    : Object.keys(jsonx.__dangerouslyInsertFunctionComponents).reduce((cprops, cpropName) => {\r\n      let componentVal;\r\n      try {\r\n        const args = jsonx.__dangerouslyInsertFunctionComponents[ cpropName ];\r\n        args.options = Object.assign({}, args.options, { resources });\r\n        // eslint-disable-next-line\r\n        componentVal = getReactFunctionComponent.call(this, args.reactComponent, args.functionBody, args.options);\r\n      } catch (e) {\r\n        if (this.debug || jsonx.debug) componentVal = e;\r\n      }\r\n      cprops[ cpropName ] = cpropName === '_children' ? [ componentVal ] : componentVal;\r\n      return cprops;\r\n    }, {});\r\n  const classComponents = (!jsonx.__dangerouslyInsertClassComponents)\r\n    ? {}\r\n    : Object.keys(jsonx.__dangerouslyInsertClassComponents).reduce((cprops, cpropName) => {\r\n      let componentVal;\r\n      try {\r\n        const args = jsonx.__dangerouslyInsertClassComponents[ cpropName ];\r\n        args.options = Object.assign({}, args.options, { resources });\r\n        // eslint-disable-next-line\r\n        componentVal = getReactFunctionComponent.call(this, args.reactComponent, args.options);\r\n      } catch (e) {\r\n        if (this.debug || jsonx.debug) componentVal = e;\r\n      }\r\n      cprops[ cpropName ] = cpropName === '_children' ? [ componentVal ] : componentVal;\r\n      return cprops;\r\n    }, {});\r\n  return Object.assign({}, functionComponents, classComponents);\r\n}\r\n\r\n/**\r\n * Resolves jsonx.__dangerouslyInsertReactComponents into an object that turns each value into a React components. This is typically used in a library like Recharts where you pass custom components for chart ticks or plot points. \r\n * @param {Object} options \r\n * @param {Object} options.jsonx - Valid JSONX JSON \r\n//  * @param {Object} [options.resources={}] - object to use for asyncprops, usually a result of an asynchronous call\r\n * @returns {Object} resolved object of React Components\r\n */\r\nexport function getReactComponentProps(options = {}) {\r\n  const { jsonx, } = options;\r\n  if (jsonx.__dangerouslyInsertJSONXComponents && Object.keys(jsonx.__dangerouslyInsertJSONXComponents).length) { \r\n    return Object.keys(jsonx.__dangerouslyInsertJSONXComponents).reduce((cprops, cpropName) => {\r\n      let componentVal;\r\n      try {\r\n        componentVal = getComponentFromMap({\r\n          jsonx: jsonx.__dangerouslyInsertJSONXComponents[ cpropName ],\r\n          reactComponents: this.reactComponents,\r\n          componentLibraries: this.componentLibraries,\r\n        });\r\n      } catch (e) {\r\n        if (this.debug || jsonx.debug) componentVal = e;\r\n      }\r\n      // eslint-disable-next-line\r\n      cprops[ cpropName ] = componentVal;\r\n      return cprops;\r\n    }, {});\r\n  } else {\r\n    return Object.keys(jsonx.__dangerouslyInsertReactComponents).reduce((cprops, cpropName) => {\r\n      let componentVal;\r\n      try {\r\n        componentVal = getComponentFromMap({\r\n          jsonx: {\r\n            component: jsonx.__dangerouslyInsertReactComponents[ cpropName ],\r\n            props: jsonx.__dangerouslyInsertComponentProps\r\n              ? jsonx.__dangerouslyInsertComponentProps[ cpropName ]\r\n              : {},\r\n          },\r\n          reactComponents: this.reactComponents,\r\n          componentLibraries: this.componentLibraries,\r\n        });\r\n      } catch (e) {\r\n        if (this.debug || jsonx.debug) componentVal = e;\r\n      }\r\n      // eslint-disable-next-line\r\n      cprops[ cpropName ] = componentVal;\r\n      return cprops;\r\n    }, {});\r\n  }\r\n}\r\n\r\n/**\r\n * Takes a function string and returns a function on either this.props or window. The function can only be 2 levels deep\r\n * @param {Object} options \r\n * @param {String} [options.propFunc='func:'] - function string, like func:window.LocalStorage.getItem or func:this.props.onClick  or func:inline.myInlineFunction\r\n * @param {Object} [options.allProps={}] - merged computed props, Object.assign({ key: renderIndex, }, thisprops, jsonx.props, resourceprops, asyncprops, windowprops, evalProps, insertedComponents);\r\n * @returns {Function} returns a function from this.props or window functions\r\n * @example\r\n * getFunctionFromProps({ propFunc='func:this.props.onClick', }) // => this.props.onClick\r\n */\r\nexport function getFunctionFromProps(options) {\r\n  const { propFunc='func:', propBody, jsonx, functionProperty='', } = options;\r\n  // eslint-disable-next-line\r\n  const { logError = console.error,  debug, } = this;\r\n  const windowObject = this.window || global.window || {};\r\n  try {\r\n    const functionNameString = propFunc.split(':')[ 1 ] || '';\r\n    const functionNameArray = functionNameString.split('.');\r\n    const functionName = (functionNameArray.length) ? functionNameArray[ functionNameArray.length - 1 ] : '';\r\n\r\n    if (propFunc.includes('func:inline')) {\r\n      // eslint-disable-next-line\r\n      let InlineFunction;\r\n      if (jsonx.__functionargs) {\r\n        const args = [].concat(jsonx.__functionargs[functionProperty]);\r\n        args.push(propBody);\r\n        InlineFunction = Function.prototype.constructor.apply({}, args);\r\n      } else {\r\n        InlineFunction = Function('param1', 'param2', '\"use strict\";' + propBody);\r\n      }\r\n      const [propFuncName, funcName, ] = propFunc.split('.');\r\n      \r\n      Object.defineProperty(\r\n        InlineFunction,\r\n        'name',\r\n        {\r\n          value: funcName,\r\n        }\r\n      );\r\n      if (jsonx.__functionargs) {\r\n        const boundArgs = [this,].concat(jsonx.__functionargs[functionProperty].map(arg => jsonx.props[ arg ]));\r\n        return InlineFunction.bind(...boundArgs);\r\n      } else {\r\n        return InlineFunction.bind(this);\r\n      }\r\n    } else if (propFunc.indexOf('func:window') !== -1) {\r\n      if (functionNameArray.length === 3) {\r\n        try {\r\n          return windowObject[ functionNameArray[ 1 ] ][ functionName ].bind(this);\r\n        } catch (e) {\r\n          if (debug) {\r\n            logError(e);\r\n          }\r\n          return windowObject[ functionNameArray[ 1 ] ][ functionName ];\r\n        }\r\n      } else {\r\n        try {\r\n          return windowObject[ functionName ].bind(this);\r\n        } catch (e) {\r\n          if (debug) {\r\n            logError(e);\r\n          }\r\n          return windowObject[ functionName ];\r\n        }\r\n      }\r\n    } else if (functionNameArray.length === 4) {\r\n      return (this.props)\r\n        ? this.props[ functionNameArray[ 2 ] ][ functionName ]\r\n        : jsonx.props[ functionNameArray[ 2 ] ][ functionName ];\r\n    } else if (functionNameArray.length === 3) {\r\n      return (this.props)\r\n        ? this.props[ functionName ].bind(this)\r\n        : jsonx.props[ functionName ].bind(this);\r\n    } else {\r\n      return function () {};\r\n    }\r\n  } catch (e) {\r\n    if (this.debug){\r\n      logError(e);\r\n      if (jsonx && jsonx.debug) return e;\r\n    }\r\n    return function () {};\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a resolved object from function strings that has functions pulled from jsonx.__functionProps\r\n * @param {Object} options \r\n * @param {Object} options.jsonx - Valid JSONX JSON \r\n * @param {Object} [options.allProps={}] - merged computed props, Object.assign({ key: renderIndex, }, thisprops, jsonx.props, asyncprops, windowprops, evalProps, insertedComponents);\r\n * @returns {Object} resolved object of functions from function strings\r\n */\r\nexport function getFunctionProps(options = {}) {\r\n  const { allProps = {}, jsonx = {}, } = options;\r\n  const getFunction = getFunctionFromProps.bind(this);\r\n  const funcProps = jsonx.__functionProps;\r\n  //Allowing for window functions\r\n  Object.keys(funcProps).forEach(key => {\r\n    if (typeof funcProps[ key ] === 'string' && funcProps[ key ].indexOf('func:') !== -1) {\r\n      allProps[ key ] = getFunction({\r\n        propFunc: funcProps[ key ],\r\n        propBody: (jsonx.__inline)?jsonx.__inline[ key ]:'',\r\n        jsonx,\r\n        functionProperty:key,\r\n      });\r\n    } \r\n  });\r\n  return allProps;\r\n}\r\n\r\n/**\r\n * Returns a resolved object that has React Components pulled from window.__jsonx_custom_elements\r\n * @param {Object} options \r\n * @param {Object} options.jsonx - Valid JSONX JSON \r\n * @param {Object} [options.allProps={}] - merged computed props, Object.assign({ key: renderIndex, }, thisprops, jsonx.props, asyncprops, windowprops, evalProps, insertedComponents);\r\n * @returns {Object} resolved object of with React Components from a window property window.__jsonx_custom_elements\r\n */\r\nexport function getWindowComponents(options = {}) {\r\n  const { allProps, jsonx, } = options;\r\n  const windowComponents = jsonx.__windowComponents;\r\n  const window = this.window || global.window || {};\r\n  const windowFuncPrefix = 'func:window.__jsonx_custom_elements';\r\n  // if (jsonx.hasWindowComponent && window.__jsonx_custom_elements) {\r\n  Object.keys(windowComponents).forEach(key => {\r\n    const windowKEY = (typeof windowComponents[ key ] === 'string')\r\n      ? windowComponents[ key ].replace(`${windowFuncPrefix}.`, '')\r\n      : '';\r\n    if (typeof windowComponents[ key ] === 'string' && windowComponents[ key ].indexOf(windowFuncPrefix) !== -1 && typeof window.__jsonx_custom_elements[ windowKEY ] === 'function') {\r\n      const windowComponentElement = window.__jsonx_custom_elements[ windowKEY ];\r\n      const windowComponentProps = (allProps[ '__windowComponentProps' ]) ? allProps[ '__windowComponentProps' ]\r\n        : this.props;\r\n      allProps[ key ] = React.createElement(\r\n        windowComponentElement,\r\n        windowComponentProps,\r\n        null);\r\n    }\r\n  });\r\n  return allProps;\r\n}\r\n\r\n/**\r\n * Returns computed properties for React Components and any property that's prefixed with __ is a computedProperty\r\n * @param {Object} options \r\n * @param {Object} options.jsonx - Valid JSONX JSON \r\n * @param {Object} [options.resources={}] - object to use for asyncprops, usually a result of an asynchronous call\r\n * @param {Number} options.renderIndex - number used for React key prop\r\n * @param {function} [options.logError=console.error] - error logging function\r\n * @param {Object} [options.componentLibraries] - react components to render with JSONX\r\n * @param {Boolean} [options.useReduxState=true] - use redux props in this.props\r\n * @param {Boolean} [options.ignoreReduxPropsInComponentLibraries=true] - ignore redux props in this.props for component libraries, this is helpful incase these properties collide with component library element properties\r\n * @param {boolean} [options.debug=false] - use debug messages\r\n * @example\r\nconst testJSONX = { component: 'div',\r\n  props: { id: 'generatedJSONX', className: 'jsonx' },\r\n  children: [ [Object] ],\r\n  asyncprops: { auth: [Array], username: [Array] },\r\n  __dangerouslyEvalProps: { getUsername: '(user={})=>user.name' },\r\n  __dangerouslyInsertComponents: { myComponent: [Object] } \r\nconst resources = {\r\n  user: {\r\n    name: 'jsonx',\r\n    description: 'react withouth javascript',\r\n  },\r\n  stats: {\r\n    logins: 102,\r\n    comments: 3,\r\n  },\r\n  authentication: 'OAuth2',\r\n};\r\nconst renderIndex = 1;\r\ngetComputedProps.call({}, {\r\n        jsonx: testJSONX,\r\n        resources,\r\n        renderIndex,\r\n      });\r\ncomputedProps = { key: 1,\r\n     id: 'generatedJSONX',\r\n     className: 'jsonx',\r\n     auth: 'OAuth2',\r\n     username: 'jsonx',\r\n     getUsername: [Function],\r\n     myComponent:\r\n      { '$$typeof': Symbol(react.element),\r\n        type: 'p',\r\n        key: '8',\r\n        ref: null,\r\n        props: [Object],\r\n        _owner: null,\r\n        _store: {} } } }\r\n *\r\n */\r\nexport function getComputedProps(options = {}) {\r\n  // eslint-disable-next-line\r\n  const { jsonx = {}, resources = {}, renderIndex, logError = console.error, useReduxState=true, ignoreReduxPropsInComponentLibraries=true, disableRenderIndexKey=true, componentLibraries, debug, } = options;\r\n  try {\r\n    const componentThisProp = (jsonx.thisprops)\r\n      ? Object.assign({\r\n        __jsonx: {\r\n          _component: jsonx,\r\n          _resources: resources,\r\n        },\r\n      }, this.props,\r\n      jsonx.props,\r\n      (useReduxState && !jsonx.ignoreReduxProps && (ignoreReduxPropsInComponentLibraries && !componentLibraries[ jsonx.component ]))\r\n        ? (this.props && this.props.getState) ? this.props.getState() : {}\r\n        : {}\r\n      )\r\n      : undefined;\r\n    const windowTraverse = typeof window !== 'undefined' ? window : {};\r\n    const asyncprops = jsonx.asyncprops ? getJSONXProps({ jsonx, propName: 'asyncprops', traverseObject: resources, }) : {};\r\n    const resourceprops = jsonx.resourceprops ? getJSONXProps({ jsonx, propName: 'resourceprops', traverseObject: resources, }) : {};\r\n    const windowprops = jsonx.windowprops ? getJSONXProps({ jsonx, propName: 'windowprops', traverseObject: windowTraverse, }) : {};\r\n    const thisprops = jsonx.thisprops ? getJSONXProps({ jsonx, propName: 'thisprops', traverseObject: componentThisProp, }) : {};\r\n    const thisstate = jsonx.thisstate ? getJSONXProps({ jsonx, propName: 'thisstate', traverseObject: this.state, }) : {};\r\n\r\n    //allowing javascript injections\r\n    const evalProps = (jsonx.__dangerouslyEvalProps || jsonx.__dangerouslyBindEvalProps)\r\n      ? getEvalProps.call(this, { jsonx, })\r\n      : {};\r\n    const insertedComponents = (jsonx.__dangerouslyInsertComponents)\r\n      ? getComponentProps.call(this, { jsonx, resources, debug, })\r\n      : {};\r\n    const insertedReactComponents = (jsonx.__dangerouslyInsertReactComponents || jsonx.__dangerouslyInsertJSONXComponents)\r\n      ? getReactComponentProps.call(this, { jsonx, debug, })\r\n      : {};\r\n    const insertedComputedComponents = (jsonx.__dangerouslyInsertFunctionComponents  || jsonx.__dangerouslyInsertClassComponents)\r\n      ? getReactComponents.call(this, { jsonx, debug, })\r\n      : {};\r\n    \r\n    const evalAllProps = (jsonx.__dangerouslyEvalAllProps)\r\n      ? getEvalProps.call(this, { jsonx, })\r\n      : {};\r\n    const allProps = Object.assign({}, this.disableRenderIndexKey || disableRenderIndexKey ? {}: { key: renderIndex, }, jsonx.props, thisprops, thisstate, resourceprops, asyncprops, windowprops, evalProps, insertedComponents, insertedReactComponents, insertedComputedComponents);\r\n    const computedProps = Object.assign({}, allProps,\r\n      jsonx.__functionProps ? getFunctionProps.call(this, { allProps, jsonx, }) : {},\r\n      jsonx.__windowComponents ? getWindowComponents.call(this, { allProps, jsonx, }) : {},\r\n      jsonx.__spreadComponent ? getChildrenComponents.call(this, { allProps, jsonx, }) : {},\r\n      evalAllProps);\r\n    if (jsonx.debug) console.debug({ jsonx, computedProps, });\r\n    return computedProps;\r\n  } catch (e) {\r\n    debug && logError(e, (e.stack) ? e.stack : 'no stack');\r\n    return null;\r\n  }\r\n}",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/jsonx/src/props.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "STRIP_COMMENTS",
    "memberof": "src/props.js",
    "static": true,
    "longname": "src/props.js~STRIP_COMMENTS",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/props.js",
    "importStyle": "{STRIP_COMMENTS}",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "ARGUMENT_NAMES",
    "memberof": "src/props.js",
    "static": true,
    "longname": "src/props.js~ARGUMENT_NAMES",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/props.js",
    "importStyle": "{ARGUMENT_NAMES}",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 94,
    "kind": "function",
    "name": "getParamNames",
    "memberof": "src/props.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/props.js~getParamNames",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/props.js",
    "importStyle": "{getParamNames}",
    "description": "returns the names of parameters from a function declaration",
    "examples": [
      "const arrowFunctionAdd = (a,b)=>a+b;\nfunction regularFunctionAdd(c,d){return c+d;}\ngetParamNames(arrowFunctionAdd) // => ['a','b']\ngetParamNames(regularFunctionAdd) // => ['c','d']"
    ],
    "lineNumber": 22,
    "todo": [
      "write tests"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "getJSONXProps",
    "memberof": "src/props.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/props.js~getJSONXProps",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/props.js",
    "importStyle": "{getJSONXProps}",
    "description": "It uses traverse on a traverseObject to returns a resolved object on propName. So if you're making an ajax call and want to pass properties into a component, you can assign them using asyncprops and reference object properties by an array of property paths",
    "examples": [
      "const traverseObject = {\nuser: {\nname: 'jsonx',\ndescription: 'react withouth javascript',\n},\nstats: {\nlogins: 102,\ncomments: 3,\n},\nauthentication: 'OAuth2',\n};\nconst testJSONX = {\ncomponent: 'div',\nprops: {\nid: 'generatedJSONX',\nclassName:'jsonx',\n},\nasyncprops:{\nauth: [ 'authentication', ],\nusername: [ 'user', 'name', ],\n},\nchildren: [\n{\ncomponent: 'p',\nprops: {\nstyle: {\ncolor: 'red',\nfontWeight:'bold',\n},\n},\nchildren:'hello world',\n},\n],\n};\nconst JSONXP = getJSONXProps({ jsonx: testJSONX, traverseObject, });\n// => {\n//   auth: 'OAuth2',\n//   username: 'jsonx'\n// }\n\n//finally resolves:\nconst testJSONX = {\ncomponent: 'div',\nprops: {\nid: 'generatedJSONX',\nclassName:'jsonx',\nauth: 'OAuth2',\nusername: 'jsonx',\n},\nchildren: [\n{\ncomponent: 'p',\nprops: {\nstyle: {\ncolor: 'red',\nfontWeight:'bold',\n},\n},\nchildren:'hello world',\n},\n],\n};"
    ],
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} resolved object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "traverseObject",
        "description": "the object that contains values of propName"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.jsonx",
        "description": "Valid JSONX JSON"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'asyncprops'",
        "defaultRaw": "'asyncprops'",
        "name": "options.propName",
        "description": "Property on JSONX to resolve values onto, i.e (asyncprops,thisprops,windowprops)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "resolved object"
    }
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "getChildrenComponents",
    "memberof": "src/props.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/props.js~getChildrenComponents",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/props.js",
    "importStyle": "{getChildrenComponents}",
    "description": "returns children jsonx components defined on __spreadComponent spread over an array on props.__spread",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "boundArgsReducer",
    "memberof": "src/props.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/props.js~boundArgsReducer",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/props.js",
    "importStyle": "{boundArgsReducer}",
    "description": null,
    "lineNumber": 141,
    "undocument": true
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "getEvalProps",
    "memberof": "src/props.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/props.js~getEvalProps",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/props.js",
    "importStyle": "{getEvalProps}",
    "description": "Used to evalute javascript and set those variables as props. getEvalProps evaluates __dangerouslyEvalProps and __dangerouslyBindEvalProps properties with eval, this is used when component properties are functions, __dangerouslyBindEvalProps is used when those functions require that this is bound to the function. For __dangerouslyBindEvalProps it must resolve an expression, so functions should be wrapped in (). I.e. (function f(x){ return this.minimum+x;})",
    "examples": [
      "const testVals = {\nauth: 'true',\nusername: '(user={})=>user.name',\n};\nconst testJSONX = Object.assign({}, sampleJSONX, {\n__dangerouslyEvalProps: testVals, __dangerouslyBindEvalProps: {\nemail: '(function getUser(user={}){ return this.testBound(); })',\n},\n});\nconst JSONXP = getEvalProps.call({ testBound: () => 'bounded', }, { jsonx: testJSONX, });\nconst evalutedComputedFunc = JSONXP.username({ name: 'bob', });\nconst evalutedComputedBoundFunc = JSONXP.email({ email:'test@email.domain', });\n// expect(JSONXP.auth).to.be.true;\n// expect(evalutedComputedFunc).to.eql('bob');\n// expect(evalutedComputedBoundFunc).to.eql('bounded');"
    ],
    "lineNumber": 174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} returns resolved object with evaluated javascript"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.jsonx",
        "description": "Valid JSONX JSON"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "returns resolved object with evaluated javascript"
    }
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "getComponentProps",
    "memberof": "src/props.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/props.js~getComponentProps",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/props.js",
    "importStyle": "{getComponentProps}",
    "description": "Resolves jsonx.__dangerouslyInsertComponents into an object that turns each value into a React components. This is typically used in a library like Recharts where you pass custom components for chart ticks or plot points. ",
    "lineNumber": 251,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} resolved object of React Components"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.jsonx",
        "description": "Valid JSONX JSON"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.resources",
        "description": "object to use for resourceprops(asyncprops), usually a result of an asynchronous call"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "resolved object of React Components"
    }
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "getReactComponents",
    "memberof": "src/props.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/props.js~getReactComponents",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/props.js",
    "importStyle": "{getReactComponents}",
    "description": null,
    "lineNumber": 266,
    "undocument": true
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "getReactComponentProps",
    "memberof": "src/props.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/props.js~getReactComponentProps",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/props.js",
    "importStyle": "{getReactComponentProps}",
    "description": "Resolves jsonx.__dangerouslyInsertReactComponents into an object that turns each value into a React components. This is typically used in a library like Recharts where you pass custom components for chart ticks or plot points. ",
    "lineNumber": 308,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} resolved object of React Components"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.jsonx",
        "description": "Valid JSONX JSON \n//  * @param {Object} [options.resources={}] - object to use for asyncprops, usually a result of an asynchronous call"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "resolved object of React Components"
    }
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "getFunctionFromProps",
    "memberof": "src/props.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/props.js~getFunctionFromProps",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/props.js",
    "importStyle": "{getFunctionFromProps}",
    "description": "Takes a function string and returns a function on either this.props or window. The function can only be 2 levels deep",
    "examples": [
      "getFunctionFromProps({ propFunc='func:this.props.onClick', }) // => this.props.onClick"
    ],
    "lineNumber": 359,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} returns a function from this.props or window functions"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'func:'",
        "defaultRaw": "'func:'",
        "name": "options.propFunc",
        "description": "function string, like func:window.LocalStorage.getItem or func:this.props.onClick  or func:inline.myInlineFunction"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.allProps",
        "description": "merged computed props, Object.assign({ key: renderIndex, }, thisprops, jsonx.props, resourceprops, asyncprops, windowprops, evalProps, insertedComponents);"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "returns a function from this.props or window functions"
    }
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "getFunctionProps",
    "memberof": "src/props.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/props.js~getFunctionProps",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/props.js",
    "importStyle": "{getFunctionProps}",
    "description": "Returns a resolved object from function strings that has functions pulled from jsonx.__functionProps",
    "lineNumber": 441,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} resolved object of functions from function strings"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.jsonx",
        "description": "Valid JSONX JSON"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.allProps",
        "description": "merged computed props, Object.assign({ key: renderIndex, }, thisprops, jsonx.props, asyncprops, windowprops, evalProps, insertedComponents);"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "resolved object of functions from function strings"
    }
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "getWindowComponents",
    "memberof": "src/props.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/props.js~getWindowComponents",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/props.js",
    "importStyle": "{getWindowComponents}",
    "description": "Returns a resolved object that has React Components pulled from window.__jsonx_custom_elements",
    "lineNumber": 466,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} resolved object of with React Components from a window property window.__jsonx_custom_elements"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.jsonx",
        "description": "Valid JSONX JSON"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.allProps",
        "description": "merged computed props, Object.assign({ key: renderIndex, }, thisprops, jsonx.props, asyncprops, windowprops, evalProps, insertedComponents);"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "resolved object of with React Components from a window property window.__jsonx_custom_elements"
    }
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "getComputedProps",
    "memberof": "src/props.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/props.js~getComputedProps",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/props.js",
    "importStyle": "{getComputedProps}",
    "description": "Returns computed properties for React Components and any property that's prefixed with __ is a computedProperty",
    "examples": [
      "const testJSONX = { component: 'div',\nprops: { id: 'generatedJSONX', className: 'jsonx' },\nchildren: [ [Object] ],\nasyncprops: { auth: [Array], username: [Array] },\n__dangerouslyEvalProps: { getUsername: '(user={})=>user.name' },\n__dangerouslyInsertComponents: { myComponent: [Object] } \nconst resources = {\nuser: {\nname: 'jsonx',\ndescription: 'react withouth javascript',\n},\nstats: {\nlogins: 102,\ncomments: 3,\n},\nauthentication: 'OAuth2',\n};\nconst renderIndex = 1;\ngetComputedProps.call({}, {\njsonx: testJSONX,\nresources,\nrenderIndex,\n});\ncomputedProps = { key: 1,\nid: 'generatedJSONX',\nclassName: 'jsonx',\nauth: 'OAuth2',\nusername: 'jsonx',\ngetUsername: [Function],\nmyComponent:\n{ '$$typeof': Symbol(react.element),\ntype: 'p',\nkey: '8',\nref: null,\nprops: [Object],\n_owner: null,\n_store: {} } } }"
    ],
    "lineNumber": 540,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.jsonx",
        "description": "Valid JSONX JSON"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.resources",
        "description": "object to use for asyncprops, usually a result of an asynchronous call"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.renderIndex",
        "description": "number used for React key prop"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "console.error",
        "defaultRaw": "console.error",
        "name": "options.logError",
        "description": "error logging function"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.componentLibraries",
        "description": "react components to render with JSONX"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.useReduxState",
        "description": "use redux props in this.props"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.ignoreReduxPropsInComponentLibraries",
        "description": "ignore redux props in this.props for component libraries, this is helpful incase these properties collide with component library element properties"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.debug",
        "description": "use debug messages"
      }
    ]
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "src/utils.js",
    "content": "import UAParser from 'ua-parser-js';\r\n\r\n\r\n/**\r\n * Used to evaluate whether or not to render a component\r\n * @param {Object} options \r\n * @param {Object} options.jsonx - Valid JSONX JSON \r\n * @param {Object} options.props - Props to test comparison values against, usually Object.assign(jsonx.props,jsonx.asyncprops,jsonx.thisprops,jsonx.windowprops) \r\n * @returns {Boolean} returns true if all comparisons are true or if using or comparisons, at least one condition is true\r\n * @example\r\n const sampleJSONX = {\r\n  component: 'div',\r\n  props: {\r\n    id: 'generatedJSONX',\r\n    className: 'jsonx',\r\n    bigNum: 1430931039,\r\n    smallNum: 0.425,\r\n    falsey: false,\r\n    truthy: true,\r\n  },\r\n  children: 'some div',\r\n};\r\nconst testJSONX = Object.assign({}, sampleJSONX, {\r\n  comparisonprops: [{\r\n    left: ['truthy',],\r\n    operation:'==',\r\n    right:['falsey',],\r\n  }],\r\n});\r\ndisplayComponent({ jsonx: testJSONX, props: testJSONX2.props, }) // => false\r\n */\r\nexport function displayComponent(options = {}) {\r\n  const { jsonx = {}, props, } = options;\r\n  const propsToCompare = jsonx.comparisonprops;\r\n  const comparisons = Array.isArray(propsToCompare) ? propsToCompare.map(comp => {\r\n    const compares = {};\r\n    if (Array.isArray(comp.left)) {\r\n      compares.left = comp.left;\r\n    }\r\n    if (Array.isArray(comp.right)) {\r\n      compares.right = comp.right;\r\n    }\r\n    const propcompares = traverse(compares, props||jsonx.props);\r\n    const opscompares = Object.assign({}, comp, propcompares);\r\n    // console.debug({ opscompares, compares, renderedCompProps });\r\n    switch (opscompares.operation) {\r\n    case 'eq':\r\n    case '==':\r\n      // return opscompares.left == opscompares.right;\r\n      // eslint-disable-next-line\r\n      return opscompares.left == opscompares.right;\r\n    case 'dneq':\r\n    case '!=':\r\n    case '!':\r\n      // return opscompares.left != opscompares.right;\r\n      return opscompares.left !== opscompares.right;\r\n    case 'dnseq':\r\n    case '!==':\r\n      return opscompares.left !== opscompares.right;\r\n    case 'seq':\r\n    case '===':\r\n      return opscompares.left === opscompares.right;\r\n    case 'lt':\r\n    case '<':\r\n      return opscompares.left < opscompares.right;\r\n    case 'lte':\r\n    case '<=':\r\n      return opscompares.left <= opscompares.right;\r\n    case 'gt':\r\n    case '>':\r\n      return opscompares.left > opscompares.right;\r\n    case 'gte':\r\n    case '>=':\r\n      return opscompares.left >= opscompares.right;\r\n    case 'dne':\r\n    case 'undefined':\r\n    case 'null':\r\n      return opscompares.left === undefined || opscompares.left === null; \r\n    case '!null':\r\n    case '!undefined':\r\n    case 'exists':\r\n    default://'exists'\r\n      return opscompares.left !== undefined && opscompares.left !== null;\r\n    }\r\n    // }\r\n    // if (opscompares.operation === 'eq') {\r\n    //   // return opscompares.left == opscompares.right;\r\n    //   // eslint-disable-next-line\r\n    //   return opscompares.left == opscompares.right;\r\n    // } else if (opscompares.operation === 'dneq') {\r\n    //   // return opscompares.left != opscompares.right;\r\n    //   return opscompares.left !== opscompares.right;\r\n    // } else if (opscompares.operation === 'dnseq') {\r\n    //   return opscompares.left !== opscompares.right;\r\n    // } else if (opscompares.operation === 'seq') {\r\n    //   return opscompares.left === opscompares.right;\r\n    // } else if (opscompares.operation === 'lt') {\r\n    //   return opscompares.left < opscompares.right;\r\n    // } else if (opscompares.operation === 'lte') {\r\n    //   return opscompares.left <= opscompares.right;\r\n    // } else if (opscompares.operation === 'gt') {\r\n    //   return opscompares.left > opscompares.right;\r\n    // } else if (opscompares.operation === 'gte') {\r\n    //   return opscompares.left >= opscompares.right;\r\n    // } else if (opscompares.operation === 'dne') {\r\n    //   return opscompares.left === undefined || opscompares.left === null;\r\n    // } else { //'exists'\r\n    //   return opscompares.left !== undefined && opscompares.left !== null;\r\n    // }\r\n  }) : [];\r\n  const validProps = comparisons.filter(comp => comp === true);\r\n  if (!jsonx.comparisonprops) {\r\n    return true;\r\n  } else if (jsonx.comparisonorprops && validProps.length < 1) {\r\n    return false;\r\n  } else if (validProps.length !== comparisons.length && !jsonx.comparisonorprops) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Use to test if can bind components this context for react-redux-router \r\n * @returns {Boolean} true if browser is not IE or old android / chrome\r\n */\r\nexport function getAdvancedBinding() {\r\n  \r\n  if (typeof window === 'undefined') {\r\n    var window = (this && this.window)\r\n      ? this.window\r\n      : global.window || {};\r\n    if (!window.navigator) return false;\r\n  }\r\n  try {\r\n    if (window && window.navigator && window.navigator.userAgent && typeof window.navigator.userAgent === 'string') {\r\n      // console.log('window.navigator.userAgent',window.navigator.userAgent)\r\n      if(window.navigator.userAgent.indexOf('Trident') !== -1) {\r\n        return false;\r\n      }\r\n      const uastring = window.navigator.userAgent;\r\n      const parser = new UAParser();\r\n      parser.setUA(uastring);\r\n      const parseUserAgent = parser.getResult();\r\n      // console.log({ parseUserAgent, });\r\n      if ((parseUserAgent.browser.name === 'Chrome' || parseUserAgent.browser.name === 'Chrome WebView' ) && parseUserAgent.os.name === 'Android' && parseInt(parseUserAgent.browser.version, 10) < 50) {\r\n        return false;\r\n      }\r\n      if (parseUserAgent.browser.name === 'Android Browser') {\r\n        return false;\r\n      }\r\n    }\r\n  } catch (e) {\r\n    e;\r\n    console.error(e);\r\n    // console.warn('could not detect browser support', e);\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * take an object of array paths to traverse and resolve\r\n * @example\r\n * const testObj = {\r\n      user: {\r\n        name: 'jsonx',\r\n        description: 'react withouth javascript',\r\n      },\r\n      stats: {\r\n        logins: 102,\r\n        comments: 3,\r\n      },\r\n      authentication: 'OAuth2',\r\n    };\r\nconst testVals = { auth: ['authentication', ], username: ['user', 'name', ], };\r\n\r\n traverse(testVals, testObj) // =>{ auth:'OAuth2', username:'jsonx',  }\r\n * @param {Object} paths - an object to resolve array property paths \r\n * @param {Object} data - object to traverse\r\n * @returns {Object} resolved object with traversed properties\r\n * @throws {TypeError} \r\n */\r\nexport function traverse(paths = {}, data = {}) {\r\n  let keys = Object.keys(paths);\r\n  if (!keys.length) return paths;\r\n  return keys.reduce((result, key) => {\r\n    if (typeof paths[key] === 'string') result[key] = data[paths[key]];\r\n    else if (Array.isArray(paths[key])) {\r\n      let _path = Object.assign([], paths[key]);\r\n      let value = data;\r\n      while (_path.length && value && typeof value === 'object') {\r\n        let prop = _path.shift();\r\n        value = value[prop];\r\n      }\r\n      result[key] = (_path.length) ? undefined : value;\r\n    } else throw new TypeError('dynamic property paths must be a string or an array of strings or numeric indexes');\r\n    return result;\r\n  }, {});\r\n}\r\n\r\n/**\r\n * Validates JSONX JSON Syntax\r\n * @example\r\n * validateJSONX({component:'p',children:'hello world'})=>true\r\n * validateJSONX({children:'hello world'})=>throw SyntaxError('[0001] Missing React Component')\r\n * @param {Object} jsonx - JSONX JSON to validate \r\n * @param {Boolean} [returnAllErrors=false] - flag to either throw error or to return all errors in an array of errors\r\n * @returns {Boolean|Error[]} either returns true if JSONX is valid, or throws validation error or returns list of errors in array\r\n * @throws {SyntaxError|TypeError|ReferenceError}\r\n */\r\nexport function validateJSONX(jsonx = {}, returnAllErrors = false) {\r\n  const dynamicPropsNames = ['asyncprops', 'resourceprops', 'windowprops', 'thisprops', 'thisstate',];\r\n  const evalPropNames = ['__dangerouslyEvalProps', '__dangerouslyBindEvalProps',];\r\n  const validKeys = ['component', 'props', 'children', '__spreadComponent', '__inline','__functionargs', '__dangerouslyInsertComponents', '__dangerouslyInsertComponentProps', '__dangerouslyInsertJSONXComponents', '__functionProps', '__functionparams', '__windowComponents', '__windowComponentProps', 'comparisonprops', 'comparisonorprops', 'passprops', 'debug' ].concat(dynamicPropsNames, evalPropNames);\r\n  let errors = [];\r\n  if (!jsonx.component) {\r\n    errors.push(SyntaxError('[0001] Missing React Component'));\r\n  }\r\n  if (jsonx.props) {\r\n    if (typeof jsonx.props !== 'object' || Array.isArray(jsonx.props)) {\r\n      errors.push(TypeError('[0002] '+jsonx.component+': props must be an Object / valid React props'));\r\n    }\r\n    if (jsonx.props.children && (typeof jsonx.props.children !== 'string' || !Array.isArray(jsonx.props.children))) {\r\n      errors.push(TypeError('[0003] '+jsonx.component+': props.children must be an array of JSONX JSON objects or a string'));\r\n    }\r\n    if (jsonx.props._children && (typeof jsonx.props._children !== 'string' || !Array.isArray(jsonx.props._children))) {\r\n      errors.push(TypeError('[0004] '+jsonx.component+': props._children must be an array of JSONX JSON objects or a string'));\r\n    }\r\n  }\r\n  if (jsonx.children) {\r\n    if (typeof jsonx.children !== 'string' && !Array.isArray(jsonx.children)) {\r\n      errors.push(TypeError('[0005] '+jsonx.component+': children must be an array of JSONX JSON objects or a string'));\r\n    }\r\n    if (Array.isArray(jsonx.children)) {\r\n      const childrenErrors = jsonx.children\r\n        .filter(c => typeof c === 'object')\r\n        .map(c => validateJSONX(c, returnAllErrors));\r\n      errors = errors.concat(...childrenErrors);\r\n    }\r\n  }\r\n  dynamicPropsNames.forEach(dynamicprop => {\r\n    const jsonxDynamicProps = jsonx[ dynamicprop ];\r\n    if (jsonxDynamicProps) {\r\n      // if (dynamicprop === 'thisprops') {\r\n      //   console.log({ dynamicprop, jsonxDynamicProps });\r\n      // }\r\n      if (typeof jsonxDynamicProps !== 'object') {\r\n        errors.push(TypeError(`[0006] ${dynamicprop} must be an object`));\r\n      }\r\n      Object.keys(jsonxDynamicProps).forEach(resolvedDynamicProp => {\r\n        if (!Array.isArray(jsonxDynamicProps[ resolvedDynamicProp ])) {\r\n          errors.push(TypeError(`[0007] jsonx.${dynamicprop}.${resolvedDynamicProp} must be an array of strings`));\r\n        }\r\n        if (Array.isArray(jsonxDynamicProps[resolvedDynamicProp])) {\r\n          const allStringArray = jsonxDynamicProps[resolvedDynamicProp].filter(propArrayItem => typeof propArrayItem === 'string');\r\n          \r\n          if (allStringArray.length !== jsonxDynamicProps[ resolvedDynamicProp ].length) {\r\n            errors.push(TypeError(`[0008] jsonx.${dynamicprop}.${resolvedDynamicProp} must be an array of strings`));\r\n          }\r\n        }\r\n      });\r\n    }\r\n  });\r\n  const evalProps = jsonx.__dangerouslyEvalProps;\r\n  const boundEvalProps = jsonx.__dangerouslyBindEvalProps;\r\n  if (evalProps || boundEvalProps) {\r\n    if ((evalProps && typeof evalProps !== 'object') || (boundEvalProps && typeof boundEvalProps !== 'object')) {\r\n      errors.push(TypeError('[0009] __dangerouslyEvalProps must be an object of strings to convert to valid javascript'));\r\n    }\r\n    evalPropNames\r\n      .filter(evalProp => jsonx[ evalProp ])\r\n      .forEach(eProps => {\r\n        const evProp = jsonx[ eProps ];\r\n        const scopedEval = eval; \r\n        Object.keys(evProp).forEach(propToEval => {\r\n          if (typeof evProp[ propToEval ] !== 'string') {\r\n            errors.push(TypeError(`[0010] jsonx.${eProps}.${evProp} must be a string`));\r\n          }\r\n          try {\r\n            // console.log({ eProps });\r\n            if (eProps === '__dangerouslyBindEvalProps') {\r\n              const funcToBind = scopedEval(`(${evProp[ propToEval ]})`);\r\n              funcToBind.call({ bounded: true, });\r\n            } else {\r\n              scopedEval(evProp[ propToEval ]);\r\n            }\r\n          } catch (e) {\r\n            errors.push(e);\r\n          }\r\n        });\r\n      });\r\n  }\r\n  if (jsonx.__dangerouslyInsertComponents) {\r\n    Object.keys(jsonx.__dangerouslyInsertComponents).forEach(insertedComponents => {\r\n      try {\r\n        validateJSONX(jsonx.__dangerouslyInsertComponents[ insertedComponents ]);\r\n      } catch (e) {\r\n        errors.push(TypeError(`[0011] jsonx.__dangerouslyInsertComponents.${insertedComponents} must be a valid JSONX JSON Object: ${e.toString()}`));\r\n      }\r\n    });\r\n  }\r\n  if (jsonx.__functionProps) {\r\n    if (typeof jsonx.__functionProps !== 'object') {\r\n      errors.push(TypeError('[0012] jsonx.__functionProps  must be an object'));\r\n    } else {\r\n      \r\n      Object.keys(jsonx.__functionProps)\r\n        .forEach(fProp => {\r\n          if (jsonx.__functionProps[fProp] &&( typeof jsonx.__functionProps[fProp] !=='string' || jsonx.__functionProps[fProp].indexOf('func:') === -1)) {\r\n            errors.push(ReferenceError(`[0013] jsonx.__functionProps.${fProp} must reference a function (i.e. func:this.props.logoutUser())`));\r\n          }\r\n        });\r\n    }\r\n  }\r\n  if (jsonx.__windowComponentProps && (typeof jsonx.__windowComponentProps !=='object' || Array.isArray(jsonx.__windowComponentProps))) {\r\n    errors.push(TypeError('[0013] jsonx.__windowComponentProps  must be an object'));\r\n  }\r\n  if (jsonx.__windowComponents) {\r\n    if (typeof jsonx.__windowComponents !== 'object') {\r\n      errors.push(TypeError('[0014] jsonx.__windowComponents must be an object'));\r\n    }\r\n    Object.keys(jsonx.__windowComponents)\r\n      .forEach(cProp => {\r\n        if (typeof jsonx.__windowComponents[cProp]!=='string'||jsonx.__windowComponents[cProp].indexOf('func:') === -1) {\r\n          errors.push(ReferenceError(`[0015] jsonx.__windowComponents.${cProp} must reference a window element on window.__jsonx_custom_elements (i.e. func:window.__jsonx_custom_elements.bootstrapModal)`));\r\n        }\r\n      });\r\n  }\r\n  if (typeof jsonx.comparisonorprops !== 'undefined' && typeof jsonx.comparisonorprops !== 'boolean') {\r\n    errors.push(TypeError('[0016] jsonx.comparisonorprops  must be boolean'));\r\n  }\r\n  if (jsonx.comparisonprops) {\r\n    if(!Array.isArray(jsonx.comparisonprops)) {\r\n      errors.push(TypeError('[0017] jsonx.comparisonprops  must be an array or comparisons'));\r\n    } else {\r\n      jsonx.comparisonprops.forEach(c => {\r\n        if (typeof c !== 'object') {\r\n          errors.push(TypeError('[0018] jsonx.comparisonprops  must be an array or comparisons objects'));\r\n        } else if(typeof c.left==='undefined') {\r\n          errors.push(TypeError('[0019] jsonx.comparisonprops  must be have a left comparison value'));\r\n        }\r\n      });\r\n    }\r\n  }\r\n  if (typeof jsonx.passprops !== 'undefined' && typeof jsonx.passprops !== 'boolean') {\r\n    errors.push(TypeError('[0020] jsonx.passprops  must be boolean'));\r\n  }\r\n  const invalidKeys = Object.keys(jsonx).filter(key => validKeys.indexOf(key) === -1);\r\n  if (errors.length) {\r\n    if (returnAllErrors) return errors;\r\n    throw errors[ 0 ];\r\n  }\r\n  return invalidKeys.length\r\n    ? `Warning: Invalid Keys [${invalidKeys.join()}]`\r\n    : true;\r\n}\r\n\r\n/**\r\n * validates simple JSONX Syntax {[component]:{props,children}}\r\n * @param {Object} simpleJSONX - Any valid simple JSONX Syntax\r\n * @return {Boolean} returns true if simpleJSONX is valid\r\n */\r\nexport function validSimpleJSONXSyntax(simpleJSONX = {}) {\r\n  if (Object.keys(simpleJSONX).length !== 1 && !simpleJSONX.component) {\r\n    return false;\r\n  } else {\r\n    const componentName = Object.keys(simpleJSONX)[ 0 ];\r\n    return (Object.keys(simpleJSONX).length === 1  && !simpleJSONX[componentName].component && typeof simpleJSONX[componentName]==='object')\r\n      ? true\r\n      : false; \r\n  }\r\n}\r\n\r\n/**\r\n * Transforms SimpleJSONX to Valid JSONX JSON {[component]:{props,children}} => {component,props,children}\r\n * @param {Object} simpleJSONX JSON Object \r\n * @return {Object} - returns a valid JSONX JSON Object from a simple JSONX JSON Object\r\n */\r\nexport function simpleJSONXSyntax(simpleJSONX = {}) {\r\n  const component = Object.keys(simpleJSONX)[ 0 ];\r\n  try {\r\n    return Object.assign({},\r\n      {\r\n        component,\r\n      },\r\n      simpleJSONX[ component ], {\r\n        children: (simpleJSONX[ component ].children && Array.isArray(simpleJSONX[ component ].children))\r\n          ? simpleJSONX[ component ].children\r\n            .map(simpleJSONXSyntax)\r\n          : simpleJSONX[ component ].children,\r\n      });\r\n  } catch (e) {\r\n    throw SyntaxError('Invalid Simple JSONX Syntax', e);\r\n  }   \r\n}\r\n\r\n/**\r\n * Transforms Valid JSONX JSON to SimpleJSONX  {component,props,children} => {[component]:{props,children}}\r\n * @param {Object} jsonx Valid JSONX JSON object \r\n * @return {Object} - returns a simple JSONX JSON Object from a valid JSONX JSON Object \r\n */\r\nexport function getSimplifiedJSONX(jsonx = {}) {\r\n  try {\r\n    if (!jsonx.component) return jsonx; //already simple\r\n    const componentName = jsonx.component;\r\n    jsonx.children = (Array.isArray(jsonx.children))\r\n      ? jsonx.children\r\n        .filter(child => child)//remove empty children\r\n        .map(getSimplifiedJSONX) \r\n      : jsonx.children;\r\n    delete jsonx.component;\r\n    return {\r\n      [ componentName ]: jsonx,\r\n    };\r\n  } catch (e) {\r\n    throw e;\r\n  }\r\n}\r\n\r\n/**\r\n * Fetches JSON from remote path\r\n * @param {String} path - fetch path url\r\n * @param {Object} options - fetch options\r\n * @return {Object} - returns fetched JSON data\r\n */\r\nexport async function fetchJSON(path='', options={}) {\r\n  try {\r\n    const response = await fetch(path, options);\r\n    return await response.json();\r\n  } catch (e) {\r\n    throw e;\r\n  }\r\n}",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/jsonx/src/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "displayComponent",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~displayComponent",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/utils.js",
    "importStyle": "{displayComponent}",
    "description": "Used to evaluate whether or not to render a component",
    "examples": [
      "const sampleJSONX = {\ncomponent: 'div',\nprops: {\nid: 'generatedJSONX',\nclassName: 'jsonx',\nbigNum: 1430931039,\nsmallNum: 0.425,\nfalsey: false,\ntruthy: true,\n},\nchildren: 'some div',\n};\nconst testJSONX = Object.assign({}, sampleJSONX, {\ncomparisonprops: [{\nleft: ['truthy',],\noperation:'==',\nright:['falsey',],\n}],\n});\ndisplayComponent({ jsonx: testJSONX, props: testJSONX2.props, }) // => false"
    ],
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} returns true if all comparisons are true or if using or comparisons, at least one condition is true"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.jsonx",
        "description": "Valid JSONX JSON"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.props",
        "description": "Props to test comparison values against, usually Object.assign(jsonx.props,jsonx.asyncprops,jsonx.thisprops,jsonx.windowprops)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "returns true if all comparisons are true or if using or comparisons, at least one condition is true"
    }
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "getAdvancedBinding",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~getAdvancedBinding",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/utils.js",
    "importStyle": "{getAdvancedBinding}",
    "description": "Use to test if can bind components this context for react-redux-router ",
    "lineNumber": 127,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} true if browser is not IE or old android / chrome"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if browser is not IE or old android / chrome"
    }
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "traverse",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~traverse",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/utils.js",
    "importStyle": "{traverse}",
    "description": "take an object of array paths to traverse and resolve",
    "examples": [
      "const testObj = {\nuser: {\nname: 'jsonx',\ndescription: 'react withouth javascript',\n},\nstats: {\nlogins: 102,\ncomments: 3,\n},\nauthentication: 'OAuth2',\n};\nconst testVals = { auth: ['authentication', ], username: ['user', 'name', ], };\n\ntraverse(testVals, testObj) // =>{ auth:'OAuth2', username:'jsonx',  }"
    ],
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} resolved object with traversed properties"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": "an object to resolve array property paths"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "object to traverse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "resolved object with traversed properties"
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": ""
      }
    ]
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "validateJSONX",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~validateJSONX",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/utils.js",
    "importStyle": "{validateJSONX}",
    "description": "Validates JSONX JSON Syntax",
    "examples": [
      "validateJSONX({component:'p',children:'hello world'})=>true\nvalidateJSONX({children:'hello world'})=>throw SyntaxError('[0001] Missing React Component')"
    ],
    "lineNumber": 212,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean|Error[]} either returns true if JSONX is valid, or throws validation error or returns list of errors in array"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "jsonx",
        "description": "JSONX JSON to validate"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "returnAllErrors",
        "description": "flag to either throw error or to return all errors in an array of errors"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean",
        "Error[]"
      ],
      "spread": false,
      "description": "either returns true if JSONX is valid, or throws validation error or returns list of errors in array"
    },
    "throws": [
      {
        "types": [
          "SyntaxError",
          "TypeError",
          "ReferenceError"
        ],
        "description": ""
      }
    ]
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "validSimpleJSONXSyntax",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~validSimpleJSONXSyntax",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/utils.js",
    "importStyle": "{validSimpleJSONXSyntax}",
    "description": "validates simple JSONX Syntax {[component]:{props,children}}",
    "lineNumber": 364,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "simpleJSONX",
        "description": "Any valid simple JSONX Syntax"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "returns true if simpleJSONX is valid"
    }
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "simpleJSONXSyntax",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~simpleJSONXSyntax",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/utils.js",
    "importStyle": "{simpleJSONXSyntax}",
    "description": "Transforms SimpleJSONX to Valid JSONX JSON {[component]:{props,children}} => {component,props,children}",
    "lineNumber": 380,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "simpleJSONX",
        "description": "JSON Object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "returns a valid JSONX JSON Object from a simple JSONX JSON Object"
    }
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "getSimplifiedJSONX",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~getSimplifiedJSONX",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/utils.js",
    "importStyle": "{getSimplifiedJSONX}",
    "description": "Transforms Valid JSONX JSON to SimpleJSONX  {component,props,children} => {[component]:{props,children}}",
    "lineNumber": 403,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "jsonx",
        "description": "Valid JSONX JSON object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "returns a simple JSONX JSON Object from a valid JSONX JSON Object"
    }
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "fetchJSON",
    "memberof": "src/utils.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/utils.js~fetchJSON",
    "access": "public",
    "export": true,
    "importPath": "jsonx/src/utils.js",
    "importStyle": "{fetchJSON}",
    "description": "Fetches JSON from remote path",
    "lineNumber": 427,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "fetch path url"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "fetch options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "returns fetched JSON data"
    }
  },
  {
    "kind": "index",
    "content": "# React JSON Syntax (JSONX)\n\n[![Coverage Status](https://coveralls.io/repos/github/repetere/jsonx/badge.svg?branch=master)](https://coveralls.io/github/repetere/jsonx?branch=master) [![Build Status](https://travis-ci.org/repetere/jsonx.svg?branch=master)](https://travis-ci.org/repetere/jsonx)\n\n## Description\n\n**React JSON Syntax (JSONX)** takes a JSON object and can create (Suspense, Lazy, Functional and Class) React Components, output HTML and JSX and render React components without transpilers. **JSONX** lets you get up and running with React without extra configuration management of more complicated tool chains.\n\n\n## Installation\n\n```sh\n$ npm i jsonx\n```\n\n### [Full Documentation](https://repetere.github.io/jsonx/)\n\n### Examples ( [HTML/Browser Example](https://github.com/repetere/jsonx/blob/master/dist/example.html) ) \n\n```javascript\nimport { default as jsonx } from 'jsonx';\nconst exampleJSONX = {\n  component:'p',\n  props:{style:{color:'blue'}},\n  children:'hello world'\n};\n//Rendering React Components\njsonx.getReactElement(exampleJSONX);\n// => JSX Equivalent: <p style={{color:'blue'}}>hello world</p>\n\nconst exampleToHTMLandJSX = {\n  component: 'div',\n  props:{  className:'jsonx-generated', },\n  children:[\n    {  \n      component:'p',\n      props:{ style:{ color:'red', }, },\n      children:'hello world',\n    }\n  ]\n};\n//Generating HTML strings\njsonx.outputHTML({ jsonx: exampleToHTMLandJSX, });\n// => '<div class=\"jsonx-generated\"><p style=\"color:red;\">hello world</p></div>'\n//Generating JSX strings\njsonx.outputJSX({ jsonx: exampleToHTMLandJSX, });\n// => '<div class=\"jsonx-generated\"><p style={{color:red,}}>hello world</p></div>'\n\n//Rendering HTML Dom with React\njsonx.jsonxRender({ jsonx: { component: 'div', props:{className:'jsonx-generated',children:[{ component:'p',props:{style:{color:'red'}}, children:'hello world' }]}}, querySelector:'#myApp', });\n// <!DOCTYPE html>\n//  <body>\n//    <div id=\"myApp\">\n//      <div class=\"jsonx-generated\">\n//        <p style=\"color:red;\">hello world</p>\n//      </div>\n//    </div>\n// </body>\n```\n\n### JSONX JSON Spec\n\nJSONX JSON is valid JSON that more or less mimics JSX in JSON notation with a couple of special properties. The properties for JSONX JSON are the arguments passed to [React.createElement](https://reactjs.org/docs/react-api.html#createelement). The only required property is the component (which is passed as the `type` argument)\n\n```javascript\nReact.createElement(\n  type,\n  [props],\n  [...children]\n)\n```\n\nYou can pass React component libraries for additional components, or you own custom components (see Advanced, also see Full Spec).\n\n```javascript\n//sample JSONX\n{\n  component:'ul',\n  props:{\n    className:'list-class',\n  },\n  children:[\n    {\n      component:'li',\n      children:'first bullet'\n    },\n    {\n      component:'li',\n      children:'second bullet',\n    }\n  ]\n}\n\n```\n\n```JSX\n// Equivalent JSX\n<ul className=\"list-class\">\n  <li>first bullet</li>\n  <li>second bullet</li>\n</ul>\n```\n\n#### Validating JSONX JSON\n\n```javascript \nimport * as jsonx from 'jsonx';\n\n//use the built in JSONX Validator\nconst valid_jsonx_json = {\n  component:'p',\n  props:{\n    className:'title',\n  },\n  children:'hello world'\n};\nconst invalid_jsonx_json = {\n  props:{\n    className:'title',\n  },\n  children:'hello world'\n};\nconst multiple_invalid_jsonx_json = {\n  props:'must be obj',\n  children:'hello world'\n};\n\njsonx._jsonxUtils.validateJSONX(testJSONXJSON) // => true\njsonx._jsonxUtils.validateJSONX(invalid_jsonx_json) // => throws SyntaxError('[0001] Missing React Component')\njsonx._jsonxUtils.validateJSONX(multiple_invalid_jsonx_json, true) // =>\n// [ [Error: [0001] Missing React Component],[ Error: [0002]  props must be an Object / valid React props] ]\n\n/**\n * @param {Object} jsonx - JSONX JSON to validate \n * @param {Boolean} [returnAllErrors=false] - flag to either throw error or to return all errors in an array of errors\n * /\nfunction validateJSONX(jsonx = {}, returnAllErrors= false);\n```\n\n### Simple JSONX Syntax\n\nIf you want to save time, you can use the property name as the component and define properties for a cleaner simple syntax\n\n```javascript\n//shorthand simple jsonx\n{\n  ul: {\n    props:{\n      className:'list-class',\n    },\n    children:[\n      {\n        li: {\n          children:'first bullet',\n        },\n      },\n      {\n        li: {\n          children:'second bullet',\n        },\n      }\n    ]\n  }\n}\n```\n\n### JSONX Module\n\n```javascript\n\"jsonx\" : {\n  getReactElement: [Function: getReactElement], {aliases:[getRenderedJSON,getReactElementFromJSONX]} //Use React.createElement and JSONX JSON to create React elements\n  getReactElementFromJSON: [Function: getReactElementFromJSON], // Use compiledJSON object {type,props,children} to create React elements\n  jsonxRender: [Function: getRenderedJSON], //Use JSONX without any configuration to render JSONX JSON to HTML and insert JSONX into querySelector using ReactDOM.render\n  outputHTML: [Function: outputHTML], //Use ReactDOMServer.renderToString to render html from JSONX\n  outputJSX: [Function: outputJSX], //Generate valid JSX from JSONX\n  outputJSON: [Function: outputJSON], //Generate computed static values from JSONX into JSON\n  compile: [Function: compile], //Generate React Function Component from JSONX\n\n  jsonToJSX: [Function: jsonToJSX], //Converts JSON to JSX\n  __express: [Function: __express], //render express views with JSONX\n  __getReact: [Function: __getReact], //Expose reference to React\n  __getReactDOM: [Function: __getReactDOM], //Expose reference to ReactDOM\n  __getUseGlobalHook: [Function: __getUseGlobalHook], //Expose reference to useGlobalHook\n\n\n_jsonxChildren: {\n    getChildrenProperty: [Function: getChildrenProperty], // returns a valid jsonx.children property\n    getChildrenProps: [Function: getChildrenProps], // Used to pass properties down to child components if passprops is set to true\n    getJSONXChildren: [Function: getJSONXChildren], // returns React Child Elements via JSONX\n  },\n  _jsonxComponents: {\n    componentMap: {}, // object of all react components available for JSONX\n    getBoundedComponents: [Function: getBoundedComponents], // getBoundedComponents returns reactComponents with certain elements that have this bounded to select components in the boundedComponents list\n    getComponentFromLibrary: [Function: getComponentFromLibrary], // returns a react component from a component library (like material-ui, or semantic-ui)\n    getComponentFromMap: [Function: getComponentFromMap], // returns a react element from jsonx.component\n    getReactClassComponent: [Function: getReactClassComponent], // returns a react class component and support lifecycle functions, lazy and suspense components\n    getReactFunctionComponent: [Function: getReactFunctionComponent], // returns a react function component and support lifecycle functions, hooks, lazy and suspense components\n  },\n  _jsonxProps: {\n    getJSONXProps: [Function: getJSONXProps], // It uses traverse on a traverseObject to returns a resolved object on propName. So if you're making an ajax call and want to pass properties into a component, you can assign them using asyncprops and reference object properties by an array of property paths\n    getEvalProps: [Function: getEvalProps], //Used to evalute javascript and set those variables as props. getEvalProps evaluates __dangerouslyEvalProps and __dangerouslyBindEvalProps properties with eval, this is used when component properties are functions, __dangerouslyBindEvalProps is used when those functions require that this is bound to the function. For __dangerouslyBindEvalProps it must resolve an expression, so functions should be wrapped in (). I.e. (function f(x){ return this.minimum+x;})\n    getComponentProps: [Function: getComponentProps], // Resolves jsonx.__dangerouslyInsertComponents into an object that turns each value into a React components. This is typically used in a library like Recharts where you pass custom components for chart ticks or plot points.\n    getReactComponentProps: [Function: getReactComponentProps], // Resolves jsonx.__dangerouslyInsertReactComponents into an object that turns each value into a the React component from reactComponents, componentLibraries or ReactDOM.\n    getFunctionFromProps: [Function: getFunctionFromProps], // Takes a function string and returns a function on either this.props or window.\n    getFunctionProps: [Function: getFunctionProps], // Returns a resolved object from function strings that has functions pulled from jsonx.__functionProps\n    getWindowComponents: [Function: getWindowComponents], // Returns a resolved object that has React Components pulled from window.__jsonx_custom_elements\n    getComputedProps: [Function: getComputedProps], // Returns computed properties for React Components and any property that's prefixed with __ is a computedProperty\n  },\n  _jsonxUtils: {\n    validateJSONX: [Function: validateJSONX], //Validates JSONX JSON Syntax\n    displayComponent: [Function displayComponent], // Used to evaluate whether or not to render a component\n    traverse: [Function traverse], //take an object of array paths to traverse and resolve\n    getAdvancedBinding: [Function: getAdvancedBinding], // Use to test if can bind components this context for react-redux-router\n  },\n}\n```\n\n### Full JSONX Spec\n```javascript\njsonx = {\n  //standard properties\n  component:String, // Any React DOM element, or custom component div,p, Boomer.Hero, MaterialUI.Button, myCustomComponent (can also use the property 'type' instead of 'component')\n  props:Object, // Standard React component properties\n  children:Array|String, // Any String or Array of valid JSONX JSON objects\n\n\n  //dynamic properties\n  resourceprops:Object, // An object from async resources to merge onto jsonx.props once fully resolved\n  asyncprops:Object, // An object from async resources to merge onto jsonx.props once fully resolved (alias for resourceprops)\n  thisprops:Object, // An object to merge onto jsonx.props from properties already bound to this.props\n  windowprops:Object, // An object to merge onto jsonx.props from the window object\n\n\n  //evaluated properties\n  __dangerouslyEvalProps:Object, // An object of evaluated JavaScript strings, used as inline functions onto jsonx.props, if the prop is a function it will be called bound to 'this' and the returned value will be assigned\n  __dangerouslyBindEvalProps:Object, // An object of evaluated JavaScript functions that are bound to this, used as inline functions onto jsonx.props\n  //computed properties\n  __functionProps:Object, // An object of parsed function strings(func:this.props.onClick, func:window.localStorage.getItem),merged onto jsonx.props\n  __dangerouslyInsertJSONXComponents:Object, // An object that turns each JSONX JSON value into a React components. This is typically used in a library like Recharts where you pass custom components for chart ticks or plot points.\n  __dangerouslyInsertComponents:Object, // An object that turns each JSONX JSON value into a React components. This is typically used in a library like Recharts where you pass custom components for chart ticks or plot points.\n  __dangerouslyInsertReactComponents:Object, // An object that returns the react element from either ReactDOM, reactComponents or componentLibraries.\n  __dangerouslyInsertFunctionComponents:Object, // An object that returns the react function component.\n  __dangerouslyInsertClassComponents:Object, // An object that returns the react class component.\n  __spreadComponent:Object, // A JSONX element that is mapped on any array prop called  __spread\n  __windowComponents:Object, // An object of components merged onto jsonx.props from window.__jsonx_custom_elements\n  __windowComponentProps:Object,\n\n\n  //display properties\n  comparisonprops:[Object], // An array of Objects used to conditionally display the current jsonx.component\n  //flag properties\n  passprops:Boolean, // A flag to pass parent properties to children JSONX objects (except for the style property)\n  comparisonorprops:Boolean, // A flag to use an or condition instead of and conditions between comparisions\n}\n```\n\n#### Advanced - Using Custom Components & UI Libraries\n\nIf you plan on using an entire UI library, then bind the library to this before using JSONX.\n\n```javascript\nimport * as jsonx from 'jsonx';\nimport { * as Semantic } from 'semantic-ui-react';\n\nconst getReactElement = jsonx.getReactElement.bind({\n  componentLibraries:{\n    Semantic,\n  }\n});\n\nconst myJSONX = {\n  component:'Semantic.Container',\n  children:[\n    {\n      component:'Semantic.Header',\n      props:{\n        as:'h1',\n      },\n      children:'Hello World!',\n    },\n    {\n      component:'Semantic.Button',\n      props:{\n        content:'Discover docs',\n        href:'http://react.semantic-ui.com',\n        icon:'github',\n        labelPosition:'left',\n      }\n    }\n  ]\n}\n\nconst myReactElements = getReactElement(myJSONX);\n```\n\n\n#### Advanced - Using New & Custom Components\n\nIf you're only adding single components or using your own components you can add them to JSONX's component my individually.\n\n```javascript\nimport React from 'react';\nimport * as jsonx from 'jsonx';\nimport { Header } from 'semantic-ui-react';\n\nclass MyButton extends React.Component {\n  render() {\n    return <a {...this.props}>{this.props.children}</a>\n  }\n}\n\n\nconst getReactElement = jsonx.getReactElement.bind({\n  reactComponents:{\n    Header,\n    MyButton,\n  }\n});\n\nconst myJSONX = {\n  component:'div',\n  children:[\n    {\n      component:'Header',\n      props:{\n        as:'h1',\n      },\n      children:'Hello World!',\n    },\n    {\n      component:'MyButton',\n      props:{\n        title:'Discover docs',\n        href:'http://react.semantic-ui.com',\n      },\n      __dangerouslyEvalProps:{\n        onClick:'()=>alert(\"click works\")'\n      },\n      children:'click me',\n    }\n  ]\n}\n\nconst myReactElements = getReactElement(myJSONX);\n```\n\n#### Advanced - Special properties\n\n##### resourceprops (asyncprops) / thisprops / windowprops\n\nThe only different between resourceprops (asyncprops), thisprops and windowprops are the source of the transverse Object.\n\nResourceprops transverse an object that is manually passed (usually as a result of an asynchronous fetch all - hence the name asyncpropc).\n\nThisprops transverse anything bound to `this.props`, a good example would be if you're storing and passing a user object on `this.props.user`, pulling the username would be where you would use thisprops.\n\nWindowprops transverse anything on the global window object, like the current page location `window.location.href`.\n\nDynamic props are transversed by passing an array to the property value you want, so for a window's location (`window.location.href`) the property value is accessed by an array to the href `['location','href']` where you omit the transverse object from the array path.\n\n```javascript\nconst traverseObject = {\n  user: {\n    name: 'jsonx',\n    description: 'react without javascript',\n  },\n  stats: {\n    logins: 102,\n    comments: 3,\n  },\n  authentication: 'OAuth2',\n};\nconst testJSONX = {\n  component: 'div',\n  props: {\n    id: 'generatedJSONX',\n    className:'jsonx',\n  },\n  resourceprops:{\n    auth: [ 'authentication', ],\n    username: [ 'user', 'name', ],\n  },\n  children: [\n    {\n      component: 'p',\n      props: {\n        style: {\n          color: 'red',\n          fontWeight:'bold',\n        },\n      },\n      asyncprops:{\n        title: ['user','description']\n      },\n      children:'hello world',\n    },\n  ],\n};\nconst JSONXP = getJSONXProps({ jsonx: testJSONX, traverseObject, });\n// => {\n//   auth: 'OAuth2',\n//   username: 'jsonx'\n// }\n\n//finally resolves:\nconst testJSONX = {\n  component: 'div',\n  props: {\n    id: 'generatedJSONX',\n    className:'jsonx',\n    auth: 'OAuth2',\n    username: 'jsonx',\n  },\n  children: [\n    {\n      component: 'p',\n      props: {\n        style: {\n          color: 'red',\n          fontWeight:'bold',\n        },\n        title:'react without javascript',\n      },\n      children:'hello world',\n    },\n  ],\n};\n```\n\n##### __dangerouslyEvalProps / __dangerouslyBindEvalProps\n\nThe only difference between `__dangerouslyEvalProps` and `__dangerouslyBindEvalProps` is each  `__dangerouslyBindEvalProps` has to be a function, because it's returned as the bound instance of the function with `this`.\n\n```javascript\n const testVals = {\n    auth: 'true',\n    username: '()=>(user={})=>user.name',\n  };\n  const testJSONX = Object.assign({}, sampleJSONX, {\n    __dangerouslyEvalProps: testVals, __dangerouslyBindEvalProps: {\n      email: '(function getUser(user={}){ return this.testBound(); })',\n    },\n  });\n  const JSONXP = getEvalProps.call({ testBound: () => 'bounded', }, { jsonx: testJSONX, });\n  const evalutedComputedFunc = JSONXP.username({ name: 'bob', });\n  const evalutedComputedBoundFunc = JSONXP.email({ email:'test@email.domain', });\n  // expect(JSONXP.auth).to.be.true;\n  // expect(evalutedComputedFunc).to.eql('bob');\n  // expect(evalutedComputedBoundFunc).to.eql('bounded');\n```\n\n##### __functionProps\n\nFunction props merge onto jsonx.props after evaluating each functon string.\n\n```javascript\nconst thisProp = {\n  debug: true,\n  window: {\n    print: () => 'printed',\n    localStorage: {\n      getItem:()=>'gotItem',\n    },\n  },\n  props: {\n    onClick:()=>'clicked',\n    reduxRouter: {\n      push:()=>'pushed',\n      pop:()=>'poped',\n    },\n  },\n};\nconst jsonxTest = {\n  component:'div',\n  props: {\n    name:'test',\n  },\n  __functionProps: {\n    onclick:'func:this.props.onClick',\n    printPage: 'func:window.print',\n    nav:'func:this.props.reduxRouter.push',\n  },\n};\nconst jsonxObj = getFunctionProps.call(thisProp, {\n  jsonx: jsonxTest,\n});\nexpect(jsonxObj).is.an('object');\nexpect(Object.keys(jsonxObj)).to.eql(Object.keys(jsonxTest.__functionProps));\nexpect(jsonxObj.onclick()).to.eq('clicked');\nexpect(jsonxObj.printPage()).to.eql('printed');\nexpect(jsonxObj.nav()).to.eql('pushed');\n```\n\n##### comparisionprops\n\nComparison props are used to contionally show components if they're truthy. They compare an array of left and right side values, if they are all true, the component is rendered. If `comparisonorprops:true` then only one condition needs to be true in order to render the component\n\n```javascript\n//and conditions\njsonx={\n  comparisonprops: [{\n    left: ['bigNum',],\n    operation:'lte',\n    right:['smallNum',],\n  },{\n    left: ['smallNum',],\n    operation:'<=',\n    right:['bigNum',],\n  }],\n}\n//or conditions\njsonx={\n  comparisonorprops:true,\n  comparisonprops: [{\n    left: ['truthy',],\n    operation:'eq',\n    right:['falsey',],\n  },{\n    left: ['smallNum',],\n    operation:'eq',\n    right:['smallNum',],\n  }],\n}\n\n// All comparison operations\nswitch (opscompares.operation) {\n  case 'eq':\n  case '==':\n    return opscompares.left == opscompares.right;\n  case 'dneq':\n  case '!=':\n  case '!':\n    return opscompares.left !== opscompares.right;\n  case 'dnseq':\n  case '!==':\n    return opscompares.left !== opscompares.right;\n  case 'seq':\n  case '===':\n    return opscompares.left === opscompares.right;\n  case 'lt':\n  case '<':\n    return opscompares.left < opscompares.right;\n  case 'lte':\n  case '<=':\n    return opscompares.left <= opscompares.right;\n  case 'gt':\n  case '>':\n    return opscompares.left > opscompares.right;\n  case 'gte':\n  case '>=':\n    return opscompares.left >= opscompares.right;\n  case 'dne':\n  case 'undefined':\n  case 'null':\n    return opscompares.left === undefined || opscompares.left === null; \n  case '!null':\n  case '!undefined':\n  case 'exists':\n  default://'exists'\n    return opscompares.left !== undefined && opscompares.left !== null;\n}\n```\n\n### Advanced - Custom React Components & Lifecycle Functions\n\nYou can also create react components with lifecycle functions using `getReactClassComponent`.\n\nThe only required function is a render function, the body of the function has to be valid jsonx.\n\n```javascript\nconst MyCustomComponent = jsonx._jsonxComponents.getReactClassComponent({\n    //\n    // Initialization function\n    //\n    getInitialState:{\n      body:'return { status:\"not-loaded\", name:\"jsonx test\", customNumber:1, }',\n      arguments:[],\n    },\n    getDefaultProps:{\n      body:'return { someProp:1, someOtherProp:2, status:\"original status\" }',\n      arguments:[],\n    },\n    componentDidMount:{\n      body:`console.log('mounted', 'this.props',this.props, 'this.state',this.state)`,\n      arguments:[],\n    },\n    componentWillUnmount:{\n      body:`console.log('unmounted',this.props)`,\n      arguments:[],\n    },\n    //\n    // State change functions\n    //\n    shouldComponentUpdate:{\n      body:'console.log(\"should update component\",{nextProps,nextState}); return true;',\n      arguments:['nextProps', 'nextState']\n    },\n    componentWillUpdate:{\n      body:'console.log(\"will update component\",{nextProps,nextState}); return true;',\n      arguments:['nextProps', 'nextState']\n    },\n    componentDidUpdate:{\n      body:'console.log(\"did update component\",{prevProps,prevState}); return true;',\n      arguments:['prevProps', 'prevState']\n    },\n    //\n    // Prop change functions\n    //\n    componentWillReceiveProps: {\n      body:'console.log(\"will recieve props\",{nextProps}); return true;',\n      arguments:['nextProps']\n    },\n    //\n    // RENDER IS THE ONLY ***REQUIRED*** FUNCTION\n    //\n    render:{\n      body:{\n        component:'p',\n        props:{\n          status:'from inline prop'\n        },\n        passprops:true,\n        children:[\n          {\n            component:'span',\n            children: 'My Custom React Component Status: ',\n          },\n          {\n            component:'span',\n            thisprops:{\n              children:['status']\n            }\n          }\n        ]\n      },\n    }\n  });\nconst sampleJSONX = {\n  component:'MyCustomComponent',\n  props:{\n    status:'Amazing',\n  }\n};\nconst boundConfig = {\n  debug:true, \n  reactComponents:{\n    MyCustomComponent,\n  }\n};\njsonx.jsonxRender.call(boundConfig, {\n  jsonx: sampleJSONX, \n  querySelector:'#root', });\n```\n\nConsole output after mounting\n```javascript\n[Log] mounted (4)\n\"this.props\"\n{status: \"Amazing\", children: {}, someProp: 1, someOtherProp: 2}\n\"this.state\"\n{status: \"not-loaded\", name: \"jsonx test\", customNumber: 1}\n```\n\nCheckout the `dist/example.html` for example usage.\n![https://raw.githubusercontent.com/repetere/jsonx/master/docs/dist-example-html.png](https://raw.githubusercontent.com/repetere/jsonx/master/docs/dist-example-html.png)\n\n### Development\n\nNote *Make sure you have grunt installed*\n\n```sh\n$ npm i -g grunt-cli jsdoc-to-markdown\n```\n\nFor generating documentation\n\n```sh\n$ grunt doc\n$ jsdoc2md src/**/*.js  > docs/api.md\n```\n\n### Notes\n\nCheck out [https://repetere.github.io/jsonx/](https://repetere.github.io/jsonx/) for the full jsonx Documentation\n\n### Testing\n\n```sh\n$ npm i\n$ grunt test\n```\n\n### Contributing\n\nFork, write tests and create a pull request!\n\n### Example Browser Usage\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>JSONX TEST</title>\n    <script type=\"text/javascript\" src=\"jsonx.umd.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"text/javascript\">\n      const sampleJSONX = {\n        component: 'div',\n        props: {\n          id: 'generatedJSONX',\n          className:'jsonx',\n        },\n        children: [\n          {\n            component: 'p',\n            props: {\n              style: {\n                color: 'red',\n                fontWeight:'bold',\n              },\n            },\n            __dangerouslyEvalProps:{\n              onClick:'()=>alert(\"click works\")'\n            },\n            children:'hello world',\n          },\n        ],\n      };\n      const boundConfig = {\n        debug:true, \n      };\n      jsonx.jsonxRender.call(boundConfig,{ jsonx: sampleJSONX, querySelector:'#root', });\n    </script>\n  </body>\n</html>\n ```\n\n<div style=\"text-align:center;\">\n\n<img src=\"https://raw.githubusercontent.com/repetere/jsonx/master/docs/jsonx-logo.png\" style=\"max-width:160px;\">\n\n</div>\n\n\nLicense\n\n----\n\nMIT",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/jsonx/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"jsonx\",\n  \"version\": \"0.9.85\",\n  \"description\": \"React JSON Syntax - Construct React elements, JSX and HTML with JSON without transpilers. JSONX supports React Function and Class Components, React Lazy and Suspense Components, and full support for React Hooks\",\n  \"main\": \"dist/jsonx.cjs.js\",\n  \"module\": \"src/main.js\",\n  \"esm\": \"dist/jsonx.esm.js\",\n  \"browser\": \"dist/jsonx.umd.js\",\n  \"web\": \"dist/jsonx.web.js\",\n  \"modules.root\": \"lib\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"rollup -c -w\",\n    \"test_simple\": \"node test/test.js\",\n    \"test\": \"nyc  mocha \\\"test/**/*.{js,mjs}\\\" --include-all-sources -r esm --mode=auto \",\n    \"doc\": \"esdoc\",\n    \"build\": \"rollup -c && esdoc\",\n    \"benchmark\": \"node -r esm  benchmark/main_bmrk.js\",\n    \"coverage\": \"nyc report --reporter=text-lcov | coveralls\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/repetere/jsonx.git\"\n  },\n  \"keywords\": [\n    \"jsx\",\n    \"React\",\n    \"server-side-react\",\n    \"json jsx\",\n    \"jamstack\",\n    \"json\",\n    \"jsonx\",\n    \"reactive\",\n    \"react-json\",\n    \"react-json-schema\",\n    \"json-react\",\n    \"jsx-json\"\n  ],\n  \"author\": {\n    \"name\": \"Yaw Joseph Etse\",\n    \"email\": \"yaw@repetere.io\"\n  },\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/repetere/jsonx/issues\"\n  },\n  \"homepage\": \"https://github.com/repetere/jsonx#readme\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.4.3\",\n    \"@babel/plugin-external-helpers\": \"^7.2.0\",\n    \"@babel/plugin-proposal-class-properties\": \"^7.4.0\",\n    \"@babel/plugin-proposal-export-default-from\": \"^7.2.0\",\n    \"@babel/plugin-proposal-export-namespace-from\": \"^7.2.0\",\n    \"@babel/plugin-syntax-dynamic-import\": \"^7.2.0\",\n    \"@babel/plugin-transform-runtime\": \"^7.4.3\",\n    \"@babel/preset-env\": \"^7.4.3\",\n    \"@babel/preset-react\": \"^7.0.0\",\n    \"@babel/runtime\": \"^7.4.3\",\n    \"@react-spectre/components\": \"^1.0.0-16\",\n    \"@react-spectre/elements\": \"^1.0.0-16\",\n    \"@react-spectre/layout\": \"^1.0.0-16\",\n    \"@repetere/esdoc-inject-gtm-plugin\": \"^0.1.0\",\n    \"babel-plugin-replace-imports\": \"^1.0.2\",\n    \"benchmark\": \"^2.1.4\",\n    \"bootstrap\": \"^4.3.1\",\n    \"bulma\": \"^0.7.4\",\n    \"chai\": \"^4.1.2\",\n    \"chai-as-promised\": \"^7.1.1\",\n    \"coveralls\": \"^3.0.3\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-inject-script-plugin\": \"^1.0.0\",\n    \"esdoc-publish-markdown-plugin\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"esm\": \"3.2.22\",\n    \"install\": \"^0.12.2\",\n    \"jsdom\": \"^14.0.0\",\n    \"jsdom-global\": \"^3.0.2\",\n    \"lodash-es\": \"^4.17.11\",\n    \"materialize-css\": \"^1.0.0\",\n    \"microtime\": \"^3.0.0\",\n    \"mini.css\": \"^3.0.1\",\n    \"mocha\": \"^6.1.3\",\n    \"mocha-sinon\": \"^2.1.0\",\n    \"npm\": \"^6.9.0\",\n    \"nyc\": \"^14.0.0\",\n    \"react-bootstrap\": \"^1.0.0-beta.6\",\n    \"react-materialize\": \"^3.0.3\",\n    \"react-md\": \"^1.9.3\",\n    \"react-spectre\": \"0.0.1-alpha.0\",\n    \"rollup\": \"^1.10.0\",\n    \"rollup-plugin-alias\": \"^1.5.1\",\n    \"rollup-plugin-async\": \"^1.2.0\",\n    \"rollup-plugin-babel\": \"^4.3.2\",\n    \"rollup-plugin-commonjs\": \"^9.3.4\",\n    \"rollup-plugin-node-builtins\": \"^2.1.2\",\n    \"rollup-plugin-node-globals\": \"^1.2.1\",\n    \"rollup-plugin-node-resolve\": \"^4.2.3\",\n    \"rollup-plugin-replace\": \"^2.1.1\",\n    \"rollup-plugin-terser\": \"^4.0.4\",\n    \"rollup-plugin-terser-js\": \"^1.0.2\",\n    \"routes\": \"^2.1.0\",\n    \"semantic-ui-react\": \"^0.86.0\",\n    \"sinon\": \"^7.3.2\",\n    \"sinon-chai\": \"^3.2.0\",\n    \"spectre.css\": \"^0.5.8\"\n  },\n  \"dependencies\": {\n    \"create-react-class\": \"^15.6.3\",\n    \"memory-cache\": \"^0.2.0\",\n    \"react\": \"^16.10.0\",\n    \"react-dom\": \"^16.10.0\",\n    \"react-dom-factories\": \"^1.0.2\",\n    \"ua-parser-js\": \"^0.7.20\",\n    \"use-global-hook\": \"^0.1.11\"\n  }\n}\n",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/jsonx/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "content": "# React JSON Syntax (JSONX)\n\n[![Coverage Status](https://coveralls.io/repos/github/repetere/jsonx/badge.svg?branch=master)](https://coveralls.io/github/repetere/jsonx?branch=master) [![Build Status](https://travis-ci.org/repetere/jsonx.svg?branch=master)](https://travis-ci.org/repetere/jsonx)\n\n## Description\n\n**React JSON Syntax (JSONX)** takes a JSON object and can create (Suspense, Lazy, Functional and Class) React Components, output HTML and JSX and render React components without transpilers. **JSONX** lets you get up and running with React without extra configuration management of more complicated tool chains.\n\n\n## Installation\n\n```sh\n$ npm i jsonx\n```\n\n### [Full Documentation](https://repetere.github.io/jsonx/)\n\n### Examples ( [HTML/Browser Example](https://github.com/repetere/jsonx/blob/master/dist/example.html) ) \n\n```javascript\nimport { default as jsonx } from 'jsonx';\nconst exampleJSONX = {\n  component:'p',\n  props:{style:{color:'blue'}},\n  children:'hello world'\n};\n//Rendering React Components\njsonx.getReactElement(exampleJSONX);\n// => JSX Equivalent: <p style={{color:'blue'}}>hello world</p>\n\nconst exampleToHTMLandJSX = {\n  component: 'div',\n  props:{  className:'jsonx-generated', },\n  children:[\n    {  \n      component:'p',\n      props:{ style:{ color:'red', }, },\n      children:'hello world',\n    }\n  ]\n};\n//Generating HTML strings\njsonx.outputHTML({ jsonx: exampleToHTMLandJSX, });\n// => '<div class=\"jsonx-generated\"><p style=\"color:red;\">hello world</p></div>'\n//Generating JSX strings\njsonx.outputJSX({ jsonx: exampleToHTMLandJSX, });\n// => '<div class=\"jsonx-generated\"><p style={{color:red,}}>hello world</p></div>'\n\n//Rendering HTML Dom with React\njsonx.jsonxRender({ jsonx: { component: 'div', props:{className:'jsonx-generated',children:[{ component:'p',props:{style:{color:'red'}}, children:'hello world' }]}}, querySelector:'#myApp', });\n// <!DOCTYPE html>\n//  <body>\n//    <div id=\"myApp\">\n//      <div class=\"jsonx-generated\">\n//        <p style=\"color:red;\">hello world</p>\n//      </div>\n//    </div>\n// </body>\n```\n\n### JSONX JSON Spec\n\nJSONX JSON is valid JSON that more or less mimics JSX in JSON notation with a couple of special properties. The properties for JSONX JSON are the arguments passed to [React.createElement](https://reactjs.org/docs/react-api.html#createelement). The only required property is the component (which is passed as the `type` argument)\n\n```javascript\nReact.createElement(\n  type,\n  [props],\n  [...children]\n)\n```\n\nYou can pass React component libraries for additional components, or you own custom components (see Advanced, also see Full Spec).\n\n```javascript\n//sample JSONX\n{\n  component:'ul',\n  props:{\n    className:'list-class',\n  },\n  children:[\n    {\n      component:'li',\n      children:'first bullet'\n    },\n    {\n      component:'li',\n      children:'second bullet',\n    }\n  ]\n}\n\n```\n\n```JSX\n// Equivalent JSX\n<ul className=\"list-class\">\n  <li>first bullet</li>\n  <li>second bullet</li>\n</ul>\n```\n\n#### Validating JSONX JSON\n\n```javascript \nimport * as jsonx from 'jsonx';\n\n//use the built in JSONX Validator\nconst valid_jsonx_json = {\n  component:'p',\n  props:{\n    className:'title',\n  },\n  children:'hello world'\n};\nconst invalid_jsonx_json = {\n  props:{\n    className:'title',\n  },\n  children:'hello world'\n};\nconst multiple_invalid_jsonx_json = {\n  props:'must be obj',\n  children:'hello world'\n};\n\njsonx._jsonxUtils.validateJSONX(testJSONXJSON) // => true\njsonx._jsonxUtils.validateJSONX(invalid_jsonx_json) // => throws SyntaxError('[0001] Missing React Component')\njsonx._jsonxUtils.validateJSONX(multiple_invalid_jsonx_json, true) // =>\n// [ [Error: [0001] Missing React Component],[ Error: [0002]  props must be an Object / valid React props] ]\n\n/**\n * @param {Object} jsonx - JSONX JSON to validate \n * @param {Boolean} [returnAllErrors=false] - flag to either throw error or to return all errors in an array of errors\n * /\nfunction validateJSONX(jsonx = {}, returnAllErrors= false);\n```\n\n### Simple JSONX Syntax\n\nIf you want to save time, you can use the property name as the component and define properties for a cleaner simple syntax\n\n```javascript\n//shorthand simple jsonx\n{\n  ul: {\n    props:{\n      className:'list-class',\n    },\n    children:[\n      {\n        li: {\n          children:'first bullet',\n        },\n      },\n      {\n        li: {\n          children:'second bullet',\n        },\n      }\n    ]\n  }\n}\n```\n\n### JSONX Module\n\n```javascript\n\"jsonx\" : {\n  getReactElement: [Function: getReactElement], {aliases:[getRenderedJSON,getReactElementFromJSONX]} //Use React.createElement and JSONX JSON to create React elements\n  getReactElementFromJSON: [Function: getReactElementFromJSON], // Use compiledJSON object {type,props,children} to create React elements\n  jsonxRender: [Function: getRenderedJSON], //Use JSONX without any configuration to render JSONX JSON to HTML and insert JSONX into querySelector using ReactDOM.render\n  outputHTML: [Function: outputHTML], //Use ReactDOMServer.renderToString to render html from JSONX\n  outputJSX: [Function: outputJSX], //Generate valid JSX from JSONX\n  outputJSON: [Function: outputJSON], //Generate computed static values from JSONX into JSON\n  compile: [Function: compile], //Generate React Function Component from JSONX\n\n  jsonToJSX: [Function: jsonToJSX], //Converts JSON to JSX\n  __express: [Function: __express], //render express views with JSONX\n  __getReact: [Function: __getReact], //Expose reference to React\n  __getReactDOM: [Function: __getReactDOM], //Expose reference to ReactDOM\n  __getUseGlobalHook: [Function: __getUseGlobalHook], //Expose reference to useGlobalHook\n\n\n_jsonxChildren: {\n    getChildrenProperty: [Function: getChildrenProperty], // returns a valid jsonx.children property\n    getChildrenProps: [Function: getChildrenProps], // Used to pass properties down to child components if passprops is set to true\n    getJSONXChildren: [Function: getJSONXChildren], // returns React Child Elements via JSONX\n  },\n  _jsonxComponents: {\n    componentMap: {}, // object of all react components available for JSONX\n    getBoundedComponents: [Function: getBoundedComponents], // getBoundedComponents returns reactComponents with certain elements that have this bounded to select components in the boundedComponents list\n    getComponentFromLibrary: [Function: getComponentFromLibrary], // returns a react component from a component library (like material-ui, or semantic-ui)\n    getComponentFromMap: [Function: getComponentFromMap], // returns a react element from jsonx.component\n    getReactClassComponent: [Function: getReactClassComponent], // returns a react class component and support lifecycle functions, lazy and suspense components\n    getReactFunctionComponent: [Function: getReactFunctionComponent], // returns a react function component and support lifecycle functions, hooks, lazy and suspense components\n  },\n  _jsonxProps: {\n    getJSONXProps: [Function: getJSONXProps], // It uses traverse on a traverseObject to returns a resolved object on propName. So if you're making an ajax call and want to pass properties into a component, you can assign them using asyncprops and reference object properties by an array of property paths\n    getEvalProps: [Function: getEvalProps], //Used to evalute javascript and set those variables as props. getEvalProps evaluates __dangerouslyEvalProps and __dangerouslyBindEvalProps properties with eval, this is used when component properties are functions, __dangerouslyBindEvalProps is used when those functions require that this is bound to the function. For __dangerouslyBindEvalProps it must resolve an expression, so functions should be wrapped in (). I.e. (function f(x){ return this.minimum+x;})\n    getComponentProps: [Function: getComponentProps], // Resolves jsonx.__dangerouslyInsertComponents into an object that turns each value into a React components. This is typically used in a library like Recharts where you pass custom components for chart ticks or plot points.\n    getReactComponentProps: [Function: getReactComponentProps], // Resolves jsonx.__dangerouslyInsertReactComponents into an object that turns each value into a the React component from reactComponents, componentLibraries or ReactDOM.\n    getFunctionFromProps: [Function: getFunctionFromProps], // Takes a function string and returns a function on either this.props or window.\n    getFunctionProps: [Function: getFunctionProps], // Returns a resolved object from function strings that has functions pulled from jsonx.__functionProps\n    getWindowComponents: [Function: getWindowComponents], // Returns a resolved object that has React Components pulled from window.__jsonx_custom_elements\n    getComputedProps: [Function: getComputedProps], // Returns computed properties for React Components and any property that's prefixed with __ is a computedProperty\n  },\n  _jsonxUtils: {\n    validateJSONX: [Function: validateJSONX], //Validates JSONX JSON Syntax\n    displayComponent: [Function displayComponent], // Used to evaluate whether or not to render a component\n    traverse: [Function traverse], //take an object of array paths to traverse and resolve\n    getAdvancedBinding: [Function: getAdvancedBinding], // Use to test if can bind components this context for react-redux-router\n  },\n}\n```\n\n### Full JSONX Spec\n```javascript\njsonx = {\n  //standard properties\n  component:String, // Any React DOM element, or custom component div,p, Boomer.Hero, MaterialUI.Button, myCustomComponent (can also use the property 'type' instead of 'component')\n  props:Object, // Standard React component properties\n  children:Array|String, // Any String or Array of valid JSONX JSON objects\n\n\n  //dynamic properties\n  resourceprops:Object, // An object from async resources to merge onto jsonx.props once fully resolved\n  asyncprops:Object, // An object from async resources to merge onto jsonx.props once fully resolved (alias for resourceprops)\n  thisprops:Object, // An object to merge onto jsonx.props from properties already bound to this.props\n  windowprops:Object, // An object to merge onto jsonx.props from the window object\n\n\n  //evaluated properties\n  __dangerouslyEvalProps:Object, // An object of evaluated JavaScript strings, used as inline functions onto jsonx.props, if the prop is a function it will be called bound to 'this' and the returned value will be assigned\n  __dangerouslyBindEvalProps:Object, // An object of evaluated JavaScript functions that are bound to this, used as inline functions onto jsonx.props\n  //computed properties\n  __functionProps:Object, // An object of parsed function strings(func:this.props.onClick, func:window.localStorage.getItem),merged onto jsonx.props\n  __dangerouslyInsertJSONXComponents:Object, // An object that turns each JSONX JSON value into a React components. This is typically used in a library like Recharts where you pass custom components for chart ticks or plot points.\n  __dangerouslyInsertComponents:Object, // An object that turns each JSONX JSON value into a React components. This is typically used in a library like Recharts where you pass custom components for chart ticks or plot points.\n  __dangerouslyInsertReactComponents:Object, // An object that returns the react element from either ReactDOM, reactComponents or componentLibraries.\n  __dangerouslyInsertFunctionComponents:Object, // An object that returns the react function component.\n  __dangerouslyInsertClassComponents:Object, // An object that returns the react class component.\n  __spreadComponent:Object, // A JSONX element that is mapped on any array prop called  __spread\n  __windowComponents:Object, // An object of components merged onto jsonx.props from window.__jsonx_custom_elements\n  __windowComponentProps:Object,\n\n\n  //display properties\n  comparisonprops:[Object], // An array of Objects used to conditionally display the current jsonx.component\n  //flag properties\n  passprops:Boolean, // A flag to pass parent properties to children JSONX objects (except for the style property)\n  comparisonorprops:Boolean, // A flag to use an or condition instead of and conditions between comparisions\n}\n```\n\n#### Advanced - Using Custom Components & UI Libraries\n\nIf you plan on using an entire UI library, then bind the library to this before using JSONX.\n\n```javascript\nimport * as jsonx from 'jsonx';\nimport { * as Semantic } from 'semantic-ui-react';\n\nconst getReactElement = jsonx.getReactElement.bind({\n  componentLibraries:{\n    Semantic,\n  }\n});\n\nconst myJSONX = {\n  component:'Semantic.Container',\n  children:[\n    {\n      component:'Semantic.Header',\n      props:{\n        as:'h1',\n      },\n      children:'Hello World!',\n    },\n    {\n      component:'Semantic.Button',\n      props:{\n        content:'Discover docs',\n        href:'http://react.semantic-ui.com',\n        icon:'github',\n        labelPosition:'left',\n      }\n    }\n  ]\n}\n\nconst myReactElements = getReactElement(myJSONX);\n```\n\n\n#### Advanced - Using New & Custom Components\n\nIf you're only adding single components or using your own components you can add them to JSONX's component my individually.\n\n```javascript\nimport React from 'react';\nimport * as jsonx from 'jsonx';\nimport { Header } from 'semantic-ui-react';\n\nclass MyButton extends React.Component {\n  render() {\n    return <a {...this.props}>{this.props.children}</a>\n  }\n}\n\n\nconst getReactElement = jsonx.getReactElement.bind({\n  reactComponents:{\n    Header,\n    MyButton,\n  }\n});\n\nconst myJSONX = {\n  component:'div',\n  children:[\n    {\n      component:'Header',\n      props:{\n        as:'h1',\n      },\n      children:'Hello World!',\n    },\n    {\n      component:'MyButton',\n      props:{\n        title:'Discover docs',\n        href:'http://react.semantic-ui.com',\n      },\n      __dangerouslyEvalProps:{\n        onClick:'()=>alert(\"click works\")'\n      },\n      children:'click me',\n    }\n  ]\n}\n\nconst myReactElements = getReactElement(myJSONX);\n```\n\n#### Advanced - Special properties\n\n##### resourceprops (asyncprops) / thisprops / windowprops\n\nThe only different between resourceprops (asyncprops), thisprops and windowprops are the source of the transverse Object.\n\nResourceprops transverse an object that is manually passed (usually as a result of an asynchronous fetch all - hence the name asyncpropc).\n\nThisprops transverse anything bound to `this.props`, a good example would be if you're storing and passing a user object on `this.props.user`, pulling the username would be where you would use thisprops.\n\nWindowprops transverse anything on the global window object, like the current page location `window.location.href`.\n\nDynamic props are transversed by passing an array to the property value you want, so for a window's location (`window.location.href`) the property value is accessed by an array to the href `['location','href']` where you omit the transverse object from the array path.\n\n```javascript\nconst traverseObject = {\n  user: {\n    name: 'jsonx',\n    description: 'react without javascript',\n  },\n  stats: {\n    logins: 102,\n    comments: 3,\n  },\n  authentication: 'OAuth2',\n};\nconst testJSONX = {\n  component: 'div',\n  props: {\n    id: 'generatedJSONX',\n    className:'jsonx',\n  },\n  resourceprops:{\n    auth: [ 'authentication', ],\n    username: [ 'user', 'name', ],\n  },\n  children: [\n    {\n      component: 'p',\n      props: {\n        style: {\n          color: 'red',\n          fontWeight:'bold',\n        },\n      },\n      asyncprops:{\n        title: ['user','description']\n      },\n      children:'hello world',\n    },\n  ],\n};\nconst JSONXP = getJSONXProps({ jsonx: testJSONX, traverseObject, });\n// => {\n//   auth: 'OAuth2',\n//   username: 'jsonx'\n// }\n\n//finally resolves:\nconst testJSONX = {\n  component: 'div',\n  props: {\n    id: 'generatedJSONX',\n    className:'jsonx',\n    auth: 'OAuth2',\n    username: 'jsonx',\n  },\n  children: [\n    {\n      component: 'p',\n      props: {\n        style: {\n          color: 'red',\n          fontWeight:'bold',\n        },\n        title:'react without javascript',\n      },\n      children:'hello world',\n    },\n  ],\n};\n```\n\n##### __dangerouslyEvalProps / __dangerouslyBindEvalProps\n\nThe only difference between `__dangerouslyEvalProps` and `__dangerouslyBindEvalProps` is each  `__dangerouslyBindEvalProps` has to be a function, because it's returned as the bound instance of the function with `this`.\n\n```javascript\n const testVals = {\n    auth: 'true',\n    username: '()=>(user={})=>user.name',\n  };\n  const testJSONX = Object.assign({}, sampleJSONX, {\n    __dangerouslyEvalProps: testVals, __dangerouslyBindEvalProps: {\n      email: '(function getUser(user={}){ return this.testBound(); })',\n    },\n  });\n  const JSONXP = getEvalProps.call({ testBound: () => 'bounded', }, { jsonx: testJSONX, });\n  const evalutedComputedFunc = JSONXP.username({ name: 'bob', });\n  const evalutedComputedBoundFunc = JSONXP.email({ email:'test@email.domain', });\n  // expect(JSONXP.auth).to.be.true;\n  // expect(evalutedComputedFunc).to.eql('bob');\n  // expect(evalutedComputedBoundFunc).to.eql('bounded');\n```\n\n##### __functionProps\n\nFunction props merge onto jsonx.props after evaluating each functon string.\n\n```javascript\nconst thisProp = {\n  debug: true,\n  window: {\n    print: () => 'printed',\n    localStorage: {\n      getItem:()=>'gotItem',\n    },\n  },\n  props: {\n    onClick:()=>'clicked',\n    reduxRouter: {\n      push:()=>'pushed',\n      pop:()=>'poped',\n    },\n  },\n};\nconst jsonxTest = {\n  component:'div',\n  props: {\n    name:'test',\n  },\n  __functionProps: {\n    onclick:'func:this.props.onClick',\n    printPage: 'func:window.print',\n    nav:'func:this.props.reduxRouter.push',\n  },\n};\nconst jsonxObj = getFunctionProps.call(thisProp, {\n  jsonx: jsonxTest,\n});\nexpect(jsonxObj).is.an('object');\nexpect(Object.keys(jsonxObj)).to.eql(Object.keys(jsonxTest.__functionProps));\nexpect(jsonxObj.onclick()).to.eq('clicked');\nexpect(jsonxObj.printPage()).to.eql('printed');\nexpect(jsonxObj.nav()).to.eql('pushed');\n```\n\n##### comparisionprops\n\nComparison props are used to contionally show components if they're truthy. They compare an array of left and right side values, if they are all true, the component is rendered. If `comparisonorprops:true` then only one condition needs to be true in order to render the component\n\n```javascript\n//and conditions\njsonx={\n  comparisonprops: [{\n    left: ['bigNum',],\n    operation:'lte',\n    right:['smallNum',],\n  },{\n    left: ['smallNum',],\n    operation:'<=',\n    right:['bigNum',],\n  }],\n}\n//or conditions\njsonx={\n  comparisonorprops:true,\n  comparisonprops: [{\n    left: ['truthy',],\n    operation:'eq',\n    right:['falsey',],\n  },{\n    left: ['smallNum',],\n    operation:'eq',\n    right:['smallNum',],\n  }],\n}\n\n// All comparison operations\nswitch (opscompares.operation) {\n  case 'eq':\n  case '==':\n    return opscompares.left == opscompares.right;\n  case 'dneq':\n  case '!=':\n  case '!':\n    return opscompares.left !== opscompares.right;\n  case 'dnseq':\n  case '!==':\n    return opscompares.left !== opscompares.right;\n  case 'seq':\n  case '===':\n    return opscompares.left === opscompares.right;\n  case 'lt':\n  case '<':\n    return opscompares.left < opscompares.right;\n  case 'lte':\n  case '<=':\n    return opscompares.left <= opscompares.right;\n  case 'gt':\n  case '>':\n    return opscompares.left > opscompares.right;\n  case 'gte':\n  case '>=':\n    return opscompares.left >= opscompares.right;\n  case 'dne':\n  case 'undefined':\n  case 'null':\n    return opscompares.left === undefined || opscompares.left === null; \n  case '!null':\n  case '!undefined':\n  case 'exists':\n  default://'exists'\n    return opscompares.left !== undefined && opscompares.left !== null;\n}\n```\n\n### Advanced - Custom React Components & Lifecycle Functions\n\nYou can also create react components with lifecycle functions using `getReactClassComponent`.\n\nThe only required function is a render function, the body of the function has to be valid jsonx.\n\n```javascript\nconst MyCustomComponent = jsonx._jsonxComponents.getReactClassComponent({\n    //\n    // Initialization function\n    //\n    getInitialState:{\n      body:'return { status:\"not-loaded\", name:\"jsonx test\", customNumber:1, }',\n      arguments:[],\n    },\n    getDefaultProps:{\n      body:'return { someProp:1, someOtherProp:2, status:\"original status\" }',\n      arguments:[],\n    },\n    componentDidMount:{\n      body:`console.log('mounted', 'this.props',this.props, 'this.state',this.state)`,\n      arguments:[],\n    },\n    componentWillUnmount:{\n      body:`console.log('unmounted',this.props)`,\n      arguments:[],\n    },\n    //\n    // State change functions\n    //\n    shouldComponentUpdate:{\n      body:'console.log(\"should update component\",{nextProps,nextState}); return true;',\n      arguments:['nextProps', 'nextState']\n    },\n    componentWillUpdate:{\n      body:'console.log(\"will update component\",{nextProps,nextState}); return true;',\n      arguments:['nextProps', 'nextState']\n    },\n    componentDidUpdate:{\n      body:'console.log(\"did update component\",{prevProps,prevState}); return true;',\n      arguments:['prevProps', 'prevState']\n    },\n    //\n    // Prop change functions\n    //\n    componentWillReceiveProps: {\n      body:'console.log(\"will recieve props\",{nextProps}); return true;',\n      arguments:['nextProps']\n    },\n    //\n    // RENDER IS THE ONLY ***REQUIRED*** FUNCTION\n    //\n    render:{\n      body:{\n        component:'p',\n        props:{\n          status:'from inline prop'\n        },\n        passprops:true,\n        children:[\n          {\n            component:'span',\n            children: 'My Custom React Component Status: ',\n          },\n          {\n            component:'span',\n            thisprops:{\n              children:['status']\n            }\n          }\n        ]\n      },\n    }\n  });\nconst sampleJSONX = {\n  component:'MyCustomComponent',\n  props:{\n    status:'Amazing',\n  }\n};\nconst boundConfig = {\n  debug:true, \n  reactComponents:{\n    MyCustomComponent,\n  }\n};\njsonx.jsonxRender.call(boundConfig, {\n  jsonx: sampleJSONX, \n  querySelector:'#root', });\n```\n\nConsole output after mounting\n```javascript\n[Log] mounted (4)\n\"this.props\"\n{status: \"Amazing\", children: {}, someProp: 1, someOtherProp: 2}\n\"this.state\"\n{status: \"not-loaded\", name: \"jsonx test\", customNumber: 1}\n```\n\nCheckout the `dist/example.html` for example usage.\n![https://raw.githubusercontent.com/repetere/jsonx/master/docs/dist-example-html.png](https://raw.githubusercontent.com/repetere/jsonx/master/docs/dist-example-html.png)\n\n### Development\n\nNote *Make sure you have grunt installed*\n\n```sh\n$ npm i -g grunt-cli jsdoc-to-markdown\n```\n\nFor generating documentation\n\n```sh\n$ grunt doc\n$ jsdoc2md src/**/*.js  > docs/api.md\n```\n\n### Notes\n\nCheck out [https://repetere.github.io/jsonx/](https://repetere.github.io/jsonx/) for the full jsonx Documentation\n\n### Testing\n\n```sh\n$ npm i\n$ grunt test\n```\n\n### Contributing\n\nFork, write tests and create a pull request!\n\n### Example Browser Usage\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>JSONX TEST</title>\n    <script type=\"text/javascript\" src=\"jsonx.umd.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"text/javascript\">\n      const sampleJSONX = {\n        component: 'div',\n        props: {\n          id: 'generatedJSONX',\n          className:'jsonx',\n        },\n        children: [\n          {\n            component: 'p',\n            props: {\n              style: {\n                color: 'red',\n                fontWeight:'bold',\n              },\n            },\n            __dangerouslyEvalProps:{\n              onClick:'()=>alert(\"click works\")'\n            },\n            children:'hello world',\n          },\n        ],\n      };\n      const boundConfig = {\n        debug:true, \n      };\n      jsonx.jsonxRender.call(boundConfig,{ jsonx: sampleJSONX, querySelector:'#root', });\n    </script>\n  </body>\n</html>\n ```\n\n<div style=\"text-align:center;\">\n\n<img src=\"https://raw.githubusercontent.com/repetere/jsonx/master/docs/jsonx-logo.png\" style=\"max-width:160px;\">\n\n</div>\n\n\nLicense\n\n----\n\nMIT",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/jsonx/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/jsonx/manual/asset",
    "name": "./manual/asset",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/jsonx/manual/overview.md",
    "name": "./manual/overview.md",
    "content": "# Overview\r\n\r\nAll of the model building classes are structured similarly to ml.js models. Each model has three shared components regardless if it's a regression, classification or time series model.\r\n\r\nThis library was built to quickly implement [Tensorflow](https://js.tensorflow.org) and [Keras](https://js.tensorflow.org/tutorials/import-keras.html) models in JavaScript.\r\n\r\n## Configuration\r\n\r\nAll of the model configuration is managed during creating an instance of the class. All models have `fit` and `compile` properties that are assigned to the instance `settings` property.\r\n\r\nYou can also pass the Tensorflow reference to be used, as a configuration property if you want to use the compiled C++ or GPU via CUDA versions on the `tf` property;\r\n\r\n* `this.settings.compile` is passed to `tensorflow.model.compile` and contains the configuration for optimizers ([`read more`](https://js.tensorflow.org/api/latest/#tf.Model.compile)).\r\n* `this.settings.fit` is passed to `tensorflow.model.fit` and contains the configuration for model fitting ([`read more`](https://js.tensorflow.org/api/latest/#tf.Sequential.fit))\r\n\r\n### Model constructor example\r\n\r\n```javascript\r\nimport { MultipleLinearRegression, } from 'tensorscript';\r\nimport tf from '@tensorflow/tfjs-node-gpu';\r\n\r\nconst MLR = new MultipleLinearRegression({\r\n  fit:{\r\n    epochs:500,\r\n    batchSize:5,\r\n  },\r\n  compile:{\r\n    loss: 'meanSquaredError',\r\n    optimizer: 'adam',\r\n  },\r\n},{\r\n  tf,\r\n});\r\n```\r\n\r\nEach constructor takes two parameters `settings` and `properties`. As in the example above, *settings* are used to configure tensorflow objects and properties are used to configure tensorscript (like which version of tensorflow to use).\r\n\r\n## Training\r\n\r\nAll tensorflow models train asynchronously, therefore all tensorscript model train functions are all asynchronous. Always pass dependent and independent variables as matrix inputs.\r\n\r\nTime series models can be trained with only one input matrix.\r\n\r\n### Training example\r\n\r\n```javascript\r\n\r\nimport { MultipleLinearRegression, } from 'tensorscript';\r\n\r\nasync function main(){\r\n  const MLR = new MultipleLinearRegression();\r\n  const x = [ [1], [2] ];\r\n  const y = [ [3], [4] ];\r\n  await MLR.train(x,y);\r\n}\r\n```\r\n\r\n## Predicting\r\n\r\nAll prediction inputs must be the same shape as training inputs. TensorScript provides an asynchronous predict method that converts tensor values to javascript objects. If you want the tensor from tensorflow, use the calculate method instead.\r\n\r\n### Predicting example\r\n\r\n```javascript\r\nimport { MultipleLinearRegression, } from 'tensorscript';\r\n\r\nasync function main(){\r\n  const MLR = new MultipleLinearRegression();\r\n  const x = [ [1], [2] ];\r\n  const y = [ [3], [4] ];\r\n  await MLR.train(x,y);\r\n\r\n  await MLR.predict([[3]]) //=> [[5]];\r\n  const tensorPrediction = await MLR.calculate([[3]]) //=> [[5]];\r\n  tensorPrediction.data()\r\n    .then(tensors=> /*Typed Array*/)\r\n}\r\n```\r\n\r\n## Examples\r\n\r\nFor more examples on how to do feature scaling and more, check out the *[Examples folder](https://github.com/repetere/tensorscript/tree/master/manual/examples)*.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/jsonx/manual/usage.md",
    "name": "./manual/usage.md",
    "content": "# Frequently Asked Questions\r\n\r\n## Scaling\r\n\r\n- **How do I scale and descale my inputs?**\r\n  - The library is only for model create, data engineering and modeling is typically handled elsewhere\r\n  - Check out the regression examples (hint: use [ModelScript](https://repetere.github.io/modelscript/)).\r\n- **How do I cross validate, test/train split, K-fold, etc?**\r\n  - (See above) The library is only for model create, data engineering and modeling is typically handled elsewhere\r\n  - Check out the code examples (hint: use [ModelScript](https://repetere.github.io/modelscript/)).",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/jsonx/manual/faq.md",
    "name": "./manual/faq.md",
    "content": "# Frequently Asked Questions\r\n\r\n## Scaling\r\n\r\n- **How do I scale and descale my inputs?**\r\n  - The library is only for model create, data engineering and modeling is typically handled elsewhere\r\n  - Check out the regression examples (hint: use [ModelScript](https://repetere.github.io/modelscript/)).\r\n- **How do I cross validate, test/train split, K-fold, etc?**\r\n  - (See above) The library is only for model create, data engineering and modeling is typically handled elsewhere\r\n  - Check out the code examples (hint: use [ModelScript](https://repetere.github.io/modelscript/)).",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/jsonx/CHANGELOG.md",
    "name": "./CHANGELOG.md",
    "content": "# Changelog\n\n## 3.0.0 (2019-04-20)\n\n- **Chore**\n  - Update Documentation\n\n## 2.6.0 (2019-04-19)\n\n- **Feat**\n  - Added new compilation options jsonx.compile, jsonx.outputJSON, jsonx.outputHTML, jsonx.outputJSX\n- **Fix**\n  - pass functions in jsonx object values\n- **Chore**\n  - added new benchmark tests\n\n## 2.2.0 (2019-04-01)\n\n- **Feat**\n  - Added React.lazy support\n  - Added React.Suspense support\n- **Fix**\n  - Named class support via options\n  - passing state and props to class render component via options\n- **Chore**\n  \n## 2.1.0 (2019-04-01)\n\n- **Feat**\n- **Fix**\n  - Improved inline function support\n  - Improved debugging support\n  - Automated parameter detection\n- **Chore**\n  - Update Documentation\n\n## 2.0.0 (2019-03-29)\n\n- **Feat**\n  - Added support for Function Components\n  - Added support for Hooks\n- **Fix**\n  - Supports refs on __functionProps\n- **Chore**\n  - Update Documentation\n",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 115,
    "kind": "testFile",
    "name": "test/unit/children_spec.js",
    "content": "import * as _jsonxChildren from '../../src/children';\r\nimport mochaJSDOM from 'jsdom-global';\r\nimport chai from 'chai';\r\nimport sinon from 'sinon';\r\nimport React from 'react';\r\nimport ReactTestUtils from 'react-dom/test-utils'; // ES6\r\nimport ReactDOM from 'react-dom';\r\nimport ReactDOMElements from 'react-dom-factories';\r\nimport { expect, } from 'chai';\r\nimport { JSDOM, } from 'jsdom';\r\nchai.use(require('sinon-chai'));\r\nimport 'mocha-sinon';\r\n\r\nconst sampleJSONX = {\r\n  component: 'div',\r\n  props: {\r\n    id: 'generatedJSONX',\r\n    className:'jsonx',\r\n  },\r\n  children: [\r\n    {\r\n      component: 'p',\r\n      props: {\r\n        style: {\r\n          color: 'red',\r\n          fontWeight:'bold',\r\n        },\r\n      },\r\n      children:'hello world',\r\n    },\r\n    {\r\n      component: 'div',\r\n      children: [\r\n        {\r\n          component: 'ul',\r\n          children: [\r\n            {\r\n              component: 'li',\r\n              children:'hey',\r\n            },\r\n            {\r\n              component: 'li',\r\n              children:'in',\r\n            },\r\n            {\r\n              component: 'li',\r\n              children:'list',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nconst passableJSONX = {\r\n  component: 'div',\r\n  props: {\r\n    title: 'this is passed',\r\n    style: {\r\n      color:'red',\r\n    },\r\n  },\r\n  passprops: true,\r\n  children: [\r\n    {\r\n      component: 'span',\r\n      children:'should have props',\r\n    },\r\n    {\r\n      component: 'p',\r\n      props: {\r\n        style: {\r\n          color:'blue',\r\n        },\r\n      },\r\n      children:'but no style',\r\n    },\r\n  ],\r\n};\r\n\r\ndescribe('jsonx', function () { \r\n  describe('getChildrenProperty', () => {\r\n    const getChildrenProperty = _jsonxChildren.getChildrenProperty;\r\n    it('should return the children of an JSONX Object', () => {\r\n      const JSONXChildren = getChildrenProperty({ jsonx: sampleJSONX, });\r\n      const JSONXChildrenPTag = getChildrenProperty({ jsonx: sampleJSONX.children[ 0 ], });\r\n      expect(JSONXChildren).to.be.an('array');\r\n      expect(JSONXChildren.length).to.eql(sampleJSONX.children.length);\r\n      expect(JSONXChildrenPTag).to.be.a('string');\r\n      expect(JSONXChildrenPTag).to.eql(sampleJSONX.children[ 0 ].children);\r\n      expect(getChildrenProperty({\r\n        jsonx: {\r\n          props: { _children: {}, },\r\n          children:'hello',\r\n        },\r\n      })).to.eql('hello');\r\n      expect(getChildrenProperty({\r\n        jsonx: {\r\n        },\r\n      })).to.eql(null);\r\n      expect(getChildrenProperty({ props: { children: [1, 2, 3,], }, })).to.be.an('array');\r\n      expect(getChildrenProperty({ jsonx:{ props: { children: 'hello', }, },  })).to.eql('hello');\r\n    });\r\n    it('should get the children from jsonx.props._children property', () => {\r\n      const testJSONX = {\r\n        component: 'div',\r\n        props: {\r\n          _children:'some text',\r\n        },\r\n      };\r\n      const testJSONX2 = {\r\n        component: 'div',\r\n        props: {\r\n          _children: [\r\n            {\r\n              component: 'p',\r\n              children:'nested p tag',\r\n            },\r\n            {\r\n              component: 'p',\r\n              children:'nested p tag',\r\n            },\r\n          ],\r\n        },\r\n      };\r\n      const testJSONX3 = {\r\n        component: 'div',\r\n        props: {\r\n          _children: 'some text',\r\n          children:'ignore this prop for children',\r\n        },\r\n        children:[\r\n          {\r\n            component: 'p',\r\n            children:'should ignore nested p tag',\r\n          },\r\n          {\r\n            component: 'p',\r\n            children:'should ignore nested p tag',\r\n          },\r\n        ],\r\n      };\r\n      const JSONXChildren = getChildrenProperty({ jsonx: testJSONX, });\r\n      const JSONXChildren2 = getChildrenProperty({ jsonx: testJSONX2, });\r\n      const JSONXChildren3 = getChildrenProperty({ jsonx: testJSONX3, });\r\n      expect(JSONXChildren).to.be.a('string');\r\n      expect(JSONXChildren).to.eql(testJSONX.props._children);\r\n      expect(JSONXChildren2).to.be.an('array');\r\n      expect(JSONXChildren2.length).to.eql(testJSONX2.props._children.length);\r\n      expect(JSONXChildren3).to.be.a('string');\r\n      expect(JSONXChildren3).to.eql(testJSONX3.props._children);\r\n    });\r\n    it('should get the children from jsonx.props.children property', () => {\r\n      const testJSONX = {\r\n        component: 'div',\r\n        props: {\r\n          children:'some text',\r\n        },\r\n      };\r\n      const testJSONX2 = {\r\n        component: 'div',\r\n        props: {\r\n          children: [\r\n            {\r\n              component: 'p',\r\n              children:'nested p tag',\r\n            },\r\n            {\r\n              component: 'p',\r\n              children:'nested p tag',\r\n            },\r\n          ],\r\n        },\r\n      };\r\n      const testJSONX3 = {\r\n        component: 'div',\r\n        props: {\r\n          children:'ignore this prop for children',\r\n        },\r\n        children:[\r\n          {\r\n            component: 'p',\r\n            children:'should ignore nested p tag',\r\n          },\r\n          {\r\n            component: 'p',\r\n            children:'should ignore nested p tag',\r\n          },\r\n        ],\r\n      };\r\n      const testJSONX4 = {\r\n        component: 'div',\r\n        props: {\r\n          children:()=>'not valid, should be null',\r\n        },\r\n      };\r\n      const JSONXChildren = getChildrenProperty({ jsonx: testJSONX, });\r\n      const JSONXChildren2 = getChildrenProperty({ jsonx: testJSONX2, });\r\n      const JSONXChildren3 = getChildrenProperty({ jsonx: testJSONX3, });\r\n      const JSONXChildren4 = getChildrenProperty({ jsonx: testJSONX4, });\r\n      expect(JSONXChildren).to.be.a('string');\r\n      expect(JSONXChildren).to.eql(testJSONX.props.children);\r\n      expect(JSONXChildren2).to.be.an('array');\r\n      expect(JSONXChildren2.length).to.eql(testJSONX2.props.children.length);\r\n      expect(JSONXChildren3).to.be.a('array');\r\n      expect(JSONXChildren3).to.eql(testJSONX3.children);\r\n      expect(JSONXChildren4).to.be.a('function');\r\n    });\r\n  });\r\n  describe('getChildrenProps', () => {\r\n    const getChildrenProps = _jsonxChildren.getChildrenProps;\r\n    const getChildrenProperty = _jsonxChildren.getChildrenProperty;\r\n    it('should return child JSONX if not passing props', () => {\r\n      const renderIndex = 1;\r\n      const childjsonx = getChildrenProperty({ jsonx: sampleJSONX, })[0];\r\n      const childProps = getChildrenProps({ jsonx: sampleJSONX, childjsonx, renderIndex, });\r\n      expect(childProps).to.eq(childjsonx);\r\n    });\r\n    it('should pass props except for styles', () => {\r\n      const renderIndex = 1;\r\n      const childjsonx_span = getChildrenProperty({ jsonx: passableJSONX, })[0];\r\n      const childjsonx_p = getChildrenProperty({ jsonx: passableJSONX, })[1];\r\n      const childProps_span = getChildrenProps({ jsonx: passableJSONX, childjsonx:childjsonx_span, renderIndex, });\r\n      const childProps_p = getChildrenProps({ jsonx: passableJSONX, childjsonx:childjsonx_p, renderIndex, });\r\n      expect(childProps_span.props.title).to.eq(passableJSONX.props.title);\r\n      expect(childProps_p.props.title).to.eq(passableJSONX.props.title);\r\n      expect(childProps_p.props.style.color).to.eq(passableJSONX.children[ 1 ].props.style.color);\r\n      expect(childProps_p.props.key).to.not.eq(renderIndex);\r\n      expect(childProps_span.props.key).to.not.eq(renderIndex);\r\n    });\r\n  });\r\n  describe('getJSONXChildren', () => {\r\n    const getJSONXChildren = _jsonxChildren.getJSONXChildren;\r\n    it('should return JSONX Child Objects', () => {\r\n      const renderIndex = 1;\r\n      const JSONXChildren = getJSONXChildren.call({}, {\r\n        jsonx: passableJSONX,\r\n        renderIndex,\r\n      });\r\n      JSONXChildren.forEach(ReactiveJSON => {\r\n        expect(ReactiveJSON).to.be.an('object');\r\n        expect(ReactiveJSON).to.haveOwnProperty('$$typeof');\r\n        expect(ReactiveJSON).to.haveOwnProperty('type');\r\n        expect(ReactiveJSON).to.haveOwnProperty('key');\r\n        expect(ReactiveJSON).to.haveOwnProperty('ref');\r\n        expect(ReactiveJSON).to.haveOwnProperty('props');\r\n      });\r\n    });\r\n    it('should return null on error', () => {\r\n      expect(getJSONXChildren({ logError: () => { }, })).to.eql(null);\r\n\r\n    });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/jsonx/test/unit/children_spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/unit/children_spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/children_spec.js~describe0",
    "access": null,
    "description": "jsonx",
    "lineNumber": 82
  },
  {
    "__docId__": 117,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "test/unit/children_spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/children_spec.js~describe0.describe1",
    "access": null,
    "description": "getChildrenProperty",
    "lineNumber": 83
  },
  {
    "__docId__": 118,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/unit/children_spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/children_spec.js~describe0.describe1.it2",
    "access": null,
    "description": "should return the children of an JSONX Object",
    "lineNumber": 85
  },
  {
    "__docId__": 119,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "test/unit/children_spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/children_spec.js~describe0.describe1.it3",
    "access": null,
    "description": "should get the children from jsonx.props._children property",
    "lineNumber": 105
  },
  {
    "__docId__": 120,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/unit/children_spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/children_spec.js~describe0.describe1.it4",
    "access": null,
    "description": "should get the children from jsonx.props.children property",
    "lineNumber": 154
  },
  {
    "__docId__": 121,
    "kind": "test",
    "name": "describe5",
    "testId": 5,
    "memberof": "test/unit/children_spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/children_spec.js~describe0.describe5",
    "access": null,
    "description": "getChildrenProps",
    "lineNumber": 211
  },
  {
    "__docId__": 122,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "test/unit/children_spec.js~describe0.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/children_spec.js~describe0.describe5.it6",
    "access": null,
    "description": "should return child JSONX if not passing props",
    "lineNumber": 214
  },
  {
    "__docId__": 123,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "test/unit/children_spec.js~describe0.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/children_spec.js~describe0.describe5.it7",
    "access": null,
    "description": "should pass props except for styles",
    "lineNumber": 220
  },
  {
    "__docId__": 124,
    "kind": "test",
    "name": "describe8",
    "testId": 8,
    "memberof": "test/unit/children_spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/children_spec.js~describe0.describe8",
    "access": null,
    "description": "getJSONXChildren",
    "lineNumber": 233
  },
  {
    "__docId__": 125,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "test/unit/children_spec.js~describe0.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/children_spec.js~describe0.describe8.it9",
    "access": null,
    "description": "should return JSONX Child Objects",
    "lineNumber": 235
  },
  {
    "__docId__": 126,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/unit/children_spec.js~describe0.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/children_spec.js~describe0.describe8.it10",
    "access": null,
    "description": "should return null on error",
    "lineNumber": 250
  },
  {
    "__docId__": 127,
    "kind": "testFile",
    "name": "test/unit/components_spec.js",
    "content": "import * as jsonx from '../../src/main';\r\nimport * as _jsonxComponents from '../../src/components';\r\nimport mochaJSDOM from 'jsdom-global';\r\nimport chai from 'chai';\r\nimport sinon from 'sinon';\r\nimport React from 'react';\r\nimport ReactTestUtils from 'react-dom/test-utils'; // ES6\r\nimport ReactDOM from 'react-dom';\r\nimport ReactDOMElements from 'react-dom-factories';\r\nimport { expect, } from 'chai';\r\nimport { JSDOM, } from 'jsdom';\r\nchai.use(require('sinon-chai'));\r\nimport 'mocha-sinon';\r\n\r\nconst sampleJSONX = {\r\n  component: 'div',\r\n  props: {\r\n    id: 'generatedJSONX',\r\n    className:'jsonx',\r\n  },\r\n  children: 'some div',\r\n};\r\n\r\nconst sampleCustomElementJSONX = {\r\n  component: 'div',\r\n  props: {\r\n    id: 'customJSONX',\r\n    className:'jsonx',\r\n  },\r\n  thisprops: {\r\n    title: ['extraname', ],\r\n  },\r\n  children: [\r\n    {\r\n      component: 'p',\r\n      children:'some text',\r\n    },\r\n    {\r\n      component: 'Welcome',\r\n      props: {\r\n        style: {\r\n          color: 'red',\r\n          fontWeight:'bold',\r\n        },\r\n        name:'fromCustom',\r\n      },\r\n      thisprops: {\r\n        title: ['elementProperties', 'title', ],\r\n      },\r\n      children:'hello customElement2',\r\n    },\r\n    {\r\n      component: 'WelcomeBindSpy',\r\n      props: {\r\n        style: {\r\n          color: 'red',\r\n          fontWeight:'bold',\r\n        },\r\n        name:'fromCustom',\r\n      },\r\n      thisprops: {\r\n        title: ['elementProperties', 'title', ],\r\n      },\r\n      children:'hello customElement2',\r\n    },\r\n    {\r\n      component: 'WelcomeNonBind',\r\n      props: {\r\n        style: {\r\n          color: 'red',\r\n          fontWeight:'bold',\r\n        },\r\n        name:'fromCustom',\r\n      },\r\n      thisprops: {\r\n        title: ['elementProperties', 'title', ],\r\n      },\r\n      children:'hello customElement2',\r\n    },\r\n  ],\r\n};\r\n\r\nclass Welcome extends React.Component {\r\n  render() {\r\n    return React.createElement('h1', { name: 'Welcome', }, `Hello, ${this.props.name} ${this.props.title||'NA'}`);\r\n  }\r\n}\r\n\r\nclass WelcomeBindSpy extends React.Component {\r\n  render() {\r\n    return React.createElement('h1', { name: 'Welcome', }, `Hello, ${this.props.name} ${this.props.title||'NA'}`);\r\n  }\r\n}\r\n\r\nclass WelcomeNonBind extends React.Component {\r\n  render() {\r\n    return React.createElement('h1', { name: 'Welcome', }, `Hello, ${this.props.name} ${this.props.title||'NA'}`);\r\n  }\r\n}\r\n\r\ndescribe('jsonx components', function () { \r\n  describe('advancedBinding', () => {\r\n    it('should use advancedBinding based on user agent', () => {\r\n      expect(_jsonxComponents.advancedBinding).to.be.false;\r\n    });\r\n  });\r\n  describe('componentMap', () => {\r\n    it('should export an object of components', () => {\r\n      expect(_jsonxComponents.componentMap).to.be.a('object');\r\n    });\r\n    // it('should export an object of components', () => {\r\n    //   global.window = {\r\n    //     __jsonx_custom_elements: {\r\n    //       cusEl: {},\r\n    //     },\r\n    //   };\r\n    //   const comps = _jsonxComponents.componentMap;\r\n    //   console.log({ comps });\r\n    //   expect(_jsonxComponents.componentMap.cusEl).to.eql(global.window.__jsonx_custom_elements.cusEl);\r\n    // });\r\n  });\r\n  describe('getBoundedComponents', () => {\r\n    it('should bind this to reactComponents', () => {\r\n      const bindSpy = sinon.spy();\r\n      WelcomeBindSpy.bind = bindSpy;\r\n      const reactComponents = {\r\n        Welcome,\r\n        WelcomeNonBind,\r\n        WelcomeBindSpy,\r\n      };\r\n      const boundedComponents = ['Welcome', 'WelcomeBindSpy', ];\r\n      const customComponents = _jsonxComponents.getBoundedComponents({ reactComponents, boundedComponents, advancedBinding:true, });\r\n      const customThis = {\r\n        props: {\r\n          name:'customElementTest',\r\n          extraname: 'customElementTestName',\r\n          elementProperties: {\r\n            title: 'AddedWithThis',\r\n          },\r\n        },\r\n        boundedComponents,\r\n        reactComponents,\r\n        // debug: false,\r\n        // logError:()=>null,\r\n      };\r\n      const JSONXPropCheck = jsonx.getRenderedJSON.call(customThis, sampleCustomElementJSONX);\r\n\r\n      expect(bindSpy.called).to.be.true;\r\n      expect(JSONXPropCheck.props.title).to.eql(customThis.props.extraname);\r\n      expect(customComponents.length).to.eql(reactComponents.length);\r\n    });\r\n  });\r\n  describe('getComponentFromMap', () => {\r\n    const reactBootstrap = {\r\n      Welcome,\r\n      WelcomeNonBind,\r\n    };\r\n    const componentLibraries = {\r\n      reactBootstrap,\r\n    };\r\n    it('should return a function if jsonx.component is not a string', () => {\r\n      expect(_jsonxComponents.getComponentFromMap({\r\n        jsonx: {\r\n          component:Welcome,\r\n        }, })).to.be.a('function').and.to.eql(Welcome);\r\n    });\r\n    it('should return the dom element string if a valid DOM elmenet in ReactDOM', () => {\r\n      ['div', 'span', 'p', 'section', ].forEach(el => {\r\n        const jsonxObj = { jsonx: { component: el, }, };\r\n        expect(_jsonxComponents.getComponentFromMap(jsonxObj)).to.eql(el);\r\n      });\r\n    });\r\n    it('should return a custom element', () => {\r\n      const jsonxObj = {\r\n        jsonx: {\r\n          component: 'Welcome',\r\n        },\r\n        reactComponents: {\r\n          Welcome,\r\n        },\r\n      };\r\n      expect(_jsonxComponents.getComponentFromMap(jsonxObj)).to.eql(Welcome);\r\n    });\r\n    it('should return a component library react element', () => {\r\n      const jsonxObj = {\r\n        jsonx: {\r\n          component: 'reactBootstrap.Welcome',\r\n        },\r\n        componentLibraries,\r\n      };\r\n      expect(_jsonxComponents.getComponentFromMap(jsonxObj)).to.eql(Welcome);\r\n    });\r\n    it('should handle errors', () => { \r\n      const logError = sinon.spy();\r\n      expect(_jsonxComponents.getComponentFromMap.bind(null)).to.throw();\r\n      try {\r\n        _jsonxComponents.getComponentFromMap({ debug: true, logError, jsonx:false, });\r\n      } catch (e) {\r\n        expect(e).to.be.a('error');\r\n        expect(logError.called).to.be.true;\r\n      }\r\n    });\r\n  });\r\n  describe('getComponentFromLibrary', () => {\r\n    const reactBootstrap = {\r\n      Welcome,\r\n      WelcomeNonBind,\r\n    };\r\n    const componentLibraries = {\r\n      reactBootstrap,\r\n      testLib: {\r\n        testGrouping: {\r\n          testComponent: {},\r\n        },\r\n      },\r\n    };\r\n    it('should return undefined if not valid', () => {\r\n      expect(_jsonxComponents.getComponentFromLibrary()).to.be.undefined;\r\n    });\r\n    it('should return a function if selecting valid component library', () => {\r\n      const jsonxObj = {\r\n        jsonx: {\r\n          component: 'reactBootstrap.Welcome',\r\n        },\r\n        componentLibraries,\r\n      };\r\n      expect(_jsonxComponents.getComponentFromLibrary(jsonxObj)).to.be.eql(Welcome);\r\n      const jsonxObjDeep = {\r\n        jsonx: {\r\n          component: 'testLib.testGrouping.testComponent',\r\n        },\r\n        componentLibraries,\r\n      };\r\n      expect(_jsonxComponents.getComponentFromLibrary(jsonxObjDeep)).to.be.eql(componentLibraries.testLib.testGrouping.testComponent);\r\n\r\n    });\r\n  });\r\n  describe('componentMap', () => {\r\n    before(function () {\r\n      this.jsdom = mochaJSDOM();\r\n    });\r\n    it('should accept components from a window property', function () {\r\n      global.window.__jsonx_custom_elements = {\r\n        Welcome,\r\n        WelcomeNonBind,\r\n        WelcomeBindSpy,\r\n      };\r\n      delete require.cache[ require.resolve('../../dist/jsonx.cjs') ];\r\n      const window_test_jsonx = require('../../dist/jsonx.cjs');\r\n\r\n      expect(window_test_jsonx._jsonxComponents.componentMap).to.haveOwnProperty('Welcome');\r\n      expect(window_test_jsonx._jsonxComponents.componentMap).to.haveOwnProperty('WelcomeNonBind');\r\n      expect(window_test_jsonx._jsonxComponents.componentMap).to.haveOwnProperty('WelcomeBindSpy');\r\n    });    \r\n    after(function () {\r\n      this.jsdom();\r\n    });\r\n  });\r\n  describe('getFunctionFromEval', () => {\r\n    const getFunctionFromEval = _jsonxComponents.getFunctionFromEval;\r\n    it('should return a new function', () => {\r\n      const myFunc = getFunctionFromEval({\r\n        body: 'return 3;',\r\n      });\r\n      expect(myFunc()).to.eql(3);\r\n    });\r\n  });\r\n  describe('getReactClassComponent', () => {\r\n    const getReactClassComponent = _jsonxComponents.getReactClassComponent;\r\n    const classBody = {\r\n      componentDidMount: {\r\n        body: 'console.log(\\'mounted\\',this.props)',\r\n        arguments: [],\r\n      },\r\n      render: {\r\n        body: {\r\n          component: 'p',\r\n          children: [\r\n            {\r\n              component: 'span',\r\n              children: 'My Custom React Component Status: ',\r\n            },\r\n            {\r\n              component: 'span',\r\n              thisprops: {\r\n                children: ['status',],\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    };\r\n    it('should create a React Component', () => {\r\n      const MyCustomComponent = getReactClassComponent(classBody);\r\n      const MyCustomComponentClass = getReactClassComponent(classBody, { returnFactory:false, });\r\n      // const MyCustomComponentFactory = getReactClassComponent(classBody);\r\n      // console.log({MyCustomComponentClass});\r\n      expect(MyCustomComponent).to.be.a('function');\r\n      expect(MyCustomComponentClass).to.be.a('function');\r\n      expect(ReactTestUtils.isElement(MyCustomComponent)).to.be.false;\r\n      // expect(ReactTestUtils.isCompositeComponent(MyCustomComponentClass())).to.be.true;\r\n    });\r\n    it('should allow for functions as object props', () => {\r\n      const classBodyOpts = Object.assign({}, classBody);\r\n      classBodyOpts.componentDidMount = function () {\r\n        console.log('mounted!');\r\n      };\r\n      expect(getReactClassComponent.bind(null, classBodyOpts)).to.not.throw;\r\n    });\r\n    it('should allow for custom class names', () => { \r\n      const MyCustomComponentNameClass = getReactClassComponent(classBody, '', { name: 'myClass', });\r\n      expect(MyCustomComponentNameClass).to.be.a('function');\r\n    });\r\n    it('should throw an error if missing a render function', () => { \r\n      expect(getReactClassComponent.bind()).to.throw;\r\n    });\r\n    it('should throw an error if missing a function is missing a body', () => { \r\n      expect(getReactClassComponent.bind({ render: {}, })).to.throw;\r\n    });\r\n    it('should create suspense/lazy components', () => {\r\n      const MyCustomLazyComponent = getReactClassComponent(\r\n        {\r\n          component: 'p',\r\n          children: [\r\n            {\r\n              component: 'span',\r\n              children: 'My Custom React Component Status: ',\r\n            },\r\n            {\r\n              component: 'span',\r\n              thisprops: {\r\n                children: ['status',],\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          name: 'myComp',\r\n          lazy: (comp, options) => {\r\n            return new Promise((resolve) => {\r\n              setTimeout(() => {\r\n                resolve([\r\n                  comp, Object.assign(options, { lazy: false, }),]);\r\n              }, 3000);\r\n            });\r\n          },\r\n        },\r\n      );\r\n      \r\n      expect(MyCustomLazyComponent).to.be.a('object');\r\n    });\r\n  });\r\n  describe('getReactFunctionComponent', () => {\r\n    const getReactFunctionComponent = _jsonxComponents.getReactFunctionComponent;\r\n    it('should react a React Function Component', () => { \r\n      const MyCustomComponentNameless = getReactFunctionComponent(\r\n        {\r\n          component:'p',\r\n          children:'hello',\r\n        },\r\n        'console.log(\"lazy function body\");',\r\n        { },\r\n      );\r\n      expect(MyCustomComponentNameless.name).to.eql('Anonymous');\r\n      expect(MyCustomComponentNameless).to.be.a('function');\r\n    });\r\n    it('should create a React Function Component with a name', () => {\r\n      const MyCustomComponent = getReactFunctionComponent(\r\n        {\r\n          component:'p',\r\n          children:[\r\n            {\r\n              component:'span',\r\n              children: 'My Custom React Component Status: ',\r\n            },\r\n            {\r\n              component:'span',\r\n              thisprops:{\r\n                children:['status', ],\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        'console.log(\"lazy function body\");',\r\n        { name:'myComp', },\r\n      );\r\n      expect(MyCustomComponent.name).to.eql('myComp');\r\n      expect(MyCustomComponent).to.be.a('function');\r\n    });\r\n    it('should create suspense/lazy components', () => {\r\n      const MyCustomLazyComponent = getReactFunctionComponent(\r\n        {\r\n          component: 'p',\r\n          children: [\r\n            {\r\n              component: 'span',\r\n              children: 'My Custom React Component Status: ',\r\n            },\r\n            {\r\n              component: 'span',\r\n              thisprops: {\r\n                children: ['status',],\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        'console.log(\"lazy function body\");',\r\n        {\r\n          name: 'myComp',\r\n          lazy: (comp, options) => {\r\n            return new Promise((resolve) => {\r\n              setTimeout(() => {\r\n                resolve([\r\n                  comp, Object.assign(options, { lazy: false, }),]);\r\n              }, 3000);\r\n            });\r\n          },\r\n        },\r\n      );\r\n      \r\n      expect(MyCustomLazyComponent).to.be.a('object');\r\n    });\r\n  });\r\n  describe('getReactContext', () => {\r\n    const getReactContext = _jsonxComponents.getReactContext;\r\n    it('should return a React Context Object', () => {\r\n      const context = getReactContext({ some: 'c', });\r\n      expect(ReactTestUtils.isElement(context)).to.be.false;\r\n      // expect(context).to.be.an.instanceOf(React.createContext);\r\n    });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/jsonx/test/unit/components_spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "test",
    "name": "describe11",
    "testId": 11,
    "memberof": "test/unit/components_spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11",
    "access": null,
    "description": "jsonx components",
    "lineNumber": 101
  },
  {
    "__docId__": 129,
    "kind": "test",
    "name": "describe12",
    "testId": 12,
    "memberof": "test/unit/components_spec.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe12",
    "access": null,
    "description": "advancedBinding",
    "lineNumber": 102
  },
  {
    "__docId__": 130,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "test/unit/components_spec.js~describe11.describe12",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe12.it13",
    "access": null,
    "description": "should use advancedBinding based on user agent",
    "lineNumber": 103
  },
  {
    "__docId__": 131,
    "kind": "test",
    "name": "describe14",
    "testId": 14,
    "memberof": "test/unit/components_spec.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe14",
    "access": null,
    "description": "componentMap",
    "lineNumber": 107
  },
  {
    "__docId__": 132,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "test/unit/components_spec.js~describe11.describe14",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe14.it15",
    "access": null,
    "description": "should export an object of components",
    "lineNumber": 108
  },
  {
    "__docId__": 133,
    "kind": "test",
    "name": "describe16",
    "testId": 16,
    "memberof": "test/unit/components_spec.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe16",
    "access": null,
    "description": "getBoundedComponents",
    "lineNumber": 122
  },
  {
    "__docId__": 134,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "test/unit/components_spec.js~describe11.describe16",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe16.it17",
    "access": null,
    "description": "should bind this to reactComponents",
    "lineNumber": 123
  },
  {
    "__docId__": 135,
    "kind": "test",
    "name": "describe18",
    "testId": 18,
    "memberof": "test/unit/components_spec.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe18",
    "access": null,
    "description": "getComponentFromMap",
    "lineNumber": 153
  },
  {
    "__docId__": 136,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "test/unit/components_spec.js~describe11.describe18",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe18.it19",
    "access": null,
    "description": "should return a function if jsonx.component is not a string",
    "lineNumber": 161
  },
  {
    "__docId__": 137,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/unit/components_spec.js~describe11.describe18",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe18.it20",
    "access": null,
    "description": "should return the dom element string if a valid DOM elmenet in ReactDOM",
    "lineNumber": 167
  },
  {
    "__docId__": 138,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "test/unit/components_spec.js~describe11.describe18",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe18.it21",
    "access": null,
    "description": "should return a custom element",
    "lineNumber": 173
  },
  {
    "__docId__": 139,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "test/unit/components_spec.js~describe11.describe18",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe18.it22",
    "access": null,
    "description": "should return a component library react element",
    "lineNumber": 184
  },
  {
    "__docId__": 140,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "test/unit/components_spec.js~describe11.describe18",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe18.it23",
    "access": null,
    "description": "should handle errors",
    "lineNumber": 193
  },
  {
    "__docId__": 141,
    "kind": "test",
    "name": "describe24",
    "testId": 24,
    "memberof": "test/unit/components_spec.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe24",
    "access": null,
    "description": "getComponentFromLibrary",
    "lineNumber": 204
  },
  {
    "__docId__": 142,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "test/unit/components_spec.js~describe11.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe24.it25",
    "access": null,
    "description": "should return undefined if not valid",
    "lineNumber": 217
  },
  {
    "__docId__": 143,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "test/unit/components_spec.js~describe11.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe24.it26",
    "access": null,
    "description": "should return a function if selecting valid component library",
    "lineNumber": 220
  },
  {
    "__docId__": 144,
    "kind": "test",
    "name": "describe27",
    "testId": 27,
    "memberof": "test/unit/components_spec.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe27",
    "access": null,
    "description": "componentMap",
    "lineNumber": 238
  },
  {
    "__docId__": 145,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/unit/components_spec.js~describe11.describe27",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe27.it28",
    "access": null,
    "description": "should accept components from a window property",
    "lineNumber": 242
  },
  {
    "__docId__": 146,
    "kind": "test",
    "name": "describe29",
    "testId": 29,
    "memberof": "test/unit/components_spec.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe29",
    "access": null,
    "description": "getFunctionFromEval",
    "lineNumber": 259
  },
  {
    "__docId__": 147,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "test/unit/components_spec.js~describe11.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe29.it30",
    "access": null,
    "description": "should return a new function",
    "lineNumber": 261
  },
  {
    "__docId__": 148,
    "kind": "test",
    "name": "describe31",
    "testId": 31,
    "memberof": "test/unit/components_spec.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe31",
    "access": null,
    "description": "getReactClassComponent",
    "lineNumber": 268
  },
  {
    "__docId__": 149,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/unit/components_spec.js~describe11.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe31.it32",
    "access": null,
    "description": "should create a React Component",
    "lineNumber": 293
  },
  {
    "__docId__": 150,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/unit/components_spec.js~describe11.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe31.it33",
    "access": null,
    "description": "should allow for functions as object props",
    "lineNumber": 303
  },
  {
    "__docId__": 151,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/unit/components_spec.js~describe11.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe31.it34",
    "access": null,
    "description": "should allow for custom class names",
    "lineNumber": 310
  },
  {
    "__docId__": 152,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "test/unit/components_spec.js~describe11.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe31.it35",
    "access": null,
    "description": "should throw an error if missing a render function",
    "lineNumber": 314
  },
  {
    "__docId__": 153,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "test/unit/components_spec.js~describe11.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe31.it36",
    "access": null,
    "description": "should throw an error if missing a function is missing a body",
    "lineNumber": 317
  },
  {
    "__docId__": 154,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/unit/components_spec.js~describe11.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe31.it37",
    "access": null,
    "description": "should create suspense/lazy components",
    "lineNumber": 320
  },
  {
    "__docId__": 155,
    "kind": "test",
    "name": "describe38",
    "testId": 38,
    "memberof": "test/unit/components_spec.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe38",
    "access": null,
    "description": "getReactFunctionComponent",
    "lineNumber": 353
  },
  {
    "__docId__": 156,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "test/unit/components_spec.js~describe11.describe38",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe38.it39",
    "access": null,
    "description": "should react a React Function Component",
    "lineNumber": 355
  },
  {
    "__docId__": 157,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/unit/components_spec.js~describe11.describe38",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe38.it40",
    "access": null,
    "description": "should create a React Function Component with a name",
    "lineNumber": 367
  },
  {
    "__docId__": 158,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "test/unit/components_spec.js~describe11.describe38",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe38.it41",
    "access": null,
    "description": "should create suspense/lazy components",
    "lineNumber": 390
  },
  {
    "__docId__": 159,
    "kind": "test",
    "name": "describe42",
    "testId": 42,
    "memberof": "test/unit/components_spec.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe42",
    "access": null,
    "description": "getReactContext",
    "lineNumber": 424
  },
  {
    "__docId__": 160,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "test/unit/components_spec.js~describe11.describe42",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/components_spec.js~describe11.describe42.it43",
    "access": null,
    "description": "should return a React Context Object",
    "lineNumber": 426
  },
  {
    "__docId__": 161,
    "kind": "testFile",
    "name": "test/unit/jsonx_spec.js",
    "content": "import * as jsonx from '../../src/main';\r\nimport mochaJSDOM from 'jsdom-global';\r\nimport path from 'path';\r\nimport chai from 'chai';\r\nimport sinon from 'sinon';\r\nimport React from 'react';\r\nimport ReactTestUtils from 'react-dom/test-utils'; // ES6\r\nimport ReactDOM from 'react-dom';\r\nimport ReactDOMElements from 'react-dom-factories';\r\nimport { expect, } from 'chai';\r\nimport { JSDOM, } from 'jsdom';\r\nchai.use(require('sinon-chai'));\r\nimport 'mocha-sinon';\r\n\r\nimport useGlobalHook from 'use-global-hook';\r\n\r\n\r\nconst sampleJSONX = {\r\n  component: 'div',\r\n  props: {\r\n    id: 'generatedJSONX',\r\n    className:'jsonx',\r\n  },\r\n  children: [\r\n    {\r\n      component: 'p',\r\n      props: {\r\n        style: {\r\n          color: 'red',\r\n          fontWeight:'bold',\r\n        },\r\n      },\r\n      children:'hello world',\r\n    },\r\n  ],\r\n};\r\nconst simpleJSONX = {\r\n  div: {\r\n    props: {\r\n      id: 'generatedJSONX',\r\n      className:'jsonx',\r\n    },\r\n    children: [\r\n      {\r\n        p: {\r\n          props: {\r\n            style: {\r\n              color: 'red',\r\n              fontWeight:'bold',\r\n            },\r\n          },\r\n          children:'hello world',\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\nconst sampleJSONXJSON = jsonx.getReactElementFromJSONX.call({ returnJSON: true }, sampleJSONX);\r\nconst simpleJSONXJSON = jsonx.getReactElementFromJSONX.call({ returnJSON: true }, simpleJSONX);\r\n\r\nconst simpleDiv = {\r\n  component: 'div',\r\n  props: { title: 'test', },\r\n  children: 'hello',\r\n};\r\nconst complexDiv = {\r\n  component: 'div',\r\n  props: { title: 'test', },\r\n  children: [\r\n    {\r\n      button: {\r\n        props: {\r\n          onClick: function (e) {\r\n            console.log({ e, });\r\n          },\r\n        },\r\n        children:'log event',\r\n      },\r\n    },\r\n    {\r\n      component: 'button',\r\n      __dangerouslyBindEvalProps: {\r\n        onClick:`(function(e){\r\n          console.log({ e });\r\n        })`,\r\n      },\r\n      children:'log even two',\r\n    },\r\n  ],\r\n};\r\nconst simpleDivJSON = jsonx.getReactElementFromJSONX.call({ returnJSON: true, }, simpleDiv);\r\nconst complexDivJSON = jsonx.getReactElementFromJSONX.call({ returnJSON: true, exposeEval:true, }, complexDiv);\r\n\r\ndescribe('jsonx', function () { \r\n  describe('helper functions', () => {\r\n    it('should return useGlobalHook', () => {\r\n      expect(jsonx.__getUseGlobalHook()).to.be.a('function');\r\n    });\r\n    it('should return React', () => {\r\n      expect(jsonx.__getReact()).to.eql(React);\r\n    });\r\n    it('should return ReactDOM', () => {\r\n      expect(jsonx.__getReactDOM()).to.eql(ReactDOM);\r\n    });\r\n  });\r\n  describe('getReactElementFromJSONX', () => {\r\n    it('should return an instance of a react element', () => {\r\n      const ReactiveJSON = jsonx.getReactElementFromJSONX(sampleJSONX);\r\n      const ReactiveSimpleJSON = jsonx.getReactElementFromJSONX(simpleJSONX);\r\n      expect(ReactTestUtils.isElement(ReactiveJSON));\r\n      expect(ReactTestUtils.isElement(ReactiveSimpleJSON));\r\n      expect(ReactiveJSON).to.be.an('object');\r\n      expect(ReactiveJSON).to.haveOwnProperty('$$typeof');\r\n      expect(ReactiveJSON).to.haveOwnProperty('type');\r\n      expect(ReactiveJSON).to.haveOwnProperty('key');\r\n      expect(ReactiveJSON).to.haveOwnProperty('ref');\r\n      expect(ReactiveJSON).to.haveOwnProperty('props');\r\n    });\r\n    it('should handle errors with empty components', () => {\r\n      const emptySpanComponent = jsonx.getReactElementFromJSONX({});\r\n      const emptySpanComponentDebugged = jsonx.getReactElementFromJSONX.call({ debug: true, }, {}, {});\r\n      expect(emptySpanComponent).to.be.an('object');\r\n      expect(emptySpanComponentDebugged).to.be.an('object');\r\n      expect(emptySpanComponentDebugged.props.children).to.eql('Error: Missing Component Object');\r\n    });\r\n    it('should throw an error with invalid components', () => {\r\n      const loggerSpy = sinon.spy();\r\n      expect(jsonx.getReactElementFromJSONX.bind({}, { component: 'somethingInvalid', })).to.throw('Invalid React Component (somethingInvalid)');\r\n      try {\r\n        jsonx.getReactElementFromJSONX.call({ debug: true, logError: loggerSpy, }, { component: 'somethingInvalid', }, {});\r\n      } catch (e) {\r\n        expect(loggerSpy.called).to.be.true;\r\n        expect(e).to.be.an('error');\r\n      }\r\n    });\r\n  });\r\n  describe('getReactElementFromJSON', () => {\r\n    it('should return an instance of a react element', () => {\r\n      const ReactiveJSON = jsonx.getReactElementFromJSON(sampleJSONXJSON);\r\n      const ReactiveSimpleJSON = jsonx.getReactElementFromJSON(simpleJSONXJSON);\r\n      expect(ReactTestUtils.isElement(ReactiveJSON)).to.be.true;\r\n      expect(ReactTestUtils.isElement(ReactiveSimpleJSON)).to.be.true;\r\n      expect(ReactiveJSON).to.be.an('object');\r\n      expect(ReactiveJSON).to.haveOwnProperty('$$typeof');\r\n      expect(ReactiveJSON).to.haveOwnProperty('type');\r\n      expect(ReactiveJSON).to.haveOwnProperty('key');\r\n      expect(ReactiveJSON).to.haveOwnProperty('ref');\r\n      expect(ReactiveJSON).to.haveOwnProperty('props');\r\n    });\r\n  });\r\n  describe('compile', () => { \r\n    it('should convert JSONX to React Element', () => {\r\n      const dom = new JSDOM(`<!DOCTYPE html>\r\n      <body>\r\n        <div id=\"root\"/>\r\n      </body>`);\r\n      // global.document = dom.window.document;\r\n      // global.document.createElement = React.createElement;\r\n      // console.log('dom.window',dom.window)\r\n      global.window = dom.window;\r\n      global.window.React = React;\r\n      global.document = global.window.document;\r\n      // console.log(\"dom.window.document.querySelector('#root')\",dom.window.document.querySelector('#root'));\r\n      const ReactiveJSON = jsonx.compile(sampleJSONXJSON);\r\n      const testDOM = ReactTestUtils.renderIntoDocument(ReactiveJSON());\r\n      // console.log({testDOM});\r\n      expect(ReactTestUtils.isDOMComponent(testDOM)).to.be.true;\r\n      expect(ReactiveJSON).to.be.a('function');\r\n      // expect(ReactTestUtils.isCompositeComponent(ReactiveJSON)).to.be.true;\r\n    });\r\n  });\r\n  describe('outputJSON', () => { \r\n    it('should convert JSONX to JSON', () => {\r\n      const compiledJSON = jsonx.outputJSON(simpleDiv);\r\n      const compiledJSONXJSON = jsonx.getReactElementFromJSONX.call({ returnJSON: true, }, simpleDiv);\r\n      expect(compiledJSON.children).to.eql(compiledJSONXJSON.children);\r\n      expect(compiledJSON.type).to.eql(compiledJSONXJSON.type);\r\n    });\r\n  });\r\n  describe('outputJSX', () => {\r\n    it('should compile to JSX String', () => {\r\n      const JSXString = jsonx.outputJSX(simpleDiv);\r\n      expect(JSXString).to.include('title=\"test\">hello</div>');\r\n      // console.log({ JSXString, complexJSXString, });\r\n    });\r\n  });\r\n  describe('jsonToJSX', () => {\r\n    // const util = require('util');\r\n    // console.log(util.inspect({ simpleDivJSON, complexDivJSON, },{depth:20}));\r\n    it('should compile to JSX String', () => {\r\n      const JSXString = jsonx.jsonToJSX(simpleDivJSON);\r\n      const complexJSXString = jsonx.jsonToJSX(complexDivJSON);\r\n      expect(JSXString).to.include('title=\"test\">hello</div>');\r\n      expect(complexJSXString).to.be.a('string');\r\n      // console.log({ JSXString, complexJSXString, });\r\n    });\r\n  });\r\n  describe('outputHTML', () => {\r\n    it('should be an alias for jsonxHTMLString', () => {\r\n      expect(jsonx.outputHTML).to.eql(jsonx.jsonxHTMLString);\r\n    });\r\n  });\r\n  describe('jsonxHTMLString', () => {\r\n    it('should return an HTML string', () => {\r\n      const jsonxString = jsonx.jsonxHTMLString({ jsonx: sampleJSONX, });\r\n      const dom = new JSDOM(`<!DOCTYPE html><body>${jsonxString}</body>`);\r\n\r\n      expect(jsonxString).to.be.a('string');\r\n      expect(dom.window.document.body.querySelector('p').innerHTML).to.eql('hello world');\r\n      expect(dom.window.document.body.querySelector('p').style.color).to.eql('red');\r\n    });\r\n  });\r\n  describe('__express', () => {\r\n    const sampleJSONXFilepath = path.resolve('./test/mock/sample.jsonx');\r\n    const spantext = 'should render in express';\r\n    it('should return an HTML string', (done) => {\r\n      jsonx.__express(\r\n        sampleJSONXFilepath,\r\n        {\r\n          spantext,\r\n          __boundConfig: {\r\n            debug:true,\r\n          },\r\n          __DOCTYPE:'',\r\n        },\r\n        ((err, renderedString) => {\r\n          const dom = new JSDOM(renderedString);\r\n          if (renderedString) {\r\n            expect(dom.window.document.querySelector('#generatedJSONX').getAttribute('title')).to.eql(spantext);\r\n            expect(err).to.be.null;\r\n            expect(renderedString).to.be.a('String');\r\n          }\r\n          done(err);\r\n        })\r\n      );\r\n    });\r\n    it('it should handle errors', (done) => {\r\n      expect(jsonx.__express.bind()).to.throw;\r\n      jsonx.__express(null,null, (err) => {\r\n        expect(err).to.be.a('error');\r\n        done();\r\n      })\r\n    });\r\n  });\r\n  describe('jsonxRender', () => {\r\n    before(function () {\r\n      this.jsdom = mochaJSDOM();\r\n    });\r\n    it('should render component inside of querySelector', function () {\r\n      const containerDiv = document.createElement('div');\r\n      containerDiv.setAttribute('id', 'reactContainer');\r\n      document.body.appendChild(containerDiv);\r\n      jsonx.jsonxRender({ jsonx: sampleJSONX, querySelector:'#reactContainer', });\r\n      \r\n      expect(document.body.querySelector('p').innerHTML).to.eql('hello world');\r\n      expect(document.body.querySelector('p').style.color).to.eql('red');\r\n    });    \r\n    after(function () {\r\n      this.jsdom();\r\n    });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/jsonx/test/unit/jsonx_spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "test",
    "name": "describe44",
    "testId": 44,
    "memberof": "test/unit/jsonx_spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44",
    "access": null,
    "description": "jsonx",
    "lineNumber": 94
  },
  {
    "__docId__": 163,
    "kind": "test",
    "name": "describe45",
    "testId": 45,
    "memberof": "test/unit/jsonx_spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe45",
    "access": null,
    "description": "helper functions",
    "lineNumber": 95
  },
  {
    "__docId__": 164,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/unit/jsonx_spec.js~describe44.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe45.it46",
    "access": null,
    "description": "should return useGlobalHook",
    "lineNumber": 96
  },
  {
    "__docId__": 165,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "test/unit/jsonx_spec.js~describe44.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe45.it47",
    "access": null,
    "description": "should return React",
    "lineNumber": 99
  },
  {
    "__docId__": 166,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "test/unit/jsonx_spec.js~describe44.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe45.it48",
    "access": null,
    "description": "should return ReactDOM",
    "lineNumber": 102
  },
  {
    "__docId__": 167,
    "kind": "test",
    "name": "describe49",
    "testId": 49,
    "memberof": "test/unit/jsonx_spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe49",
    "access": null,
    "description": "getReactElementFromJSONX",
    "lineNumber": 106
  },
  {
    "__docId__": 168,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/unit/jsonx_spec.js~describe44.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe49.it50",
    "access": null,
    "description": "should return an instance of a react element",
    "lineNumber": 107
  },
  {
    "__docId__": 169,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/unit/jsonx_spec.js~describe44.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe49.it51",
    "access": null,
    "description": "should handle errors with empty components",
    "lineNumber": 119
  },
  {
    "__docId__": 170,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "test/unit/jsonx_spec.js~describe44.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe49.it52",
    "access": null,
    "description": "should throw an error with invalid components",
    "lineNumber": 126
  },
  {
    "__docId__": 171,
    "kind": "test",
    "name": "describe53",
    "testId": 53,
    "memberof": "test/unit/jsonx_spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe53",
    "access": null,
    "description": "getReactElementFromJSON",
    "lineNumber": 137
  },
  {
    "__docId__": 172,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "test/unit/jsonx_spec.js~describe44.describe53",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe53.it54",
    "access": null,
    "description": "should return an instance of a react element",
    "lineNumber": 138
  },
  {
    "__docId__": 173,
    "kind": "test",
    "name": "describe55",
    "testId": 55,
    "memberof": "test/unit/jsonx_spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe55",
    "access": null,
    "description": "compile",
    "lineNumber": 151
  },
  {
    "__docId__": 174,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "test/unit/jsonx_spec.js~describe44.describe55",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe55.it56",
    "access": null,
    "description": "should convert JSONX to React Element",
    "lineNumber": 152
  },
  {
    "__docId__": 175,
    "kind": "test",
    "name": "describe57",
    "testId": 57,
    "memberof": "test/unit/jsonx_spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe57",
    "access": null,
    "description": "outputJSON",
    "lineNumber": 172
  },
  {
    "__docId__": 176,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "test/unit/jsonx_spec.js~describe44.describe57",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe57.it58",
    "access": null,
    "description": "should convert JSONX to JSON",
    "lineNumber": 173
  },
  {
    "__docId__": 177,
    "kind": "test",
    "name": "describe59",
    "testId": 59,
    "memberof": "test/unit/jsonx_spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe59",
    "access": null,
    "description": "outputJSX",
    "lineNumber": 180
  },
  {
    "__docId__": 178,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "test/unit/jsonx_spec.js~describe44.describe59",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe59.it60",
    "access": null,
    "description": "should compile to JSX String",
    "lineNumber": 181
  },
  {
    "__docId__": 179,
    "kind": "test",
    "name": "describe61",
    "testId": 61,
    "memberof": "test/unit/jsonx_spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe61",
    "access": null,
    "description": "jsonToJSX",
    "lineNumber": 187
  },
  {
    "__docId__": 180,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "test/unit/jsonx_spec.js~describe44.describe61",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe61.it62",
    "access": null,
    "description": "should compile to JSX String",
    "lineNumber": 190
  },
  {
    "__docId__": 181,
    "kind": "test",
    "name": "describe63",
    "testId": 63,
    "memberof": "test/unit/jsonx_spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe63",
    "access": null,
    "description": "outputHTML",
    "lineNumber": 198
  },
  {
    "__docId__": 182,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "test/unit/jsonx_spec.js~describe44.describe63",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe63.it64",
    "access": null,
    "description": "should be an alias for jsonxHTMLString",
    "lineNumber": 199
  },
  {
    "__docId__": 183,
    "kind": "test",
    "name": "describe65",
    "testId": 65,
    "memberof": "test/unit/jsonx_spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe65",
    "access": null,
    "description": "jsonxHTMLString",
    "lineNumber": 203
  },
  {
    "__docId__": 184,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/unit/jsonx_spec.js~describe44.describe65",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe65.it66",
    "access": null,
    "description": "should return an HTML string",
    "lineNumber": 204
  },
  {
    "__docId__": 185,
    "kind": "test",
    "name": "describe67",
    "testId": 67,
    "memberof": "test/unit/jsonx_spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe67",
    "access": null,
    "description": "__express",
    "lineNumber": 213
  },
  {
    "__docId__": 186,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "test/unit/jsonx_spec.js~describe44.describe67",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe67.it68",
    "access": null,
    "description": "should return an HTML string",
    "lineNumber": 216
  },
  {
    "__docId__": 187,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "test/unit/jsonx_spec.js~describe44.describe67",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe67.it69",
    "access": null,
    "description": "it should handle errors",
    "lineNumber": 237
  },
  {
    "__docId__": 188,
    "kind": "test",
    "name": "describe70",
    "testId": 70,
    "memberof": "test/unit/jsonx_spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe70",
    "access": null,
    "description": "jsonxRender",
    "lineNumber": 245
  },
  {
    "__docId__": 189,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/unit/jsonx_spec.js~describe44.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/jsonx_spec.js~describe44.describe70.it71",
    "access": null,
    "description": "should render component inside of querySelector",
    "lineNumber": 249
  },
  {
    "__docId__": 190,
    "kind": "testFile",
    "name": "test/unit/props_spec.js",
    "content": "import * as _jsonxProps from '../../src/props';\r\nimport { getComputedProps, } from '../../src/props';\r\nimport mochaJSDOM from 'jsdom-global';\r\nimport chai from 'chai';\r\nimport sinon from 'sinon';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ReactDOMElements from 'react-dom-factories';\r\nimport { expect, } from 'chai';\r\nimport { JSDOM, } from 'jsdom';\r\nchai.use(require('sinon-chai'));\r\nimport 'mocha-sinon';\r\n\r\nconst sampleJSONX = {\r\n  component: 'div',\r\n  props: {\r\n    id: 'generatedJSONX',\r\n    className:'jsonx',\r\n  },\r\n  children: [\r\n    {\r\n      component: 'p',\r\n      props: {\r\n        style: {\r\n          color: 'red',\r\n          fontWeight:'bold',\r\n        },\r\n      },\r\n      children:'hello world',\r\n    },\r\n  ],\r\n};\r\n\r\nconst traverseObject = {\r\n  user: {\r\n    name: 'jsonx',\r\n    description: 'react withouth javascript',\r\n  },\r\n  stats: {\r\n    logins: 102,\r\n    comments: 3,\r\n  },\r\n  authentication: 'OAuth2',\r\n};\r\n\r\ndescribe('jsonx props', function () { \r\n  describe('getComputedProps', () => { \r\n    it('should return resolved computed props', () => {\r\n      const dynamicprops = {\r\n        auth: ['authentication', ],\r\n        username: ['user', 'name', ],\r\n      };\r\n      const evalProps = {\r\n        getUsername: '()=>\\'jsonx\\'',\r\n      };\r\n      const bindEvalProps = {\r\n        getUsernameFunction: '(function () { return \"jsonx\"; })',\r\n      };\r\n      const compProps = {\r\n        myComponent: {\r\n          component: 'p',\r\n          children:'hello world',\r\n        },\r\n      };\r\n      const renderIndex = 1;\r\n      const resources = traverseObject;\r\n      const testJSONX = Object.assign({}, sampleJSONX, {\r\n        asyncprops: dynamicprops,\r\n        __dangerouslyEvalProps: evalProps,\r\n        __dangerouslyBindEvalProps: bindEvalProps,\r\n        __dangerouslyInsertComponents: compProps,\r\n      });\r\n      const computedProps = getComputedProps.call({}, {\r\n        disableRenderIndexKey:false,\r\n        jsonx: testJSONX,\r\n        resources,\r\n        renderIndex,\r\n      });\r\n      expect(computedProps.auth).to.eql(resources.authentication);\r\n      expect(computedProps.username).to.eql(resources.user.name);\r\n      expect(computedProps.key).to.eql(renderIndex);\r\n      expect(computedProps.getUsername).to.be.a('string');\r\n      expect(computedProps.getUsernameFunction).to.be.a('function');\r\n      expect(computedProps.myComponent).to.be.an('object');\r\n      expect(computedProps.myComponent).to.haveOwnProperty('$$typeof');\r\n      expect(computedProps.myComponent).to.haveOwnProperty('type');\r\n      expect(computedProps.myComponent).to.haveOwnProperty('key');\r\n      expect(computedProps.myComponent).to.haveOwnProperty('ref');\r\n      expect(computedProps.myComponent).to.haveOwnProperty('props');\r\n    });\r\n  });\r\n  describe('getJSONXProps', () => {\r\n    const getJSONXProps = _jsonxProps.getJSONXProps;\r\n    it('should return resolved dynamic prop', () => {\r\n      const testVals = {\r\n        auth: ['authentication', ],\r\n        username: ['user', 'name', ],\r\n      };\r\n      const testJSONX = Object.assign({}, sampleJSONX, { asyncprops: testVals, });\r\n      const testJSONX2 = Object.assign({}, sampleJSONX, { thisprops: testVals, });\r\n      const JSONXP = getJSONXProps({ jsonx: testJSONX, traverseObject, });\r\n      const JSONXP2 = getJSONXProps({ jsonx: testJSONX2, traverseObject, propName:'thisprops', });\r\n      expect(JSONXP.auth).to.eql(traverseObject.authentication);\r\n      expect(JSONXP.username).to.eql(traverseObject.user.name);\r\n      expect(JSONXP2.auth).to.eql(traverseObject.authentication);\r\n      expect(JSONXP2.username).to.eql(traverseObject.user.name);\r\n    });\r\n    it('should return resolved dynamic prop with undefined values if reference is invalid', () => {\r\n      const testVals = {\r\n        auth: ['wrong', ],\r\n        username: ['no', 'ref', ],\r\n      };\r\n      const testJSONX = Object.assign({}, sampleJSONX, { asyncprops: testVals, });\r\n      const JSONXP = getJSONXProps({ jsonx: testJSONX, traverseObject, });\r\n      expect(JSONXP.auth).to.be.undefined;\r\n      expect(JSONXP.username).to.be.undefined;\r\n    });\r\n  });\r\n  describe('getChildrenComponents', () => {\r\n    const getChildrenComponents = _jsonxProps.getChildrenComponents;\r\n    it('should return undefined children if missing __spread prop', () => {\r\n      expect(getChildrenComponents().children).to.be.undefined;\r\n    });\r\n    it('should return error in children if missing __spread prop and if in debug mode', () => {\r\n      expect(getChildrenComponents({ jsonx:{ debug:true ,}, }).children).to.be.a('string');\r\n      expect(getChildrenComponents.call({ debug:true ,}).children).to.be.a('string');\r\n    });\r\n    it('should spread data as a component on __spread prop', () => {\r\n      const options = {\r\n        allProps: {\r\n          __spread: [ 1, 2, 3, 4, 5, ],\r\n        },\r\n        jsonx: {\r\n          __spreadComponent: {\r\n            component: 'div',\r\n          },\r\n        },\r\n      };\r\n      const spreadChilds = getChildrenComponents(options);\r\n      expect(spreadChilds).to.haveOwnProperty('_children');\r\n      expect(spreadChilds._children).to.have.lengthOf(options.allProps.__spread.length);\r\n      // expect(getChildrenComponents({ jsonx:{ debug:true ,}, }).children).to.be.a('string');\r\n    });\r\n  });\r\n  describe('boundArgsReducer', () => { \r\n    it('should return reducer function', () => {\r\n      expect(_jsonxProps.boundArgsReducer.bind()).to.be.a('function');\r\n    });\r\n  });\r\n  describe('getEvalProps', () => {\r\n    const getEvalProps = _jsonxProps.getEvalProps;\r\n    it('should return evaluated props dangerously using eval', () => {\r\n      const testVals = {\r\n        auth: 'true',\r\n        username: '()=>(user={})=>user.name',\r\n      };\r\n      const testJSONX = Object.assign({}, sampleJSONX, {\r\n        __dangerouslyEvalProps: testVals, __dangerouslyBindEvalProps: {\r\n          email: '(function getUser(user={}){ return this.testBound(); })',\r\n        },\r\n      });\r\n      // console.log({ testJSONX });\r\n      const JSONXP = getEvalProps.call({ testBound: () => 'bounded', }, { jsonx: testJSONX, });\r\n      const evalutedComputedFunc = JSONXP.username({ name: 'bob', });\r\n      const evalutedComputedBoundFunc = JSONXP.email({ email:'test@email.domain', });\r\n      expect(JSONXP.auth).to.be.true;\r\n      expect(evalutedComputedFunc).to.eql('bob');\r\n      expect(evalutedComputedBoundFunc).to.eql('bounded');\r\n    });\r\n  });\r\n  describe('getWindowComponents', () => {\r\n    const getWindowComponents = _jsonxProps.getWindowComponents;\r\n    before(function () {\r\n      this.jsdom = mochaJSDOM();\r\n    });\r\n    it('should return react element from jsonx.__windowComponents', function () {\r\n      class Welcome extends React.Component {\r\n        render() {\r\n          return React.createElement('h1', { name: 'Welcome', }, `Hello, ${this.props.name} ${this.props.title||'NA'}`);\r\n        }\r\n      }\r\n      const __windowComponents = {\r\n        myWelcome: 'Welcome',\r\n      };\r\n      const allProps = {\r\n        __windowComponents,\r\n        __windowComponentProps: {\r\n          name: 'from window',\r\n          title: 'pull it',\r\n        },\r\n      };\r\n      const testJSONX = {\r\n        component: 'div',\r\n        children: 'hello world',\r\n        __windowComponents: {\r\n          useWelcome:'func:window.__jsonx_custom_elements.Welcome',\r\n        },\r\n      };\r\n      const thisProp = {\r\n        window: {\r\n          __jsonx_custom_elements: {\r\n            Welcome,\r\n          },\r\n        },\r\n      };\r\n      const windowProps = getWindowComponents.call(thisProp, {\r\n        allProps,\r\n        jsonx: testJSONX,\r\n      });\r\n      expect(windowProps.useWelcome.type).to.eql(Welcome);\r\n      expect(windowProps.useWelcome.props.name).to.eql(allProps.__windowComponentProps.name);\r\n    });    \r\n    after(function () {\r\n      this.jsdom();\r\n    });\r\n  });\r\n  describe('getFunctionProps', () => {\r\n    const getFunctionProps = _jsonxProps.getFunctionProps;\r\n    it('should resolve functions from jsonx.__functionProps from function strings', () => {\r\n      const logError = sinon.spy();\r\n      const thisProp = {\r\n        logError,\r\n        debug: true,\r\n        window: {\r\n          print: () => 'printed',\r\n          localStorage: {\r\n            getItem:()=>'gotItem',\r\n          },\r\n        },\r\n        props: {\r\n          onClick:()=>'clicked',\r\n          reduxRouter: {\r\n            push:()=>'pushed',\r\n            pop:()=>'poped',\r\n          },\r\n        },\r\n      };\r\n      const jsonxTest = {\r\n        component:'div',\r\n        props: {\r\n          name:'test',\r\n        },\r\n        __functionProps: {\r\n          onclick:'func:this.props.onClick',\r\n          printPage: 'func:window.print',\r\n          nav:'func:this.props.reduxRouter.push',\r\n        },\r\n      };\r\n      const jsonxObj = getFunctionProps.call(thisProp, {\r\n        jsonx: jsonxTest,\r\n      });\r\n      expect(jsonxObj).is.an('object');\r\n      expect(Object.keys(jsonxObj)).to.eql(Object.keys(jsonxTest.__functionProps));\r\n      expect(jsonxObj.onclick()).to.eq('clicked');\r\n      expect(jsonxObj.printPage()).to.eql('printed');\r\n      expect(jsonxObj.nav()).to.eql('pushed');\r\n    });\r\n  });\r\n  describe('getFunctionFromProps', () => {\r\n    const getFunctionFromProps = _jsonxProps.getFunctionFromProps;\r\n    it('should return an empty function by default', () => {\r\n      const logError = sinon.spy();\r\n      const thisProp = {\r\n        logError,\r\n        debug:true,\r\n      };\r\n      const func = getFunctionFromProps.call(thisProp, {\r\n        propFunc: () => { },\r\n      });\r\n      const defaultFunc = getFunctionFromProps.call(thisProp, {});\r\n      // const emptyFunction = function () {};\r\n      expect(func).to.be.a('function');\r\n      expect(defaultFunc).to.be.a('function');\r\n      // expect(func.toString()).to.eq(emptyFunction.toString());\r\n      // expect(defaultFunc.toString()).to.eq(emptyFunction.toString());\r\n      expect(logError.called).to.be.true;\r\n    });\r\n    it('should return a library function like this.props.reduxRouter.push', () => {\r\n      const logError = sinon.spy();\r\n      const thisProp = {\r\n        logError,\r\n        debug: true,\r\n        props: {\r\n          reduxRouter: {\r\n            push:()=>'pushed',\r\n            pop:()=>'poped',\r\n          },\r\n        },\r\n      };\r\n      const func = getFunctionFromProps.call(thisProp, {\r\n        propFunc: 'func:this.props.reduxRouter.push',\r\n      });\r\n      expect(func).to.be.a('function');\r\n      expect(func()).to.eq('pushed');\r\n      expect(logError.called).to.be.false;\r\n    });\r\n    it('should return a function on this.props like this.props.onClick', () => {\r\n      const logError = sinon.spy();\r\n      const thisProp = {\r\n        logError,\r\n        debug: true,\r\n        props: {\r\n          onClick:()=>'clicked',\r\n        },\r\n      };\r\n      const func = getFunctionFromProps.call(thisProp, {\r\n        propFunc: 'func:this.props.onClick',\r\n      });\r\n      expect(func).to.be.a('function');\r\n      expect(func()).to.eq('clicked');\r\n      expect(logError.called).to.be.false;\r\n    });\r\n    it('should return a window function like window.print or window.localStorage.getItem', () => {\r\n      const logError = sinon.spy();\r\n      const thisProp = {\r\n        logError,\r\n        debug: true,\r\n        window: {\r\n          print: () => 'printed',\r\n          localStorage: {\r\n            getItem:()=>'gotItem',\r\n          },\r\n        },\r\n      };\r\n      const func = getFunctionFromProps.call(thisProp, {\r\n        propFunc: 'func:window.print',\r\n      });\r\n      const funcDeep = getFunctionFromProps.call(thisProp, {\r\n        propFunc: 'func:window.localStorage.getItem',\r\n      });\r\n      expect(func).to.be.a('function');\r\n      expect(funcDeep).to.be.a('function');\r\n      expect(func()).to.eq('printed');\r\n      expect(funcDeep()).to.eq('gotItem');\r\n      expect(logError.called).to.be.false;\r\n    });\r\n  });\r\n  describe('getComponentProps', () => {\r\n    const getComponentProps = _jsonxProps.getComponentProps;\r\n    it('should return evaluated props dangerously using eval', () => {\r\n      const testVals = {\r\n        myComponent: {\r\n          component: 'p',\r\n          children:'hello world',\r\n        },\r\n      };\r\n      const testJSONX = Object.assign({}, sampleJSONX, { __dangerouslyInsertComponents: testVals,  });\r\n      const JSONXP = getComponentProps.call({ }, { jsonx: testJSONX, });\r\n      expect(JSONXP.myComponent).to.be.an('object');\r\n      expect(JSONXP.myComponent).to.haveOwnProperty('$$typeof');\r\n      expect(JSONXP.myComponent).to.haveOwnProperty('type');\r\n      expect(JSONXP.myComponent).to.haveOwnProperty('key');\r\n      expect(JSONXP.myComponent).to.haveOwnProperty('ref');\r\n      expect(JSONXP.myComponent).to.haveOwnProperty('props');\r\n    });\r\n  });\r\n  describe('getReactComponentProps', () => {\r\n    const getReactComponentProps = _jsonxProps.getReactComponentProps;\r\n    it('should return react component props dangerously using eval', () => {\r\n      const testVals = {\r\n        myComponent: 'p',\r\n      };\r\n      const testJSONX = Object.assign({}, sampleJSONX, { __dangerouslyInsertReactComponents: testVals,  });\r\n      const JSONXP = getReactComponentProps.call({}, { jsonx: testJSONX, });\r\n      expect(JSONXP.myComponent).to.be.an('string');\r\n      expect(JSONXP.myComponent).to.eql('p');\r\n    });\r\n  });\r\n\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/jsonx/test/unit/props_spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "test",
    "name": "describe72",
    "testId": 72,
    "memberof": "test/unit/props_spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72",
    "access": null,
    "description": "jsonx props",
    "lineNumber": 46
  },
  {
    "__docId__": 192,
    "kind": "test",
    "name": "describe73",
    "testId": 73,
    "memberof": "test/unit/props_spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe73",
    "access": null,
    "description": "getComputedProps",
    "lineNumber": 47
  },
  {
    "__docId__": 193,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "test/unit/props_spec.js~describe72.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe73.it74",
    "access": null,
    "description": "should return resolved computed props",
    "lineNumber": 48
  },
  {
    "__docId__": 194,
    "kind": "test",
    "name": "describe75",
    "testId": 75,
    "memberof": "test/unit/props_spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe75",
    "access": null,
    "description": "getJSONXProps",
    "lineNumber": 92
  },
  {
    "__docId__": 195,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/unit/props_spec.js~describe72.describe75",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe75.it76",
    "access": null,
    "description": "should return resolved dynamic prop",
    "lineNumber": 94
  },
  {
    "__docId__": 196,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "test/unit/props_spec.js~describe72.describe75",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe75.it77",
    "access": null,
    "description": "should return resolved dynamic prop with undefined values if reference is invalid",
    "lineNumber": 108
  },
  {
    "__docId__": 197,
    "kind": "test",
    "name": "describe78",
    "testId": 78,
    "memberof": "test/unit/props_spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe78",
    "access": null,
    "description": "getChildrenComponents",
    "lineNumber": 119
  },
  {
    "__docId__": 198,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "test/unit/props_spec.js~describe72.describe78",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe78.it79",
    "access": null,
    "description": "should return undefined children if missing __spread prop",
    "lineNumber": 121
  },
  {
    "__docId__": 199,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "test/unit/props_spec.js~describe72.describe78",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe78.it80",
    "access": null,
    "description": "should return error in children if missing __spread prop and if in debug mode",
    "lineNumber": 124
  },
  {
    "__docId__": 200,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "test/unit/props_spec.js~describe72.describe78",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe78.it81",
    "access": null,
    "description": "should spread data as a component on __spread prop",
    "lineNumber": 128
  },
  {
    "__docId__": 201,
    "kind": "test",
    "name": "describe82",
    "testId": 82,
    "memberof": "test/unit/props_spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe82",
    "access": null,
    "description": "boundArgsReducer",
    "lineNumber": 145
  },
  {
    "__docId__": 202,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "test/unit/props_spec.js~describe72.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe82.it83",
    "access": null,
    "description": "should return reducer function",
    "lineNumber": 146
  },
  {
    "__docId__": 203,
    "kind": "test",
    "name": "describe84",
    "testId": 84,
    "memberof": "test/unit/props_spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe84",
    "access": null,
    "description": "getEvalProps",
    "lineNumber": 150
  },
  {
    "__docId__": 204,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "test/unit/props_spec.js~describe72.describe84",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe84.it85",
    "access": null,
    "description": "should return evaluated props dangerously using eval",
    "lineNumber": 152
  },
  {
    "__docId__": 205,
    "kind": "test",
    "name": "describe86",
    "testId": 86,
    "memberof": "test/unit/props_spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe86",
    "access": null,
    "description": "getWindowComponents",
    "lineNumber": 171
  },
  {
    "__docId__": 206,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "test/unit/props_spec.js~describe72.describe86",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe86.it87",
    "access": null,
    "description": "should return react element from jsonx.__windowComponents",
    "lineNumber": 176
  },
  {
    "__docId__": 207,
    "kind": "test",
    "name": "describe88",
    "testId": 88,
    "memberof": "test/unit/props_spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe88",
    "access": null,
    "description": "getFunctionProps",
    "lineNumber": 217
  },
  {
    "__docId__": 208,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "test/unit/props_spec.js~describe72.describe88",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe88.it89",
    "access": null,
    "description": "should resolve functions from jsonx.__functionProps from function strings",
    "lineNumber": 219
  },
  {
    "__docId__": 209,
    "kind": "test",
    "name": "describe90",
    "testId": 90,
    "memberof": "test/unit/props_spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe90",
    "access": null,
    "description": "getFunctionFromProps",
    "lineNumber": 259
  },
  {
    "__docId__": 210,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "test/unit/props_spec.js~describe72.describe90",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe90.it91",
    "access": null,
    "description": "should return an empty function by default",
    "lineNumber": 261
  },
  {
    "__docId__": 211,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "test/unit/props_spec.js~describe72.describe90",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe90.it92",
    "access": null,
    "description": "should return a library function like this.props.reduxRouter.push",
    "lineNumber": 278
  },
  {
    "__docId__": 212,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "test/unit/props_spec.js~describe72.describe90",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe90.it93",
    "access": null,
    "description": "should return a function on this.props like this.props.onClick",
    "lineNumber": 297
  },
  {
    "__docId__": 213,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "test/unit/props_spec.js~describe72.describe90",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe90.it94",
    "access": null,
    "description": "should return a window function like window.print or window.localStorage.getItem",
    "lineNumber": 313
  },
  {
    "__docId__": 214,
    "kind": "test",
    "name": "describe95",
    "testId": 95,
    "memberof": "test/unit/props_spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe95",
    "access": null,
    "description": "getComponentProps",
    "lineNumber": 338
  },
  {
    "__docId__": 215,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "test/unit/props_spec.js~describe72.describe95",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe95.it96",
    "access": null,
    "description": "should return evaluated props dangerously using eval",
    "lineNumber": 340
  },
  {
    "__docId__": 216,
    "kind": "test",
    "name": "describe97",
    "testId": 97,
    "memberof": "test/unit/props_spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe97",
    "access": null,
    "description": "getReactComponentProps",
    "lineNumber": 357
  },
  {
    "__docId__": 217,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "test/unit/props_spec.js~describe72.describe97",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/props_spec.js~describe72.describe97.it98",
    "access": null,
    "description": "should return react component props dangerously using eval",
    "lineNumber": 359
  },
  {
    "__docId__": 218,
    "kind": "testFile",
    "name": "test/unit/util_spec.js",
    "content": "import * as jsonx from '../../src/main';\r\nimport * as _jsonxUtils from '../../src/utils';\r\n\r\nimport mochaJSDOM from 'jsdom-global';\r\nimport chai from 'chai';\r\nimport sinon from 'sinon';\r\nimport React from 'react';\r\nimport ReactTestUtils from 'react-dom/test-utils'; // ES6\r\nimport ReactDOM from 'react-dom';\r\nimport ReactDOMElements from 'react-dom-factories';\r\nimport { expect } from 'chai';\r\nimport { JSDOM, } from 'jsdom';\r\nchai.use(require('sinon-chai'));\r\nimport 'mocha-sinon';\r\n\r\nconst sampleJSONX = {\r\n  component: 'div',\r\n  props: {\r\n    id: 'generatedJSONX',\r\n    className: 'jsonx',\r\n    bigNum: 1430931039,\r\n    smallNum: 0.425,\r\n    falsey: false,\r\n    truthy: true,\r\n  },\r\n  children: 'some div',\r\n};\r\n\r\ndescribe('jsonx utils', function () { \r\n  describe('displayComponent', () => {\r\n    const displayComponent = _jsonxUtils.displayComponent;\r\n    it('should display by default return true', () => {\r\n      expect(displayComponent()).to.be.true;\r\n    });\r\n    it('should display if left !== null||undefined', () => {\r\n      const testJSONX = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['truthy', ],\r\n        },],\r\n      });\r\n      const testJSONX2 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['falsey', ],\r\n          operation:'exists',\r\n        },],\r\n      });\r\n      const testJSONX3 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: null,\r\n        },],\r\n      });\r\n      expect(displayComponent({ jsonx: testJSONX, props: testJSONX.props, })).to.be.true;\r\n      expect(displayComponent({ jsonx: testJSONX2, props: testJSONX2.props, })).to.be.true;\r\n      expect(displayComponent({ jsonx: testJSONX3, props: testJSONX3.props, })).to.be.false;\r\n    });\r\n    it('should display if left === null||undefined', () => {\r\n      const testJSONX = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['truthy',],\r\n          operation:'dne',\r\n        },],\r\n      });\r\n      const testJSONX2 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['falsey', ],\r\n          operation:'undefined',\r\n        },],\r\n      });\r\n      const testJSONX3 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: null,\r\n          operation:'null',\r\n        },],\r\n      });\r\n      expect(displayComponent({ jsonx: testJSONX, props: testJSONX.props, })).to.be.false;\r\n      expect(displayComponent({ jsonx: testJSONX2, props: testJSONX2.props, })).to.be.false;\r\n      expect(displayComponent({ jsonx: testJSONX3, props: testJSONX3.props, })).to.be.true;\r\n    });\r\n    it('should display if left == right', () => {\r\n      const testJSONX = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['truthy', ],\r\n          operation:'eq',\r\n          right:['truthy', ],\r\n        },],\r\n      });\r\n      const testJSONX2 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['truthy', ],\r\n          operation:'==',\r\n          right:['falsey', ],\r\n        },],\r\n      });\r\n      const testJSONX3 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['truthy', ],\r\n          operation:'eq',\r\n          right:1,\r\n        },],\r\n      });\r\n      expect(displayComponent({ jsonx: testJSONX, props: testJSONX.props, })).to.be.true;\r\n      expect(displayComponent({ jsonx: testJSONX2, props: testJSONX2.props, })).to.be.false;\r\n      expect(displayComponent({ jsonx: testJSONX3, props: testJSONX3.props, })).to.be.true;\r\n    });\r\n    it('should display if left === right', () => {\r\n      const testJSONX = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['truthy', ],\r\n          operation:'seq',\r\n          right:['truthy', ],\r\n        },],\r\n      });\r\n      const testJSONX2 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['truthy', ],\r\n          operation:'===',\r\n          right:['falsey', ],\r\n        },],\r\n      });\r\n      const testJSONX3 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['truthy', ],\r\n          operation:'seq',\r\n          right:1,\r\n        },],\r\n      });\r\n      expect(displayComponent({ jsonx: testJSONX, props: testJSONX.props, })).to.be.true;\r\n      expect(displayComponent({ jsonx: testJSONX2, props: testJSONX2.props, })).to.be.false;\r\n      expect(displayComponent({ jsonx: testJSONX3, props: testJSONX3.props, })).to.be.false;\r\n    });\r\n    it('should display if left != right', () => {\r\n      const testJSONX = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['truthy', ],\r\n          operation:'dneq',\r\n          right:['truthy', ],\r\n        },],\r\n      });\r\n      const testJSONX2 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['truthy', ],\r\n          operation:'!=',\r\n          right:['falsey', ],\r\n        },],\r\n      });\r\n      const testJSONX3 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['truthy', ],\r\n          operation:'dneq',\r\n          right:1,\r\n        },],\r\n      });\r\n      expect(displayComponent({ jsonx: testJSONX, props: testJSONX.props, })).to.be.false;\r\n      expect(displayComponent({ jsonx: testJSONX2, props: testJSONX2.props, })).to.be.true;\r\n      expect(displayComponent({ jsonx: testJSONX3, props: testJSONX3.props, })).to.be.true;\r\n    });\r\n    it('should display if left !== right', () => {\r\n      const testJSONX = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['truthy', ],\r\n          operation:'dnseq',\r\n          right:['truthy', ],\r\n        },],\r\n      });\r\n      const testJSONX2 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['truthy', ],\r\n          operation:'!==',\r\n          right:['falsey', ],\r\n        },],\r\n      });\r\n      const testJSONX3 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['truthy', ],\r\n          operation:'dnseq',\r\n          right:1,\r\n        },],\r\n      });\r\n      expect(displayComponent({ jsonx: testJSONX, props: testJSONX.props, })).to.be.false;\r\n      expect(displayComponent({ jsonx: testJSONX2, props: testJSONX2.props, })).to.be.true;\r\n      expect(displayComponent({ jsonx: testJSONX3, props: testJSONX3.props, })).to.be.true;\r\n    });\r\n    it('should display if left > right', () => {\r\n      const testJSONX = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['bigNum', ],\r\n          operation:'gt',\r\n          right:['smallNum', ],\r\n        },],\r\n      });\r\n      const testJSONX2 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['smallNum', ],\r\n          operation:'>',\r\n          right:['bigNum', ],\r\n        },],\r\n      });\r\n      const testJSONX3 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['smallNum', ],\r\n          operation:'gt',\r\n          right:['smallNum', ],\r\n        },],\r\n      });\r\n      expect(displayComponent({ jsonx: testJSONX, props: testJSONX.props, })).to.be.true;\r\n      expect(displayComponent({ jsonx: testJSONX2, props: testJSONX2.props, })).to.be.false;\r\n      expect(displayComponent({ jsonx: testJSONX3, props: testJSONX3.props, })).to.be.false;\r\n    });\r\n    it('should display if left >= right', () => {\r\n      const testJSONX = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['bigNum', ],\r\n          operation:'gte',\r\n          right:['smallNum', ],\r\n        },],\r\n      });\r\n      const testJSONX2 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['smallNum', ],\r\n          operation:'>=',\r\n          right:['bigNum', ],\r\n        },],\r\n      });\r\n      const testJSONX3 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['smallNum', ],\r\n          operation:'gte',\r\n          right:['smallNum', ],\r\n        },],\r\n      });\r\n      expect(displayComponent({ jsonx: testJSONX, props: testJSONX.props, })).to.be.true;\r\n      expect(displayComponent({ jsonx: testJSONX2, props: testJSONX2.props, })).to.be.false;\r\n      expect(displayComponent({ jsonx: testJSONX3, props: testJSONX3.props, })).to.be.true;\r\n    });\r\n    it('should display if left < right', () => {\r\n      const testJSONX = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['bigNum', ],\r\n          operation:'<',\r\n          right:['smallNum', ],\r\n        },],\r\n      });\r\n      const testJSONX2 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['smallNum', ],\r\n          operation:'lt',\r\n          right:['bigNum', ],\r\n        },],\r\n      });\r\n      const testJSONX3 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['smallNum', ],\r\n          operation:'lt',\r\n          right:['smallNum', ],\r\n        },],\r\n      });\r\n      expect(displayComponent({ jsonx: testJSONX, props: testJSONX.props, })).to.be.false;\r\n      expect(displayComponent({ jsonx: testJSONX2, props: testJSONX2.props, })).to.be.true;\r\n      expect(displayComponent({ jsonx: testJSONX3, props: testJSONX3.props, })).to.be.false;\r\n    });\r\n    it('should display if left <= right', () => {\r\n      const testJSONX = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['bigNum', ],\r\n          operation:'lte',\r\n          right:['smallNum', ],\r\n        },],\r\n      });\r\n      const testJSONX2 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['smallNum', ],\r\n          operation:'<=',\r\n          right:['bigNum', ],\r\n        },],\r\n      });\r\n      const testJSONX3 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['smallNum', ],\r\n          operation:'lte',\r\n          right:['smallNum', ],\r\n        },],\r\n      });\r\n      expect(displayComponent({ jsonx: testJSONX, props: testJSONX.props, })).to.be.false;\r\n      expect(displayComponent({ jsonx: testJSONX2, props: testJSONX2.props, })).to.be.true;\r\n      expect(displayComponent({ jsonx: testJSONX3, props: testJSONX3.props, })).to.be.true;\r\n    });\r\n    it('should display if multiple comprisons are true', () => {\r\n      const testJSONX = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['truthy', ],\r\n          operation:'eq',\r\n          right:['truthy', ],\r\n        }, {\r\n          left: ['smallNum', ],\r\n          operation:'==',\r\n          right:['smallNum', ],\r\n        },],\r\n      });\r\n      const testJSONX2 = Object.assign({}, sampleJSONX, {\r\n        comparisonprops: [{\r\n          left: ['truthy', ],\r\n          operation:'eq',\r\n          right:['falsey', ],\r\n        }, {\r\n          left: ['smallNum', ],\r\n          operation:'eq',\r\n          right:['smallNum', ],\r\n        },],\r\n      });\r\n      expect(displayComponent({ jsonx: testJSONX, props: testJSONX.props, })).to.be.true;\r\n      expect(displayComponent({ jsonx: testJSONX2, props: testJSONX2.props, })).to.be.false;\r\n    });\r\n    it('should display if one or more using comparisonorprops comprisons are true', () => {\r\n      const testJSONX = Object.assign({}, sampleJSONX, {\r\n        comparisonorprops:true,\r\n        comparisonprops: [{\r\n          left: ['truthy', ],\r\n          operation:'eq',\r\n          right:['truthy', ],\r\n        }, {\r\n          left: ['smallNum', ],\r\n          operation:'==',\r\n          right:['smallNum', ],\r\n        },],\r\n      });\r\n      const testJSONX2 = Object.assign({}, sampleJSONX, {\r\n        comparisonorprops:true,\r\n        comparisonprops: [{\r\n          left: ['truthy', ],\r\n          operation:'eq',\r\n          right:['falsey', ],\r\n        }, {\r\n          left: ['smallNum', ],\r\n          operation:'eq',\r\n          right:['smallNum', ],\r\n        },],\r\n      });\r\n      const testJSONX3 = Object.assign({}, sampleJSONX, {\r\n        comparisonorprops:true,\r\n        comparisonprops: [{\r\n          left: ['truthy', ],\r\n          operation:'eq',\r\n          right:['falsey', ],\r\n        }, {\r\n          left: ['bigNum', ],\r\n          operation:'eq',\r\n          right:['smallNum', ],\r\n        },],\r\n      });\r\n      expect(displayComponent({ jsonx: testJSONX, props: testJSONX.props, })).to.be.true;\r\n      expect(displayComponent({ jsonx: testJSONX2, props: testJSONX2.props, })).to.be.true;\r\n      expect(displayComponent({ jsonx: testJSONX3, props: testJSONX3.props, })).to.be.false;\r\n    });\r\n  });\r\n  describe('getAdvancedBinding', () => {\r\n    const getAdvancedBinding = _jsonxUtils.getAdvancedBinding;\r\n    it('should return true if browser supports deep nesting', function () {\r\n      const window = {\r\n        navigator: {\r\n          userAgent: 'Webkit',\r\n        },\r\n      };\r\n      expect(getAdvancedBinding.call({ window, })).to.be.true;\r\n    });    \r\n    it('should return false on all versions of IE/Trident', function () {\r\n      const window = {\r\n        navigator: {\r\n          userAgent: 'Trident',\r\n        },\r\n      };\r\n      expect(getAdvancedBinding.call({ window, })).to.be.false;\r\n    });    \r\n    it('should return false on old Android Browser', function () {\r\n      const window = {\r\n        navigator: {\r\n          userAgent: 'Mozilla/5.0 (Linux; U; Android 1.5; de-de; HTC Magic Build/CRB17) AppleWebKit/528.5  (KHTML, like Gecko) Version/3.1.2 Mobile Safari/525.20.1',\r\n        },\r\n      };\r\n      expect(getAdvancedBinding.call({ window, })).to.be.false;\r\n    });    \r\n    it('should return false on old Chrome Browser', function () {\r\n      const window = {\r\n        navigator: {\r\n          userAgent: 'Mozilla/5.0 (Linux; Android 4.1.2; GT-I9300 Build/JZO54K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.59 Mobile Safari/537.36',\r\n        },\r\n      };\r\n      expect(getAdvancedBinding.call({ window, })).to.be.false;\r\n    });    \r\n    it('should return false unknown browser', function () {\r\n      expect(getAdvancedBinding.call({ })).to.be.false;\r\n    });    \r\n  });\r\n  describe('traverse', () => {\r\n    const testObj = {\r\n      user: {\r\n        name: 'jsonx',\r\n        description: 'react withouth javascript',\r\n      },\r\n      stats: {\r\n        logins: 102,\r\n        comments: 3,\r\n      },\r\n      authentication: 'OAuth2',\r\n    };\r\n    const traverse = _jsonxUtils.traverse;\r\n    it('should return properties from an object from the array of paths', () => {\r\n      const testVals = { auth: ['authentication', ], username: ['user', 'name', ], };\r\n      expect( traverse(testVals, testObj)).to.eql({ auth:testObj.authentication, username:testObj.user.name,  });\r\n    });\r\n    it('should return the entire object if no paths provided', () => {\r\n      const testVals = { wholeObj: [], };\r\n      expect( traverse(testVals, testObj)).to.eql({ wholeObj:testObj,  });\r\n    });\r\n    it('should return undefined if paths are invalid', () => {\r\n      const testVals = { emptyObj: ['invalid', 'path',], };\r\n      expect( traverse(testVals, testObj)).to.eql({ emptyObj:undefined, });\r\n    });\r\n    it('should throw an error if paths are not an array of strings or numeric indexes', () => {\r\n      const testVals = { emptyObj: ()=>undefined, };\r\n      expect(traverse.bind(null, testVals, testObj)).to.throw(Error);\r\n    });\r\n  });\r\n  describe('validateJSONX', () => {\r\n    const validateJSONX = _jsonxUtils.validateJSONX;\r\n    it('should return true if JSONX is valid',  ()=> {\r\n      expect(validateJSONX(sampleJSONX)).to.be.true;\r\n    });\r\n    it('should return string and warn of invalid JSONX props', () => {\r\n      const invalidKeys = { incorrect: true, extra: true, };\r\n      const invalidKeyJSONX = Object.assign({}, sampleJSONX, invalidKeys);\r\n      const validationTest = validateJSONX(invalidKeyJSONX);\r\n      expect(validationTest).to.be.a('string').and.to.be.ok;\r\n      expect(validationTest).to.eql(`Warning: Invalid Keys [${Object.keys(invalidKeys).join()}]`);\r\n    });\r\n    it('should throw a syntax error if JSONX is missing a component', () => {\r\n      const validationTest = validateJSONX.bind({});\r\n      expect(validationTest).to.throw('Missing React Component');\r\n      expect(validationTest).to.throw(SyntaxError);\r\n    });\r\n    it('should throw multiple errors if returnAllErrors is true', () => {\r\n      const validationTest = validateJSONX( {\r\n        props: [],\r\n      }, true);\r\n      expect(validationTest).to.be.an('array');\r\n      expect(validationTest[ 0 ]).to.be.an('error');\r\n    });\r\n    it('should throw a type error if JSONX props is not an object, props.children or props._children', () => {\r\n      const badPropTest1 = validateJSONX.bind(null, { component:'div', props:{ children:{}, }, });\r\n      expect(validateJSONX.bind(null, { component:'div', props:'bad', })).to.throw(TypeError);\r\n      expect(validateJSONX.bind(null, { component:'div', props:[], })).to.throw(TypeError);\r\n      expect(badPropTest1).to.throw(TypeError);\r\n      expect(validateJSONX.bind(null, { component: 'div', props: { _children: {}, }, })).to.throw(TypeError);\r\n    });\r\n    it('should throw a type error if JSONX children is not an array or JSONX docs or a string', () => {\r\n      expect(validateJSONX.bind(null, { component:'div', children:{}, })).to.throw(TypeError);\r\n    });\r\n    it('should validate child objects', () => {\r\n      const jsonxObj = {\r\n        component: 'div',\r\n        children: [\r\n          {\r\n            props:'this is missing a component',\r\n          },\r\n          {\r\n            component: 'p',\r\n            children: {},\r\n            asyncprops:'',\r\n          },\r\n        ],\r\n      };\r\n      const childrenErrors = validateJSONX(jsonxObj, true);\r\n      expect(childrenErrors).to.be.an('array');\r\n      expect(childrenErrors[ 0 ]).to.be.an('error');\r\n    });\r\n    it('should validate dynamic props[asyncprops,resourceprops,thisprops,windowprops]', () => {\r\n      const jsonxObj = {\r\n        component: 'myComponent',\r\n        asyncprops: '[]',\r\n        resourceprops: '[]',\r\n        thisprops: {\r\n          notStrings: [undefined, {}, ],\r\n        },\r\n        windowprops: {\r\n          title:['navigator', 'userAgent', ],\r\n        },\r\n      };\r\n      const dynamicerrors = validateJSONX(jsonxObj, true);\r\n      expect(dynamicerrors).to.be.an('array');\r\n      expect(dynamicerrors.length).to.eql(7);\r\n      expect(dynamicerrors[ 0 ]).to.be.an('error');\r\n    });\r\n    it('should validate eval props[__dangerouslyEvalProps,__dangerouslyBindEvalProps]', () => {\r\n      const jsonxObj = {\r\n        component: 'myComponent',\r\n        __dangerouslyEvalProps: 'badobj',\r\n      };\r\n      const jsonxObj2 = {\r\n        component: 'myComponent',\r\n        __dangerouslyEvalProps: {\r\n          testJS:'()=>true',\r\n          testJS1:'3',\r\n        },\r\n      };\r\n      const evalError = validateJSONX(jsonxObj, true);\r\n      const evalError2 = validateJSONX(jsonxObj2);\r\n      expect(evalError[ 0 ]).to.be.an('error');\r\n      expect(evalError2).to.be.true;\r\n      // console.log({ evalError3 });\r\n      // expect(dynamicerrors).to.be.an('array');\r\n      // expect(dynamicerrors.length).to.eql(4);\r\n      // expect(dynamicerrors[ 0 ]).to.be.an('error');\r\n    });\r\n    it('should validate __dangerouslyEvalProps javascript', () => {\r\n      const jsonxObj3 = {\r\n        component: 'myComponent',\r\n        __dangerouslyEvalProps: {\r\n          testJS: '(=>true',\r\n        },\r\n      };\r\n      const evalError3 = validateJSONX(jsonxObj3, true);\r\n      expect(evalError3[ 0 ]).to.be.an('error');\r\n    });\r\n    it('should validate __dangerouslyBindEvalProps as a function that can be bound javascript', () => {\r\n      const jsonxObj4 = {\r\n        component: 'myComponent',\r\n        __dangerouslyBindEvalProps: {\r\n          testJS1: '{}',\r\n        },\r\n      };\r\n      const evalError4 = validateJSONX(jsonxObj4, true);\r\n      expect(evalError4[ 0 ]).to.be.an('error');\r\n    });\r\n    it('should validate __dangerouslyInsertComponents are valid JSONX objects', () => {\r\n      const jsonxObj = {\r\n        component: 'myComponent',\r\n        __dangerouslyInsertComponents: {\r\n          testComponent: {\r\n            component_missing: 'nodiv',\r\n            props: {},\r\n          },\r\n        },\r\n      };\r\n      const evalError = validateJSONX(jsonxObj, true);\r\n      expect(evalError[ 0 ]).to.be.an('error');\r\n    });\r\n    it('should validate __functionProps are valid function strings', () => {\r\n      const jsonxObj = {\r\n        component: 'myComponent',\r\n        __functionProps: {\r\n          invalidFunc: {\r\n            isString: {},\r\n          },\r\n        },\r\n      };\r\n      const jsonxObj2 = {\r\n        component: 'myComponent',\r\n        __functionProps: 'should be an obj',\r\n      };\r\n      const jsonxObjValid = {\r\n        component: 'myComponent',\r\n        __functionProps: {\r\n          goodFunc:'func:this.someFunc',\r\n        },\r\n      };\r\n      const evalError = validateJSONX(jsonxObj, true);\r\n      const evalError2 = validateJSONX(jsonxObj2, true);\r\n      const validTest = validateJSONX(jsonxObjValid);\r\n      expect(evalError[ 0 ]).to.be.an('error');\r\n      expect(evalError2[ 0 ]).to.be.an('error');\r\n      expect(validTest).to.be.true;\r\n    });\r\n    it('should validate __windowComponentProps is an object', () => {\r\n      const jsonxObj = {\r\n        component: 'myComponent',\r\n        __windowComponentProps: 'should be an obj',\r\n      };\r\n      const jsonxObjValid = {\r\n        component: 'myComponent',\r\n        __windowComponentProps: {\r\n          goodProps:'ok',\r\n        },\r\n      };\r\n      const evalError = validateJSONX(jsonxObj, true);\r\n      const validTest = validateJSONX(jsonxObjValid);\r\n      expect(evalError[ 0 ]).to.be.an('error');\r\n      expect(validTest).to.be.true;\r\n    });\r\n    it('should validate __windowComponents are valid function strings', () => {\r\n      const jsonxObj = {\r\n        component: 'myComponent',\r\n        __windowComponents: {\r\n          invalidFunc: {\r\n            isString: {},\r\n          },\r\n        },\r\n      };\r\n      const jsonxObj2 = {\r\n        component: 'myComponent',\r\n        __windowComponents: 'should be an obj',\r\n      };\r\n      const jsonxObjValid = {\r\n        component: 'myComponent',\r\n        __windowComponents: {\r\n          goodFunc:'func:this.someFunc',\r\n        },\r\n      };\r\n      const evalError = validateJSONX(jsonxObj, true);\r\n      const evalError2 = validateJSONX(jsonxObj2, true);\r\n      const validTest = validateJSONX(jsonxObjValid);\r\n      expect(evalError[ 0 ]).to.be.an('error');\r\n      expect(evalError2[ 0 ]).to.be.an('error');\r\n      expect(validTest).to.be.true;\r\n    });\r\n    it('should validate comparisonorprops is boolean', () => {\r\n      const jsonxObj = {\r\n        component: 'myComponent',\r\n        comparisonorprops: 'should be an obj',\r\n      };\r\n      const jsonxObjValid = {\r\n        component: 'myComponent',\r\n        comparisonorprops: true,\r\n      };\r\n      const evalError = validateJSONX(jsonxObj, true);\r\n      const validTest = validateJSONX(jsonxObjValid);\r\n      expect(evalError[ 0 ]).to.be.an('error');\r\n      expect(validTest).to.be.true;\r\n    });\r\n    it('should validate comparisonprops is an array of comaprisons', () => {\r\n      const jsonxObj = {\r\n        component: 'myComponent',\r\n        comparisonprops: 'should be an array',\r\n      };\r\n      const jsonxObjValid = {\r\n        component: 'myComponent',\r\n        comparisonprops: [],\r\n      };\r\n      const jsonxObjin1 = {\r\n        component: 'myComponent',\r\n        comparisonprops: [{},],\r\n      };\r\n      const jsonxObjin2 = {\r\n        component: 'myComponent',\r\n        comparisonprops: [() => { },],\r\n      };\r\n      const evalError = validateJSONX(jsonxObj, true);\r\n      const evalError1 = validateJSONX(jsonxObjin1, true);\r\n      const evalError2 = validateJSONX(jsonxObjin2, true);\r\n      const validTest = validateJSONX(jsonxObjValid);\r\n      expect(evalError[ 0 ]).to.be.an('error');\r\n      expect(evalError1[ 0 ]).to.be.an('error');\r\n      expect(evalError2[ 0 ]).to.be.an('error');\r\n      expect(validTest).to.be.true;\r\n    });\r\n    it('should validate passprops is boolean', () => {\r\n      const jsonxObj = {\r\n        component: 'myComponent',\r\n        passprops: 'should be an obj',\r\n      };\r\n      const jsonxObjValid = {\r\n        component: 'myComponent',\r\n        passprops: true,\r\n      };\r\n      const evalError = validateJSONX(jsonxObj, true);\r\n      const validTest = validateJSONX(jsonxObjValid);\r\n      expect(evalError[ 0 ]).to.be.an('error');\r\n      expect(validTest).to.be.true;\r\n    });\r\n  });\r\n  describe('validSimpleJSONXSyntax', () => {\r\n    const validSimpleJSONXSyntax = _jsonxUtils.validSimpleJSONXSyntax;\r\n    it('should invalidate shorthard simple syntax', () => {\r\n      const invalidShorthand = {\r\n        component:'p',\r\n      };\r\n      const invalidShorthand2 = {\r\n        component: 'p',\r\n        props: {\r\n          style: {\r\n            background:'red',\r\n          },\r\n        },\r\n      };\r\n      const invalidShorthand3 = {\r\n        component: 'p',\r\n        props:'hey',\r\n      };\r\n      const invalidShorthand4 = {\r\n        component: 'p',\r\n        props: {\r\n          style: {\r\n            background:'red',\r\n          },\r\n        },\r\n        children:'hey',\r\n      };\r\n      const invalidShorthand5 = {\r\n        children:'p',\r\n      };\r\n      const invalidShorthand6 = {\r\n        anything:'p',\r\n      };\r\n      const invalidShorthand7 = {\r\n        anything: {\r\n          component: 'p',\r\n        },\r\n      };\r\n      expect(validSimpleJSONXSyntax(invalidShorthand)).to.be.false;\r\n      expect(validSimpleJSONXSyntax(invalidShorthand2)).to.be.false;\r\n      expect(validSimpleJSONXSyntax(invalidShorthand3)).to.be.false;\r\n      expect(validSimpleJSONXSyntax(invalidShorthand4)).to.be.false;\r\n      expect(validSimpleJSONXSyntax(invalidShorthand5)).to.be.false;\r\n      expect(validSimpleJSONXSyntax(invalidShorthand6)).to.be.false;\r\n    });\r\n    it('should validate shorthard simple syntax', () => {\r\n      const validShorthand = {\r\n        p:{},\r\n      };\r\n      const validShorthand2 = {\r\n        p: {\r\n          props: {\r\n            style: {\r\n              background:'red',\r\n            },\r\n          },\r\n        },\r\n      };\r\n      const validShorthand3 = {\r\n        p: {\r\n          props:'hey',\r\n        },\r\n      };\r\n      const validShorthand4 = {\r\n        p: {\r\n          props: {\r\n            style: {\r\n              background:'red',\r\n            },\r\n          },\r\n          children:'hey',\r\n        },\r\n      };\r\n      const validShorthand5 = {\r\n        children: {\r\n          children:'p',\r\n        },\r\n      };\r\n      expect(validSimpleJSONXSyntax(validShorthand)).to.be.true;\r\n      expect(validSimpleJSONXSyntax(validShorthand2)).to.be.true;\r\n      expect(validSimpleJSONXSyntax(validShorthand3)).to.be.true;\r\n      expect(validSimpleJSONXSyntax(validShorthand4)).to.be.true;\r\n      expect(validSimpleJSONXSyntax(validShorthand5)).to.be.true;\r\n    });\r\n  });\r\n  describe('simpleJSONXSyntax', () => {\r\n    const simpleJSONXSyntax = _jsonxUtils.simpleJSONXSyntax;\r\n    it('should return valid JSONX from simple JSONX syntax', () => {\r\n      const validShorthand = {\r\n        p:{},\r\n      };\r\n      const validShorthand2 = {\r\n        p: {\r\n          props: {\r\n            style: {\r\n              background:'red',\r\n            },\r\n          },\r\n        },\r\n      };\r\n      const validShorthand3 = {\r\n        p: {\r\n          props:'hey',\r\n        },\r\n      };\r\n      const validShorthand4 = {\r\n        div: {\r\n          props: {\r\n            style: {\r\n              background:'red',\r\n            },\r\n          },\r\n          children: [\r\n            {\r\n              p: { children: 'hey', },\r\n            },\r\n          ],\r\n        },\r\n      };\r\n      const validShorthand5 = {\r\n        children: {\r\n          children:'p',\r\n        },\r\n      };\r\n      const transformedSimpleSyntaxValid = _jsonxUtils.validateJSONX(simpleJSONXSyntax(validShorthand), true);\r\n      const transformedSimpleSyntaxValid2 = _jsonxUtils.validateJSONX(simpleJSONXSyntax(validShorthand2), true);\r\n      const transformedSimpleSyntaxValid3 = _jsonxUtils.validateJSONX(simpleJSONXSyntax(validShorthand3), true);\r\n      const transformedSimpleSyntaxValid4 = _jsonxUtils.validateJSONX(simpleJSONXSyntax(validShorthand4), true);\r\n      const transformedSimpleSyntaxValid5 = _jsonxUtils.validateJSONX(simpleJSONXSyntax(validShorthand5), true);\r\n     \r\n      expect((transformedSimpleSyntaxValid)).to.be.true;\r\n      expect((transformedSimpleSyntaxValid2)).to.be.true;\r\n      expect((transformedSimpleSyntaxValid3[0])).to.be.an('error');\r\n      expect((transformedSimpleSyntaxValid4[0])).to.be.true;\r\n      expect((transformedSimpleSyntaxValid5)).to.be.true;\r\n    });\r\n    it('should produce equivalent JSONX', () => {\r\n      const sampleJSONX = {\r\n        component: 'div',\r\n        props: {\r\n          id: 'generatedJSONX',\r\n          className: 'jsonx',\r\n        },\r\n        asyncprops: {\r\n          test:['ok', 'cool',],\r\n        },\r\n        children: [\r\n          {\r\n            component: 'p',\r\n            props: {\r\n              style: {\r\n                color: 'red',\r\n                fontWeight: 'bold',\r\n              },\r\n            },\r\n            children: 'hello world',\r\n          },\r\n        ],\r\n      };\r\n\r\n      const simpleJSONX = {\r\n        div: {\r\n          props: {\r\n            id: 'generatedJSONX',\r\n            className: 'jsonx',\r\n          },\r\n          asyncprops: {\r\n            test:['ok', 'cool',],\r\n          },\r\n          children: [\r\n            {\r\n              p: {\r\n                props: {\r\n                  style: {\r\n                    color: 'red',\r\n                    fontWeight: 'bold',\r\n                  },\r\n                },\r\n                children: 'hello world',\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      };\r\n      const transformedJSONXSTRING = simpleJSONXSyntax(simpleJSONX).toString();\r\n      const JSONXSTRING = sampleJSONX.toString();\r\n\r\n      expect(transformedJSONXSTRING).to.eql(JSONXSTRING);\r\n    });\r\n  });\r\n  describe('getSimplifiedJSONX', () => {\r\n    const getSimplifiedJSONX = _jsonxUtils.getSimplifiedJSONX;\r\n    const simpleJSONX = {\r\n      div: {\r\n        props: {\r\n          id: 'generatedJSONX',\r\n          className: 'jsonx',\r\n        },\r\n        asyncprops: {\r\n          test:['ok', 'cool',],\r\n        },\r\n        children: [\r\n          {\r\n            p: {\r\n              props: {\r\n                style: {\r\n                  color: 'red',\r\n                  fontWeight: 'bold',\r\n                },\r\n              },\r\n              children: 'hello world',\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    };\r\n    const sampleJSONX = {\r\n      component: 'div',\r\n      props: {\r\n        id: 'generatedJSONX',\r\n        className: 'jsonx',\r\n      },\r\n      asyncprops: {\r\n        test:['ok', 'cool',],\r\n      },\r\n      children: [\r\n        {\r\n          component: 'p',\r\n          props: {\r\n            style: {\r\n              color: 'red',\r\n              fontWeight: 'bold',\r\n            },\r\n          },\r\n          children: 'hello world',\r\n        },\r\n      ],\r\n    };\r\n    it('should produce equivalent SimpleJSONX', () => {\r\n      const transformedJSONXSTRING = getSimplifiedJSONX(sampleJSONX).toString();\r\n      const JSONXSTRING = simpleJSONX.toString();\r\n      expect(transformedJSONXSTRING).to.eql(JSONXSTRING);\r\n    });\r\n    it('should return SimpleJSONX if already simple', () => {\r\n      expect(simpleJSONX).to.eql(getSimplifiedJSONX(simpleJSONX));\r\n    });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/jsonx/test/unit/util_spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "test",
    "name": "describe99",
    "testId": 99,
    "memberof": "test/unit/util_spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99",
    "access": null,
    "description": "jsonx utils",
    "lineNumber": 29
  },
  {
    "__docId__": 220,
    "kind": "test",
    "name": "describe100",
    "testId": 100,
    "memberof": "test/unit/util_spec.js~describe99",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe100",
    "access": null,
    "description": "displayComponent",
    "lineNumber": 30
  },
  {
    "__docId__": 221,
    "kind": "test",
    "name": "it101",
    "testId": 101,
    "memberof": "test/unit/util_spec.js~describe99.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe100.it101",
    "access": null,
    "description": "should display by default return true",
    "lineNumber": 32
  },
  {
    "__docId__": 222,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "test/unit/util_spec.js~describe99.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe100.it102",
    "access": null,
    "description": "should display if left !== null||undefined",
    "lineNumber": 35
  },
  {
    "__docId__": 223,
    "kind": "test",
    "name": "it103",
    "testId": 103,
    "memberof": "test/unit/util_spec.js~describe99.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe100.it103",
    "access": null,
    "description": "should display if left === null||undefined",
    "lineNumber": 56
  },
  {
    "__docId__": 224,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "test/unit/util_spec.js~describe99.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe100.it104",
    "access": null,
    "description": "should display if left == right",
    "lineNumber": 79
  },
  {
    "__docId__": 225,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "test/unit/util_spec.js~describe99.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe100.it105",
    "access": null,
    "description": "should display if left === right",
    "lineNumber": 105
  },
  {
    "__docId__": 226,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "test/unit/util_spec.js~describe99.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe100.it106",
    "access": null,
    "description": "should display if left != right",
    "lineNumber": 131
  },
  {
    "__docId__": 227,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "test/unit/util_spec.js~describe99.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe100.it107",
    "access": null,
    "description": "should display if left !== right",
    "lineNumber": 157
  },
  {
    "__docId__": 228,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "test/unit/util_spec.js~describe99.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe100.it108",
    "access": null,
    "description": "should display if left > right",
    "lineNumber": 183
  },
  {
    "__docId__": 229,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "test/unit/util_spec.js~describe99.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe100.it109",
    "access": null,
    "description": "should display if left >= right",
    "lineNumber": 209
  },
  {
    "__docId__": 230,
    "kind": "test",
    "name": "it110",
    "testId": 110,
    "memberof": "test/unit/util_spec.js~describe99.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe100.it110",
    "access": null,
    "description": "should display if left < right",
    "lineNumber": 235
  },
  {
    "__docId__": 231,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "test/unit/util_spec.js~describe99.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe100.it111",
    "access": null,
    "description": "should display if left <= right",
    "lineNumber": 261
  },
  {
    "__docId__": 232,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "test/unit/util_spec.js~describe99.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe100.it112",
    "access": null,
    "description": "should display if multiple comprisons are true",
    "lineNumber": 287
  },
  {
    "__docId__": 233,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "test/unit/util_spec.js~describe99.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe100.it113",
    "access": null,
    "description": "should display if one or more using comparisonorprops comprisons are true",
    "lineNumber": 313
  },
  {
    "__docId__": 234,
    "kind": "test",
    "name": "describe114",
    "testId": 114,
    "memberof": "test/unit/util_spec.js~describe99",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe114",
    "access": null,
    "description": "getAdvancedBinding",
    "lineNumber": 355
  },
  {
    "__docId__": 235,
    "kind": "test",
    "name": "it115",
    "testId": 115,
    "memberof": "test/unit/util_spec.js~describe99.describe114",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe114.it115",
    "access": null,
    "description": "should return true if browser supports deep nesting",
    "lineNumber": 357
  },
  {
    "__docId__": 236,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "test/unit/util_spec.js~describe99.describe114",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe114.it116",
    "access": null,
    "description": "should return false on all versions of IE/Trident",
    "lineNumber": 365
  },
  {
    "__docId__": 237,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "test/unit/util_spec.js~describe99.describe114",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe114.it117",
    "access": null,
    "description": "should return false on old Android Browser",
    "lineNumber": 373
  },
  {
    "__docId__": 238,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "test/unit/util_spec.js~describe99.describe114",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe114.it118",
    "access": null,
    "description": "should return false on old Chrome Browser",
    "lineNumber": 381
  },
  {
    "__docId__": 239,
    "kind": "test",
    "name": "it119",
    "testId": 119,
    "memberof": "test/unit/util_spec.js~describe99.describe114",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe114.it119",
    "access": null,
    "description": "should return false unknown browser",
    "lineNumber": 389
  },
  {
    "__docId__": 240,
    "kind": "test",
    "name": "describe120",
    "testId": 120,
    "memberof": "test/unit/util_spec.js~describe99",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe120",
    "access": null,
    "description": "traverse",
    "lineNumber": 393
  },
  {
    "__docId__": 241,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "test/unit/util_spec.js~describe99.describe120",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe120.it121",
    "access": null,
    "description": "should return properties from an object from the array of paths",
    "lineNumber": 406
  },
  {
    "__docId__": 242,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "test/unit/util_spec.js~describe99.describe120",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe120.it122",
    "access": null,
    "description": "should return the entire object if no paths provided",
    "lineNumber": 410
  },
  {
    "__docId__": 243,
    "kind": "test",
    "name": "it123",
    "testId": 123,
    "memberof": "test/unit/util_spec.js~describe99.describe120",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe120.it123",
    "access": null,
    "description": "should return undefined if paths are invalid",
    "lineNumber": 414
  },
  {
    "__docId__": 244,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "test/unit/util_spec.js~describe99.describe120",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe120.it124",
    "access": null,
    "description": "should throw an error if paths are not an array of strings or numeric indexes",
    "lineNumber": 418
  },
  {
    "__docId__": 245,
    "kind": "test",
    "name": "describe125",
    "testId": 125,
    "memberof": "test/unit/util_spec.js~describe99",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe125",
    "access": null,
    "description": "validateJSONX",
    "lineNumber": 423
  },
  {
    "__docId__": 246,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "test/unit/util_spec.js~describe99.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe125.it126",
    "access": null,
    "description": "should return true if JSONX is valid",
    "lineNumber": 425
  },
  {
    "__docId__": 247,
    "kind": "test",
    "name": "it127",
    "testId": 127,
    "memberof": "test/unit/util_spec.js~describe99.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe125.it127",
    "access": null,
    "description": "should return string and warn of invalid JSONX props",
    "lineNumber": 428
  },
  {
    "__docId__": 248,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "test/unit/util_spec.js~describe99.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe125.it128",
    "access": null,
    "description": "should throw a syntax error if JSONX is missing a component",
    "lineNumber": 435
  },
  {
    "__docId__": 249,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "test/unit/util_spec.js~describe99.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe125.it129",
    "access": null,
    "description": "should throw multiple errors if returnAllErrors is true",
    "lineNumber": 440
  },
  {
    "__docId__": 250,
    "kind": "test",
    "name": "it130",
    "testId": 130,
    "memberof": "test/unit/util_spec.js~describe99.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe125.it130",
    "access": null,
    "description": "should throw a type error if JSONX props is not an object, props.children or props._children",
    "lineNumber": 447
  },
  {
    "__docId__": 251,
    "kind": "test",
    "name": "it131",
    "testId": 131,
    "memberof": "test/unit/util_spec.js~describe99.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe125.it131",
    "access": null,
    "description": "should throw a type error if JSONX children is not an array or JSONX docs or a string",
    "lineNumber": 454
  },
  {
    "__docId__": 252,
    "kind": "test",
    "name": "it132",
    "testId": 132,
    "memberof": "test/unit/util_spec.js~describe99.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe125.it132",
    "access": null,
    "description": "should validate child objects",
    "lineNumber": 457
  },
  {
    "__docId__": 253,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "test/unit/util_spec.js~describe99.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe125.it133",
    "access": null,
    "description": "should validate dynamic props[asyncprops,resourceprops,thisprops,windowprops]",
    "lineNumber": 475
  },
  {
    "__docId__": 254,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "test/unit/util_spec.js~describe99.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe125.it134",
    "access": null,
    "description": "should validate eval props[__dangerouslyEvalProps,__dangerouslyBindEvalProps]",
    "lineNumber": 492
  },
  {
    "__docId__": 255,
    "kind": "test",
    "name": "it135",
    "testId": 135,
    "memberof": "test/unit/util_spec.js~describe99.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe125.it135",
    "access": null,
    "description": "should validate __dangerouslyEvalProps javascript",
    "lineNumber": 513
  },
  {
    "__docId__": 256,
    "kind": "test",
    "name": "it136",
    "testId": 136,
    "memberof": "test/unit/util_spec.js~describe99.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe125.it136",
    "access": null,
    "description": "should validate __dangerouslyBindEvalProps as a function that can be bound javascript",
    "lineNumber": 523
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "it137",
    "testId": 137,
    "memberof": "test/unit/util_spec.js~describe99.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe125.it137",
    "access": null,
    "description": "should validate __dangerouslyInsertComponents are valid JSONX objects",
    "lineNumber": 533
  },
  {
    "__docId__": 258,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "test/unit/util_spec.js~describe99.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe125.it138",
    "access": null,
    "description": "should validate __functionProps are valid function strings",
    "lineNumber": 546
  },
  {
    "__docId__": 259,
    "kind": "test",
    "name": "it139",
    "testId": 139,
    "memberof": "test/unit/util_spec.js~describe99.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe125.it139",
    "access": null,
    "description": "should validate __windowComponentProps is an object",
    "lineNumber": 572
  },
  {
    "__docId__": 260,
    "kind": "test",
    "name": "it140",
    "testId": 140,
    "memberof": "test/unit/util_spec.js~describe99.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe125.it140",
    "access": null,
    "description": "should validate __windowComponents are valid function strings",
    "lineNumber": 588
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "it141",
    "testId": 141,
    "memberof": "test/unit/util_spec.js~describe99.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe125.it141",
    "access": null,
    "description": "should validate comparisonorprops is boolean",
    "lineNumber": 614
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "it142",
    "testId": 142,
    "memberof": "test/unit/util_spec.js~describe99.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe125.it142",
    "access": null,
    "description": "should validate comparisonprops is an array of comaprisons",
    "lineNumber": 628
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "it143",
    "testId": 143,
    "memberof": "test/unit/util_spec.js~describe99.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe125.it143",
    "access": null,
    "description": "should validate passprops is boolean",
    "lineNumber": 654
  },
  {
    "__docId__": 264,
    "kind": "test",
    "name": "describe144",
    "testId": 144,
    "memberof": "test/unit/util_spec.js~describe99",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe144",
    "access": null,
    "description": "validSimpleJSONXSyntax",
    "lineNumber": 669
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "it145",
    "testId": 145,
    "memberof": "test/unit/util_spec.js~describe99.describe144",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe144.it145",
    "access": null,
    "description": "should invalidate shorthard simple syntax",
    "lineNumber": 671
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "test/unit/util_spec.js~describe99.describe144",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe144.it146",
    "access": null,
    "description": "should validate shorthard simple syntax",
    "lineNumber": 714
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "describe147",
    "testId": 147,
    "memberof": "test/unit/util_spec.js~describe99",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe147",
    "access": null,
    "description": "simpleJSONXSyntax",
    "lineNumber": 754
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "it148",
    "testId": 148,
    "memberof": "test/unit/util_spec.js~describe99.describe147",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe147.it148",
    "access": null,
    "description": "should return valid JSONX from simple JSONX syntax",
    "lineNumber": 756
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "test/unit/util_spec.js~describe99.describe147",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe147.it149",
    "access": null,
    "description": "should produce equivalent JSONX",
    "lineNumber": 805
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "describe150",
    "testId": 150,
    "memberof": "test/unit/util_spec.js~describe99",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe150",
    "access": null,
    "description": "getSimplifiedJSONX",
    "lineNumber": 859
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "it151",
    "testId": 151,
    "memberof": "test/unit/util_spec.js~describe99.describe150",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe150.it151",
    "access": null,
    "description": "should produce equivalent SimpleJSONX",
    "lineNumber": 907
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "it152",
    "testId": 152,
    "memberof": "test/unit/util_spec.js~describe99.describe150",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.js~describe99.describe150.it152",
    "access": null,
    "description": "should return SimpleJSONX if already simple",
    "lineNumber": 912
  }
]