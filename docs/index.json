[
  {
    "kind": "index",
    "content": "# Reactive JSON (RJX)\n\n[![Coverage Status](https://coveralls.io/repos/github/repetere/rjx/badge.svg?branch=master)](https://coveralls.io/github/repetere/rjx?branch=master) [![Build Status](https://travis-ci.org/repetere/rjx.svg?branch=master)](https://travis-ci.org/repetere/rjx)\n\n## Description\n\n**Reactive JSON (RJX)** takes a RXJ JSON object and renders React components. **RJX** lets you get up and running with React without using JavaScript.\n\nRJX was created to remove all the complexities around environment setup, and configuration of React applications (Babel, Webpack, Rollup, etc) and make declarative user interfaces using Machine Learning and Natural Language Processing. Using RJX let's any back end application (Elixir, Go, Python, etc) render a server side React application.\n\n## Installation\n\n```sh\n$ npm i rjx\n```\n\n### [Full Documentation](https://github.com/repetere/rjx/blob/master/docs/api.md)\n\n### Examples ( [HTML/Browser Example](https://github.com/repetere/rjx/blob/master/dist/example.html) ) \n\n```javascript\nimport { default as rjx } from 'rjx';\n//Rendering React Components\nrjx.getRenderedJSON({component:'p',props:{style:{color:'blue'}},children:'hello world'});\n// => JSX Equivalent: <p style={{color:'blue'}}>hello world</p>\n\n//Generating HTML strings\nrjx.rjxHTMLString({ rjx: { component: 'div', props:{className:'rjx-generated',children:[{ component:'p',props:{style:{color:'red'}}, children:'hello world' }]}}, });\n// => '<div class=\"rjx-generated\"><p style=\"color:red;\">hello world</p></div>'\n\n//Rendering HTML Dom with React\nrjx.rjxRender({ rjx: { component: 'div', props:{className:'rjx-generated',children:[{ component:'p',props:{style:{color:'red'}}, children:'hello world' }]}}, querySelector:'#myApp', });\n// <!DOCTYPE html>\n//  <body>\n//    <div id=\"myApp\">\n//      <div class=\"rjx-generated\">\n//        <p style=\"color:red;\">hello world</p>\n//      </div>\n//    </div>\n// </body>\n```\n\n### RJX JSON Spec\n\nRXJ JSON is valid JSON that more or less mimics JSX in JSON notation with a couple of special properties. The properties for RXJ JSON are the arguments passed to [React.createElement](https://reactjs.org/docs/react-api.html#createelement). The only required property is the component (which is passed as the `type` argument)\n\n```javascript\nReact.createElement(\n  type,\n  [props],\n  [...children]\n)\n```\n\nYou can pass React component libraries for additional components, or you own custom components (see Advanced, also see Full Spec).\n\n```javascript\n//sample RJX\n{\n  component:'ul',\n  props:{\n    className:'list-class',\n  },\n  children:[\n    {\n      component:'li',\n      children:'first bullet'\n    },\n    {\n      component:'li',\n      children:'second bullet',\n    }\n  ]\n}\n\n```\n\n```JSX\n// Equivalent JSX\n<ul className=\"list-class\">\n  <li>first bullet</li>\n  <li>second bullet</li>\n</ul>\n```\n\n#### Validating RJX JSON\n\n```javascript \nimport { default as rjx } from 'rjx';\n\n//use the built in RJX Validator\nconst valid_rjx_json = {\n  component:'p',\n  props:{\n    className:'title',\n  },\n  children:'hello world'\n};\nconst invalid_rjx_json = {\n  props:{\n    className:'title',\n  },\n  children:'hello world'\n};\nconst multiple_invalid_rjx_json = {\n  props:'must be obj',\n  children:'hello world'\n};\n\nrjx._rjxUtils.validateRJX(testRJXJSON) // => true\nrjx._rjxUtils.validateRJX(invalid_rjx_json) // => throws SyntaxError('[0001] Missing React Component')\nrjx._rjxUtils.validateRJX(multiple_invalid_rjx_json, true) // =>\n// [ [Error: [0001] Missing React Component],[ Error: [0002]  props must be an Object / valid React props] ]\n\n/**\n * @param {Object} rjx - RJX JSON to validate \n * @param {Boolean} [returnAllErrors=false] - flag to either throw error or to return all errors in an array of errors\n * /\nfunction validateRJX(rjx = {}, returnAllErrors= false);\n```\n\n### Simple RJX Syntax\n\nIf you want to save time, you can use the property name as the component and define properties for a cleaner simple syntax\n\n```javascript\n//shorthand simple rjx\n{\n  ul: {\n    props:{\n      className:'list-class',\n    },\n    children:[\n      {\n        li: {\n          children:'first bullet',\n        },\n      },\n      {\n        li: {\n          children:'second bullet',\n        },\n      }\n    ]\n  }\n}\n```\n\n### RJX Module\n\n```javascript\n\"rjx\" : {\n  getRenderedJSON: [Function: getRenderedJSON], //Use React.createElement and RJX JSON to create React elements\n  rjxHTMLString: [Function: rjxHTMLString], //Use ReactDOMServer.renderToString to render html from RJX\n  rjxRender: [Function: getRenderedJSON], //Use RJX without any configuration to render RJX JSON to HTML and insert RJX into querySelector using ReactDOM.render\n  _rjxChildren: {\n    getChildrenProperty: [Function: getChildrenProperty], // returns a valid rjx.children property\n    getChildrenProps: [Function: getChildrenProps], // Used to pass properties down to child components if passprops is set to true\n    getRJXChildren: [Function: getRJXChildren], // returns React Child Elements via RJX\n  },\n  _rjxComponents: {\n    componentMap: {}, // object of all react components available for RJX\n    getBoundedComponents: [Function: getBoundedComponents], // getBoundedComponents returns reactComponents with certain elements that have this bounded to select components in the boundedComponents list\n    getComponentFromLibrary: [Function: getComponentFromLibrary], // returns a react component from a component library (like material-ui, or semantic-ui)\n    getComponentFromMap: [Function: getComponentFromMap], // returns a react element from rjx.component\n    getReactComponent: [Function: getReactComponent], // returns a react component and support lifecycle functions\n  },\n  _rjxProps: {\n    getRJXProps: [Function: getRJXProps], // It uses traverse on a traverseObject to returns a resolved object on propName. So if you're making an ajax call and want to pass properties into a component, you can assign them using asyncprops and reference object properties by an array of property paths\n    getEvalProps: [Function: getEvalProps], //Used to evalute javascript and set those variables as props. getEvalProps evaluates __dangerouslyEvalProps and __dangerouslyBindEvalProps properties with eval, this is used when component properties are functions, __dangerouslyBindEvalProps is used when those functions require that this is bound to the function. For __dangerouslyBindEvalProps it must resolve an expression, so functions should be wrapped in (). I.e. (function f(x){ return this.minimum+x;})\n    getComponentProps: [Function: getComponentProps], // Resolves rjx.__dangerouslyInsertComponents into an object that turns each value into a React components. This is typically used in a library like Recharts where you pass custom components for chart ticks or plot points.\n    getReactComponentProps: [Function: getReactComponentProps], // Resolves rjx.__dangerouslyInsertReactComponents into an object that turns each value into a the React component from reactComponents, componentLibraries or ReactDOM.\n    getFunctionFromProps: [Function: getFunctionFromProps], // Takes a function string and returns a function on either this.props or window.\n    getFunctionProps: [Function: getFunctionProps], // Returns a resolved object from function strings that has functions pulled from rjx.__functionProps\n    getWindowComponents: [Function: getWindowComponents], // Returns a resolved object that has React Components pulled from window.__rjx_custom_elements\n    getComputedProps: [Function: getComputedProps], // Returns computed properties for React Components and any property that's prefixed with __ is a computedProperty\n  },\n  _rjxUtils: {\n    validateRJX: [Function: validateRJX], //Validates RJX JSON Syntax\n    displayComponent: [Function displayComponent], // Used to evaluate whether or not to render a component\n    traverse: [Function traverse], //take an object of array paths to traverse and resolve\n    getAdvancedBinding: [Function: getAdvancedBinding], // Use to test if can bind components this context for react-redux-router\n  },\n}\n```\n\n### Full RJX Spec\n```javascript\nrjx = {\n  //standard properties\n  component:String, // Any React DOM element, or custom component div,p, Boomer.Hero, MaterialUI.Button, myCustomComponent\n  props:Object, // Standard React component properties\n  children:Array|String, // Any String or Array of valid RJX JSON objects\n  //dynamic properties\n  resourceprops:Object, // An object from async resources to merge onto rjx.props once fully resolved\n  asyncprops:Object, // An object from async resources to merge onto rjx.props once fully resolved (alias for resourceprops)\n  thisprops:Object, // An object to merge onto rjx.props from properties already bound to this.props\n  windowprops:Object, // An object to merge onto rjx.props from the window object\n  //evaluated properties\n  __dangerouslyEvalProps:Object, // An object of evaluated JavaScript strings, used as inline functions onto rjx.props\n  __dangerouslyBindEvalProps:Object, // An object of evaluated JavaScript functions that are bound to this, used as inline functions onto rjx.props\n  //computed properties\n  __functionProps:Object, // An object of parsed function strings(func:this.props.onClick, func:window.localStorage.getItem),merged onto rjx.props\n  __dangerouslyInsertComponents:Object, // An object that turns each RXJ JSON value into a React components. This is typically used in a library like Recharts where you pass custom components for chart ticks or plot points.\n  __dangerouslyInsertReactComponents:Object, // An object that returns the react element from either ReactDOM, reactComponents or componentLibraries.\n  __windowComponents:Object, // An object of components merged onto rjx.props from window.__rjx_custom_elements\n  __windowComponentProps:Object,\n  //display properties\n  comparisonprops:[Object], // An array of Objects used to conditionally display the current rjx.component\n  //flag properties\n  passprops:Boolean, // A flag to pass parent properties to children RJX objects (except for the style property)\n  comparisonorprops:Boolean, // A flag to use an or condition instead of and conditions between comparisions\n}\n```\n\n#### Advanced - Using Custom Components & UI Libraries\n\nIf you plan on using an entire UI library, then bind the library to this before using RJX.\n\n```javascript\nimport { default as rjx } from 'rjx';\nimport { * as Semantic } from 'semantic-ui-react';\n\nconst getRenderedJSON = rjx.getRenderedJSON.bind({\n  componentLibraries:{\n    Semantic,\n  }\n});\n\nconst myRJX = {\n  component:'Semantic.Container',\n  children:[\n    {\n      component:'Semantic.Header',\n      props:{\n        as:'h1',\n      },\n      children:'Hello World!',\n    },\n    {\n      component:'Semantic.Button',\n      props:{\n        content:'Discover docs',\n        href:'http://react.semantic-ui.com',\n        icon:'github',\n        labelPosition:'left',\n      }\n    }\n  ]\n}\n\nconst myReactElements = getRenderedJSON(myRJX);\n```\n\n\n#### Advanced - Using New & Custom Components\n\nIf you're only adding single components or using your own components you can add them to RJX's component my individually.\n\n```javascript\nimport React from 'react';\nimport { default as rjx } from 'rjx';\nimport { Header } from 'semantic-ui-react';\n\nclass MyButton extends React.Component {\n  render() {\n    return <a {...this.props}>{this.props.children}</a>\n  }\n}\n\n\nconst getRenderedJSON = rjx.getRenderedJSON.bind({\n  reactComponents:{\n    Header,\n    MyButton,\n  }\n});\n\nconst myRJX = {\n  component:'div',\n  children:[\n    {\n      component:'Header',\n      props:{\n        as:'h1',\n      },\n      children:'Hello World!',\n    },\n    {\n      component:'MyButton',\n      props:{\n        title:'Discover docs',\n        href:'http://react.semantic-ui.com',\n      },\n      __dangerouslyEvalProps:{\n        onClick:'()=>alert(\"click works\")'\n      },\n      children:'click me',\n    }\n  ]\n}\n\nconst myReactElements = getRenderedJSON(myRJX);\n```\n\n#### Advanced - Special properties\n\n##### resourceprops (asyncprops) / thisprops / windowprops\n\nThe only different between resourceprops (asyncprops), thisprops and windowprops are the source of the transverse Object.\n\nResourceprops transverse an object that is manually passed (usually as a result of an asynchronous fetch all - hence the name asyncpropc).\n\nThisprops transverse anything bound to `this.props`, a good example would be if you're storing and passing a user object on `this.props.user`, pulling the username would be where you would use thisprops.\n\nWindowprops transverse anything on the global window object, like the current page location `window.location.href`.\n\nDynamic props are transversed by passing an array to the property value you want, so for a window's location (`window.location.href`) the property value is accessed by an array to the href `['location','href']` where you omit the transverse object from the array path.\n\n```javascript\nconst traverseObject = {\n  user: {\n    name: 'rjx',\n    description: 'react without javascript',\n  },\n  stats: {\n    logins: 102,\n    comments: 3,\n  },\n  authentication: 'OAuth2',\n};\nconst testRJX = {\n  component: 'div',\n  props: {\n    id: 'generatedRJX',\n    className:'rjx',\n  },\n  resourceprops:{\n    auth: [ 'authentication', ],\n    username: [ 'user', 'name', ],\n  },\n  children: [\n    {\n      component: 'p',\n      props: {\n        style: {\n          color: 'red',\n          fontWeight:'bold',\n        },\n      },\n      asyncprops:{\n        title: ['user','description']\n      },\n      children:'hello world',\n    },\n  ],\n};\nconst RJXP = getRJXProps({ rjx: testRJX, traverseObject, });\n// => {\n//   auth: 'OAuth2',\n//   username: 'rjx'\n// }\n\n//finally resolves:\nconst testRJX = {\n  component: 'div',\n  props: {\n    id: 'generatedRJX',\n    className:'rjx',\n    auth: 'OAuth2',\n    username: 'rjx',\n  },\n  children: [\n    {\n      component: 'p',\n      props: {\n        style: {\n          color: 'red',\n          fontWeight:'bold',\n        },\n        title:'react without javascript',\n      },\n      children:'hello world',\n    },\n  ],\n};\n```\n\n##### __dangerouslyEvalProps / __dangerouslyBindEvalProps\n\nThe only difference between `__dangerouslyEvalProps` and `__dangerouslyBindEvalProps` is each  `__dangerouslyBindEvalProps` has to be a function, because it's returned as the bound instance of the function with `this`.\n\n```javascript\n const testVals = {\n    auth: 'true',\n    username: '(user={})=>user.name',\n  };\n  const testRJX = Object.assign({}, sampleRJX, {\n    __dangerouslyEvalProps: testVals, __dangerouslyBindEvalProps: {\n      email: '(function getUser(user={}){ return this.testBound(); })',\n    },\n  });\n  const RJXP = getEvalProps.call({ testBound: () => 'bounded', }, { rjx: testRJX, });\n  const evalutedComputedFunc = RJXP.username({ name: 'bob', });\n  const evalutedComputedBoundFunc = RJXP.email({ email:'test@email.domain', });\n  // expect(RJXP.auth).to.be.true;\n  // expect(evalutedComputedFunc).to.eql('bob');\n  // expect(evalutedComputedBoundFunc).to.eql('bounded');\n```\n\n##### __functionProps\n\nFunction props merge onto rjx.props after evaluating each functon string.\n\n```javascript\nconst thisProp = {\n  debug: true,\n  window: {\n    print: () => 'printed',\n    localStorage: {\n      getItem:()=>'gotItem',\n    },\n  },\n  props: {\n    onClick:()=>'clicked',\n    reduxRouter: {\n      push:()=>'pushed',\n      pop:()=>'poped',\n    },\n  },\n};\nconst rxjTest = {\n  component:'div',\n  props: {\n    name:'test',\n  },\n  __functionProps: {\n    onclick:'func:this.props.onClick',\n    printPage: 'func:window.print',\n    nav:'func:this.props.reduxRouter.push',\n  },\n};\nconst rxjObj = getFunctionProps.call(thisProp, {\n  rjx: rxjTest,\n});\nexpect(rxjObj).is.an('object');\nexpect(Object.keys(rxjObj)).to.eql(Object.keys(rxjTest.__functionProps));\nexpect(rxjObj.onclick()).to.eq('clicked');\nexpect(rxjObj.printPage()).to.eql('printed');\nexpect(rxjObj.nav()).to.eql('pushed');\n```\n\n##### comparisionprops\n\nComparison props are used to contionally show components if they're truthy. They compare an array of left and right side values, if they are all true, the component is rendered. If `comparisonorprops:true` then only one condition needs to be true in order to render the component\n\n```javascript\n//and conditions\nrjx={\n  comparisonprops: [{\n    left: ['bigNum',],\n    operation:'lte',\n    right:['smallNum',],\n  },{\n    left: ['smallNum',],\n    operation:'<=',\n    right:['bigNum',],\n  }],\n}\n//or conditions\nrjx={\n  comparisonorprops:true,\n  comparisonprops: [{\n    left: ['truthy',],\n    operation:'eq',\n    right:['falsey',],\n  },{\n    left: ['smallNum',],\n    operation:'eq',\n    right:['smallNum',],\n  }],\n}\n\n// All comparison operations\nswitch (opscompares.operation) {\n  case 'eq':\n  case '==':\n    return opscompares.left == opscompares.right;\n  case 'dneq':\n  case '!=':\n  case '!':\n    return opscompares.left !== opscompares.right;\n  case 'dnseq':\n  case '!==':\n    return opscompares.left !== opscompares.right;\n  case 'seq':\n  case '===':\n    return opscompares.left === opscompares.right;\n  case 'lt':\n  case '<':\n    return opscompares.left < opscompares.right;\n  case 'lte':\n  case '<=':\n    return opscompares.left <= opscompares.right;\n  case 'gt':\n  case '>':\n    return opscompares.left > opscompares.right;\n  case 'gte':\n  case '>=':\n    return opscompares.left >= opscompares.right;\n  case 'dne':\n  case 'undefined':\n  case 'null':\n    return opscompares.left === undefined || opscompares.left === null; \n  case '!null':\n  case '!undefined':\n  case 'exists':\n  default://'exists'\n    return opscompares.left !== undefined && opscompares.left !== null;\n}\n```\n\n### Advanced - Custom React Components & Lifecycle Functions\n\nYou can also create react components with lifecycle functions using `getReactComponent`.\n\nThe only required function is a render function, the body of the function has to be valid rjx.\n\n```javascript\nconst MyCustomComponent = rjx._rjxComponents.getReactComponent({\n    //\n    // Initialization function\n    //\n    getInitialState:{\n      body:'return { status:\"not-loaded\", name:\"rjx test\", customNumber:1, }',\n      arguments:[],\n    },\n    getDefaultProps:{\n      body:'return { someProp:1, someOtherProp:2, status:\"original status\" }',\n      arguments:[],\n    },\n    componentDidMount:{\n      body:`console.log('mounted', 'this.props',this.props, 'this.state',this.state)`,\n      arguments:[],\n    },\n    componentWillUnmount:{\n      body:`console.log('unmounted',this.props)`,\n      arguments:[],\n    },\n    //\n    // State change functions\n    //\n    shouldComponentUpdate:{\n      body:'console.log(\"should update component\",{nextProps,nextState}); return true;',\n      arguments:['nextProps', 'nextState']\n    },\n    componentWillUpdate:{\n      body:'console.log(\"will update component\",{nextProps,nextState}); return true;',\n      arguments:['nextProps', 'nextState']\n    },\n    componentDidUpdate:{\n      body:'console.log(\"did update component\",{prevProps,prevState}); return true;',\n      arguments:['prevProps', 'prevState']\n    },\n    //\n    // Prop change functions\n    //\n    componentWillReceiveProps: {\n      body:'console.log(\"will recieve props\",{nextProps}); return true;',\n      arguments:['nextProps']\n    },\n    //\n    // RENDER IS THE ONLY ***REQUIRED*** FUNCTION\n    //\n    render:{\n      body:{\n        component:'p',\n        props:{\n          status:'from inline prop'\n        },\n        passprops:true,\n        children:[\n          {\n            component:'span',\n            children: 'My Custom React Component Status: ',\n          },\n          {\n            component:'span',\n            thisprops:{\n              children:['status']\n            }\n          }\n        ]\n      },\n    }\n  });\nconst sampleRJX = {\n  component:'MyCustomComponent',\n  props:{\n    status:'Amazing',\n  }\n};\nconst boundConfig = {\n  debug:true, \n  reactComponents:{\n    MyCustomComponent,\n  }\n};\nrjx.rjxRender.call(boundConfig, {\n  rjx: sampleRJX, \n  querySelector:'#root', });\n```\n\nConsole output after mounting\n```javascript\n[Log] mounted (4)\n\"this.props\"\n{status: \"Amazing\", children: {}, someProp: 1, someOtherProp: 2}\n\"this.state\"\n{status: \"not-loaded\", name: \"rjx test\", customNumber: 1}\n```\n\nCheckout the `dist/example.html` for example usage.\n![https://raw.githubusercontent.com/repetere/rjx/master/docs/dist-example-html.png](https://raw.githubusercontent.com/repetere/rjx/master/docs/dist-example-html.png)\n\n### Development\n\nNote *Make sure you have grunt installed*\n\n```sh\n$ npm i -g grunt-cli jsdoc-to-markdown\n```\n\nFor generating documentation\n\n```sh\n$ grunt doc\n$ jsdoc2md src/**/*.js  > docs/api.md\n```\n\n### Notes\n\nCheck out [https://github.com/repetere/rjx](https://github.com/repetere/rjx) for the full rjx Documentation\n\n### Testing\n\n```sh\n$ npm i\n$ grunt test\n```\n\n### Contributing\n\nFork, write tests and create a pull request!\n\n### Example Browser Usage\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>RJX TEST</title>\n    <script type=\"text/javascript\" src=\"rjx.umd.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"text/javascript\">\n      const sampleRJX = {\n        component: 'div',\n        props: {\n          id: 'generatedRJX',\n          className:'rjx',\n        },\n        children: [\n          {\n            component: 'p',\n            props: {\n              style: {\n                color: 'red',\n                fontWeight:'bold',\n              },\n            },\n            __dangerouslyEvalProps:{\n              onClick:'()=>alert(\"click works\")'\n            },\n            children:'hello world',\n          },\n        ],\n      };\n      const boundConfig = {\n        debug:true, \n      };\n      rjx.rjxRender.call(boundConfig,{ rjx: sampleRJX, querySelector:'#root', });\n    </script>\n  </body>\n</html>\n ```\n\n<div style=\"text-align:center;\">\n\n<img src=\"https://raw.githubusercontent.com/repetere/rjx/master/docs/rjx-logo.png\" style=\"max-width:160px;\">\n\n</div>\n\n\nLicense\n\n----\n\nMIT",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/rjx/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "content": "# Reactive JSON (RJX)\n\n[![Coverage Status](https://coveralls.io/repos/github/repetere/rjx/badge.svg?branch=master)](https://coveralls.io/github/repetere/rjx?branch=master) [![Build Status](https://travis-ci.org/repetere/rjx.svg?branch=master)](https://travis-ci.org/repetere/rjx)\n\n## Description\n\n**Reactive JSON (RJX)** takes a RXJ JSON object and renders React components. **RJX** lets you get up and running with React without using JavaScript.\n\nRJX was created to remove all the complexities around environment setup, and configuration of React applications (Babel, Webpack, Rollup, etc) and make declarative user interfaces using Machine Learning and Natural Language Processing. Using RJX let's any back end application (Elixir, Go, Python, etc) render a server side React application.\n\n## Installation\n\n```sh\n$ npm i rjx\n```\n\n### [Full Documentation](https://github.com/repetere/rjx/blob/master/docs/api.md)\n\n### Examples ( [HTML/Browser Example](https://github.com/repetere/rjx/blob/master/dist/example.html) ) \n\n```javascript\nimport { default as rjx } from 'rjx';\n//Rendering React Components\nrjx.getRenderedJSON({component:'p',props:{style:{color:'blue'}},children:'hello world'});\n// => JSX Equivalent: <p style={{color:'blue'}}>hello world</p>\n\n//Generating HTML strings\nrjx.rjxHTMLString({ rjx: { component: 'div', props:{className:'rjx-generated',children:[{ component:'p',props:{style:{color:'red'}}, children:'hello world' }]}}, });\n// => '<div class=\"rjx-generated\"><p style=\"color:red;\">hello world</p></div>'\n\n//Rendering HTML Dom with React\nrjx.rjxRender({ rjx: { component: 'div', props:{className:'rjx-generated',children:[{ component:'p',props:{style:{color:'red'}}, children:'hello world' }]}}, querySelector:'#myApp', });\n// <!DOCTYPE html>\n//  <body>\n//    <div id=\"myApp\">\n//      <div class=\"rjx-generated\">\n//        <p style=\"color:red;\">hello world</p>\n//      </div>\n//    </div>\n// </body>\n```\n\n### RJX JSON Spec\n\nRXJ JSON is valid JSON that more or less mimics JSX in JSON notation with a couple of special properties. The properties for RXJ JSON are the arguments passed to [React.createElement](https://reactjs.org/docs/react-api.html#createelement). The only required property is the component (which is passed as the `type` argument)\n\n```javascript\nReact.createElement(\n  type,\n  [props],\n  [...children]\n)\n```\n\nYou can pass React component libraries for additional components, or you own custom components (see Advanced, also see Full Spec).\n\n```javascript\n//sample RJX\n{\n  component:'ul',\n  props:{\n    className:'list-class',\n  },\n  children:[\n    {\n      component:'li',\n      children:'first bullet'\n    },\n    {\n      component:'li',\n      children:'second bullet',\n    }\n  ]\n}\n\n```\n\n```JSX\n// Equivalent JSX\n<ul className=\"list-class\">\n  <li>first bullet</li>\n  <li>second bullet</li>\n</ul>\n```\n\n#### Validating RJX JSON\n\n```javascript \nimport { default as rjx } from 'rjx';\n\n//use the built in RJX Validator\nconst valid_rjx_json = {\n  component:'p',\n  props:{\n    className:'title',\n  },\n  children:'hello world'\n};\nconst invalid_rjx_json = {\n  props:{\n    className:'title',\n  },\n  children:'hello world'\n};\nconst multiple_invalid_rjx_json = {\n  props:'must be obj',\n  children:'hello world'\n};\n\nrjx._rjxUtils.validateRJX(testRJXJSON) // => true\nrjx._rjxUtils.validateRJX(invalid_rjx_json) // => throws SyntaxError('[0001] Missing React Component')\nrjx._rjxUtils.validateRJX(multiple_invalid_rjx_json, true) // =>\n// [ [Error: [0001] Missing React Component],[ Error: [0002]  props must be an Object / valid React props] ]\n\n/**\n * @param {Object} rjx - RJX JSON to validate \n * @param {Boolean} [returnAllErrors=false] - flag to either throw error or to return all errors in an array of errors\n * /\nfunction validateRJX(rjx = {}, returnAllErrors= false);\n```\n\n### Simple RJX Syntax\n\nIf you want to save time, you can use the property name as the component and define properties for a cleaner simple syntax\n\n```javascript\n//shorthand simple rjx\n{\n  ul: {\n    props:{\n      className:'list-class',\n    },\n    children:[\n      {\n        li: {\n          children:'first bullet',\n        },\n      },\n      {\n        li: {\n          children:'second bullet',\n        },\n      }\n    ]\n  }\n}\n```\n\n### RJX Module\n\n```javascript\n\"rjx\" : {\n  getRenderedJSON: [Function: getRenderedJSON], //Use React.createElement and RJX JSON to create React elements\n  rjxHTMLString: [Function: rjxHTMLString], //Use ReactDOMServer.renderToString to render html from RJX\n  rjxRender: [Function: getRenderedJSON], //Use RJX without any configuration to render RJX JSON to HTML and insert RJX into querySelector using ReactDOM.render\n  _rjxChildren: {\n    getChildrenProperty: [Function: getChildrenProperty], // returns a valid rjx.children property\n    getChildrenProps: [Function: getChildrenProps], // Used to pass properties down to child components if passprops is set to true\n    getRJXChildren: [Function: getRJXChildren], // returns React Child Elements via RJX\n  },\n  _rjxComponents: {\n    componentMap: {}, // object of all react components available for RJX\n    getBoundedComponents: [Function: getBoundedComponents], // getBoundedComponents returns reactComponents with certain elements that have this bounded to select components in the boundedComponents list\n    getComponentFromLibrary: [Function: getComponentFromLibrary], // returns a react component from a component library (like material-ui, or semantic-ui)\n    getComponentFromMap: [Function: getComponentFromMap], // returns a react element from rjx.component\n    getReactComponent: [Function: getReactComponent], // returns a react component and support lifecycle functions\n  },\n  _rjxProps: {\n    getRJXProps: [Function: getRJXProps], // It uses traverse on a traverseObject to returns a resolved object on propName. So if you're making an ajax call and want to pass properties into a component, you can assign them using asyncprops and reference object properties by an array of property paths\n    getEvalProps: [Function: getEvalProps], //Used to evalute javascript and set those variables as props. getEvalProps evaluates __dangerouslyEvalProps and __dangerouslyBindEvalProps properties with eval, this is used when component properties are functions, __dangerouslyBindEvalProps is used when those functions require that this is bound to the function. For __dangerouslyBindEvalProps it must resolve an expression, so functions should be wrapped in (). I.e. (function f(x){ return this.minimum+x;})\n    getComponentProps: [Function: getComponentProps], // Resolves rjx.__dangerouslyInsertComponents into an object that turns each value into a React components. This is typically used in a library like Recharts where you pass custom components for chart ticks or plot points.\n    getReactComponentProps: [Function: getReactComponentProps], // Resolves rjx.__dangerouslyInsertReactComponents into an object that turns each value into a the React component from reactComponents, componentLibraries or ReactDOM.\n    getFunctionFromProps: [Function: getFunctionFromProps], // Takes a function string and returns a function on either this.props or window.\n    getFunctionProps: [Function: getFunctionProps], // Returns a resolved object from function strings that has functions pulled from rjx.__functionProps\n    getWindowComponents: [Function: getWindowComponents], // Returns a resolved object that has React Components pulled from window.__rjx_custom_elements\n    getComputedProps: [Function: getComputedProps], // Returns computed properties for React Components and any property that's prefixed with __ is a computedProperty\n  },\n  _rjxUtils: {\n    validateRJX: [Function: validateRJX], //Validates RJX JSON Syntax\n    displayComponent: [Function displayComponent], // Used to evaluate whether or not to render a component\n    traverse: [Function traverse], //take an object of array paths to traverse and resolve\n    getAdvancedBinding: [Function: getAdvancedBinding], // Use to test if can bind components this context for react-redux-router\n  },\n}\n```\n\n### Full RJX Spec\n```javascript\nrjx = {\n  //standard properties\n  component:String, // Any React DOM element, or custom component div,p, Boomer.Hero, MaterialUI.Button, myCustomComponent\n  props:Object, // Standard React component properties\n  children:Array|String, // Any String or Array of valid RJX JSON objects\n  //dynamic properties\n  resourceprops:Object, // An object from async resources to merge onto rjx.props once fully resolved\n  asyncprops:Object, // An object from async resources to merge onto rjx.props once fully resolved (alias for resourceprops)\n  thisprops:Object, // An object to merge onto rjx.props from properties already bound to this.props\n  windowprops:Object, // An object to merge onto rjx.props from the window object\n  //evaluated properties\n  __dangerouslyEvalProps:Object, // An object of evaluated JavaScript strings, used as inline functions onto rjx.props\n  __dangerouslyBindEvalProps:Object, // An object of evaluated JavaScript functions that are bound to this, used as inline functions onto rjx.props\n  //computed properties\n  __functionProps:Object, // An object of parsed function strings(func:this.props.onClick, func:window.localStorage.getItem),merged onto rjx.props\n  __dangerouslyInsertComponents:Object, // An object that turns each RXJ JSON value into a React components. This is typically used in a library like Recharts where you pass custom components for chart ticks or plot points.\n  __dangerouslyInsertReactComponents:Object, // An object that returns the react element from either ReactDOM, reactComponents or componentLibraries.\n  __windowComponents:Object, // An object of components merged onto rjx.props from window.__rjx_custom_elements\n  __windowComponentProps:Object,\n  //display properties\n  comparisonprops:[Object], // An array of Objects used to conditionally display the current rjx.component\n  //flag properties\n  passprops:Boolean, // A flag to pass parent properties to children RJX objects (except for the style property)\n  comparisonorprops:Boolean, // A flag to use an or condition instead of and conditions between comparisions\n}\n```\n\n#### Advanced - Using Custom Components & UI Libraries\n\nIf you plan on using an entire UI library, then bind the library to this before using RJX.\n\n```javascript\nimport { default as rjx } from 'rjx';\nimport { * as Semantic } from 'semantic-ui-react';\n\nconst getRenderedJSON = rjx.getRenderedJSON.bind({\n  componentLibraries:{\n    Semantic,\n  }\n});\n\nconst myRJX = {\n  component:'Semantic.Container',\n  children:[\n    {\n      component:'Semantic.Header',\n      props:{\n        as:'h1',\n      },\n      children:'Hello World!',\n    },\n    {\n      component:'Semantic.Button',\n      props:{\n        content:'Discover docs',\n        href:'http://react.semantic-ui.com',\n        icon:'github',\n        labelPosition:'left',\n      }\n    }\n  ]\n}\n\nconst myReactElements = getRenderedJSON(myRJX);\n```\n\n\n#### Advanced - Using New & Custom Components\n\nIf you're only adding single components or using your own components you can add them to RJX's component my individually.\n\n```javascript\nimport React from 'react';\nimport { default as rjx } from 'rjx';\nimport { Header } from 'semantic-ui-react';\n\nclass MyButton extends React.Component {\n  render() {\n    return <a {...this.props}>{this.props.children}</a>\n  }\n}\n\n\nconst getRenderedJSON = rjx.getRenderedJSON.bind({\n  reactComponents:{\n    Header,\n    MyButton,\n  }\n});\n\nconst myRJX = {\n  component:'div',\n  children:[\n    {\n      component:'Header',\n      props:{\n        as:'h1',\n      },\n      children:'Hello World!',\n    },\n    {\n      component:'MyButton',\n      props:{\n        title:'Discover docs',\n        href:'http://react.semantic-ui.com',\n      },\n      __dangerouslyEvalProps:{\n        onClick:'()=>alert(\"click works\")'\n      },\n      children:'click me',\n    }\n  ]\n}\n\nconst myReactElements = getRenderedJSON(myRJX);\n```\n\n#### Advanced - Special properties\n\n##### resourceprops (asyncprops) / thisprops / windowprops\n\nThe only different between resourceprops (asyncprops), thisprops and windowprops are the source of the transverse Object.\n\nResourceprops transverse an object that is manually passed (usually as a result of an asynchronous fetch all - hence the name asyncpropc).\n\nThisprops transverse anything bound to `this.props`, a good example would be if you're storing and passing a user object on `this.props.user`, pulling the username would be where you would use thisprops.\n\nWindowprops transverse anything on the global window object, like the current page location `window.location.href`.\n\nDynamic props are transversed by passing an array to the property value you want, so for a window's location (`window.location.href`) the property value is accessed by an array to the href `['location','href']` where you omit the transverse object from the array path.\n\n```javascript\nconst traverseObject = {\n  user: {\n    name: 'rjx',\n    description: 'react without javascript',\n  },\n  stats: {\n    logins: 102,\n    comments: 3,\n  },\n  authentication: 'OAuth2',\n};\nconst testRJX = {\n  component: 'div',\n  props: {\n    id: 'generatedRJX',\n    className:'rjx',\n  },\n  resourceprops:{\n    auth: [ 'authentication', ],\n    username: [ 'user', 'name', ],\n  },\n  children: [\n    {\n      component: 'p',\n      props: {\n        style: {\n          color: 'red',\n          fontWeight:'bold',\n        },\n      },\n      asyncprops:{\n        title: ['user','description']\n      },\n      children:'hello world',\n    },\n  ],\n};\nconst RJXP = getRJXProps({ rjx: testRJX, traverseObject, });\n// => {\n//   auth: 'OAuth2',\n//   username: 'rjx'\n// }\n\n//finally resolves:\nconst testRJX = {\n  component: 'div',\n  props: {\n    id: 'generatedRJX',\n    className:'rjx',\n    auth: 'OAuth2',\n    username: 'rjx',\n  },\n  children: [\n    {\n      component: 'p',\n      props: {\n        style: {\n          color: 'red',\n          fontWeight:'bold',\n        },\n        title:'react without javascript',\n      },\n      children:'hello world',\n    },\n  ],\n};\n```\n\n##### __dangerouslyEvalProps / __dangerouslyBindEvalProps\n\nThe only difference between `__dangerouslyEvalProps` and `__dangerouslyBindEvalProps` is each  `__dangerouslyBindEvalProps` has to be a function, because it's returned as the bound instance of the function with `this`.\n\n```javascript\n const testVals = {\n    auth: 'true',\n    username: '(user={})=>user.name',\n  };\n  const testRJX = Object.assign({}, sampleRJX, {\n    __dangerouslyEvalProps: testVals, __dangerouslyBindEvalProps: {\n      email: '(function getUser(user={}){ return this.testBound(); })',\n    },\n  });\n  const RJXP = getEvalProps.call({ testBound: () => 'bounded', }, { rjx: testRJX, });\n  const evalutedComputedFunc = RJXP.username({ name: 'bob', });\n  const evalutedComputedBoundFunc = RJXP.email({ email:'test@email.domain', });\n  // expect(RJXP.auth).to.be.true;\n  // expect(evalutedComputedFunc).to.eql('bob');\n  // expect(evalutedComputedBoundFunc).to.eql('bounded');\n```\n\n##### __functionProps\n\nFunction props merge onto rjx.props after evaluating each functon string.\n\n```javascript\nconst thisProp = {\n  debug: true,\n  window: {\n    print: () => 'printed',\n    localStorage: {\n      getItem:()=>'gotItem',\n    },\n  },\n  props: {\n    onClick:()=>'clicked',\n    reduxRouter: {\n      push:()=>'pushed',\n      pop:()=>'poped',\n    },\n  },\n};\nconst rxjTest = {\n  component:'div',\n  props: {\n    name:'test',\n  },\n  __functionProps: {\n    onclick:'func:this.props.onClick',\n    printPage: 'func:window.print',\n    nav:'func:this.props.reduxRouter.push',\n  },\n};\nconst rxjObj = getFunctionProps.call(thisProp, {\n  rjx: rxjTest,\n});\nexpect(rxjObj).is.an('object');\nexpect(Object.keys(rxjObj)).to.eql(Object.keys(rxjTest.__functionProps));\nexpect(rxjObj.onclick()).to.eq('clicked');\nexpect(rxjObj.printPage()).to.eql('printed');\nexpect(rxjObj.nav()).to.eql('pushed');\n```\n\n##### comparisionprops\n\nComparison props are used to contionally show components if they're truthy. They compare an array of left and right side values, if they are all true, the component is rendered. If `comparisonorprops:true` then only one condition needs to be true in order to render the component\n\n```javascript\n//and conditions\nrjx={\n  comparisonprops: [{\n    left: ['bigNum',],\n    operation:'lte',\n    right:['smallNum',],\n  },{\n    left: ['smallNum',],\n    operation:'<=',\n    right:['bigNum',],\n  }],\n}\n//or conditions\nrjx={\n  comparisonorprops:true,\n  comparisonprops: [{\n    left: ['truthy',],\n    operation:'eq',\n    right:['falsey',],\n  },{\n    left: ['smallNum',],\n    operation:'eq',\n    right:['smallNum',],\n  }],\n}\n\n// All comparison operations\nswitch (opscompares.operation) {\n  case 'eq':\n  case '==':\n    return opscompares.left == opscompares.right;\n  case 'dneq':\n  case '!=':\n  case '!':\n    return opscompares.left !== opscompares.right;\n  case 'dnseq':\n  case '!==':\n    return opscompares.left !== opscompares.right;\n  case 'seq':\n  case '===':\n    return opscompares.left === opscompares.right;\n  case 'lt':\n  case '<':\n    return opscompares.left < opscompares.right;\n  case 'lte':\n  case '<=':\n    return opscompares.left <= opscompares.right;\n  case 'gt':\n  case '>':\n    return opscompares.left > opscompares.right;\n  case 'gte':\n  case '>=':\n    return opscompares.left >= opscompares.right;\n  case 'dne':\n  case 'undefined':\n  case 'null':\n    return opscompares.left === undefined || opscompares.left === null; \n  case '!null':\n  case '!undefined':\n  case 'exists':\n  default://'exists'\n    return opscompares.left !== undefined && opscompares.left !== null;\n}\n```\n\n### Advanced - Custom React Components & Lifecycle Functions\n\nYou can also create react components with lifecycle functions using `getReactComponent`.\n\nThe only required function is a render function, the body of the function has to be valid rjx.\n\n```javascript\nconst MyCustomComponent = rjx._rjxComponents.getReactComponent({\n    //\n    // Initialization function\n    //\n    getInitialState:{\n      body:'return { status:\"not-loaded\", name:\"rjx test\", customNumber:1, }',\n      arguments:[],\n    },\n    getDefaultProps:{\n      body:'return { someProp:1, someOtherProp:2, status:\"original status\" }',\n      arguments:[],\n    },\n    componentDidMount:{\n      body:`console.log('mounted', 'this.props',this.props, 'this.state',this.state)`,\n      arguments:[],\n    },\n    componentWillUnmount:{\n      body:`console.log('unmounted',this.props)`,\n      arguments:[],\n    },\n    //\n    // State change functions\n    //\n    shouldComponentUpdate:{\n      body:'console.log(\"should update component\",{nextProps,nextState}); return true;',\n      arguments:['nextProps', 'nextState']\n    },\n    componentWillUpdate:{\n      body:'console.log(\"will update component\",{nextProps,nextState}); return true;',\n      arguments:['nextProps', 'nextState']\n    },\n    componentDidUpdate:{\n      body:'console.log(\"did update component\",{prevProps,prevState}); return true;',\n      arguments:['prevProps', 'prevState']\n    },\n    //\n    // Prop change functions\n    //\n    componentWillReceiveProps: {\n      body:'console.log(\"will recieve props\",{nextProps}); return true;',\n      arguments:['nextProps']\n    },\n    //\n    // RENDER IS THE ONLY ***REQUIRED*** FUNCTION\n    //\n    render:{\n      body:{\n        component:'p',\n        props:{\n          status:'from inline prop'\n        },\n        passprops:true,\n        children:[\n          {\n            component:'span',\n            children: 'My Custom React Component Status: ',\n          },\n          {\n            component:'span',\n            thisprops:{\n              children:['status']\n            }\n          }\n        ]\n      },\n    }\n  });\nconst sampleRJX = {\n  component:'MyCustomComponent',\n  props:{\n    status:'Amazing',\n  }\n};\nconst boundConfig = {\n  debug:true, \n  reactComponents:{\n    MyCustomComponent,\n  }\n};\nrjx.rjxRender.call(boundConfig, {\n  rjx: sampleRJX, \n  querySelector:'#root', });\n```\n\nConsole output after mounting\n```javascript\n[Log] mounted (4)\n\"this.props\"\n{status: \"Amazing\", children: {}, someProp: 1, someOtherProp: 2}\n\"this.state\"\n{status: \"not-loaded\", name: \"rjx test\", customNumber: 1}\n```\n\nCheckout the `dist/example.html` for example usage.\n![https://raw.githubusercontent.com/repetere/rjx/master/docs/dist-example-html.png](https://raw.githubusercontent.com/repetere/rjx/master/docs/dist-example-html.png)\n\n### Development\n\nNote *Make sure you have grunt installed*\n\n```sh\n$ npm i -g grunt-cli jsdoc-to-markdown\n```\n\nFor generating documentation\n\n```sh\n$ grunt doc\n$ jsdoc2md src/**/*.js  > docs/api.md\n```\n\n### Notes\n\nCheck out [https://github.com/repetere/rjx](https://github.com/repetere/rjx) for the full rjx Documentation\n\n### Testing\n\n```sh\n$ npm i\n$ grunt test\n```\n\n### Contributing\n\nFork, write tests and create a pull request!\n\n### Example Browser Usage\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>RJX TEST</title>\n    <script type=\"text/javascript\" src=\"rjx.umd.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"text/javascript\">\n      const sampleRJX = {\n        component: 'div',\n        props: {\n          id: 'generatedRJX',\n          className:'rjx',\n        },\n        children: [\n          {\n            component: 'p',\n            props: {\n              style: {\n                color: 'red',\n                fontWeight:'bold',\n              },\n            },\n            __dangerouslyEvalProps:{\n              onClick:'()=>alert(\"click works\")'\n            },\n            children:'hello world',\n          },\n        ],\n      };\n      const boundConfig = {\n        debug:true, \n      };\n      rjx.rjxRender.call(boundConfig,{ rjx: sampleRJX, querySelector:'#root', });\n    </script>\n  </body>\n</html>\n ```\n\n<div style=\"text-align:center;\">\n\n<img src=\"https://raw.githubusercontent.com/repetere/rjx/master/docs/rjx-logo.png\" style=\"max-width:160px;\">\n\n</div>\n\n\nLicense\n\n----\n\nMIT",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/rjx/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/rjx/manual/asset",
    "name": "./manual/asset",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/rjx/manual/overview.md",
    "name": "./manual/overview.md",
    "content": "# Overview\r\n\r\nAll of the model building classes are structured similarly to ml.js models. Each model has three shared components regardless if it's a regression, classification or time series model.\r\n\r\nThis library was built to quickly implement [Tensorflow](https://js.tensorflow.org) and [Keras](https://js.tensorflow.org/tutorials/import-keras.html) models in JavaScript.\r\n\r\n## Configuration\r\n\r\nAll of the model configuration is managed during creating an instance of the class. All models have `fit` and `compile` properties that are assigned to the instance `settings` property.\r\n\r\nYou can also pass the Tensorflow reference to be used, as a configuration property if you want to use the compiled C++ or GPU via CUDA versions on the `tf` property;\r\n\r\n* `this.settings.compile` is passed to `tensorflow.model.compile` and contains the configuration for optimizers ([`read more`](https://js.tensorflow.org/api/latest/#tf.Model.compile)).\r\n* `this.settings.fit` is passed to `tensorflow.model.fit` and contains the configuration for model fitting ([`read more`](https://js.tensorflow.org/api/latest/#tf.Sequential.fit))\r\n\r\n### Model constructor example\r\n\r\n```javascript\r\nimport { MultipleLinearRegression, } from 'tensorscript';\r\nimport tf from '@tensorflow/tfjs-node-gpu';\r\n\r\nconst MLR = new MultipleLinearRegression({\r\n  fit:{\r\n    epochs:500,\r\n    batchSize:5,\r\n  },\r\n  compile:{\r\n    loss: 'meanSquaredError',\r\n    optimizer: 'adam',\r\n  },\r\n},{\r\n  tf,\r\n});\r\n```\r\n\r\nEach constructor takes two parameters `settings` and `properties`. As in the example above, *settings* are used to configure tensorflow objects and properties are used to configure tensorscript (like which version of tensorflow to use).\r\n\r\n## Training\r\n\r\nAll tensorflow models train asynchronously, therefore all tensorscript model train functions are all asynchronous. Always pass dependent and independent variables as matrix inputs.\r\n\r\nTime series models can be trained with only one input matrix.\r\n\r\n### Training example\r\n\r\n```javascript\r\n\r\nimport { MultipleLinearRegression, } from 'tensorscript';\r\n\r\nasync function main(){\r\n  const MLR = new MultipleLinearRegression();\r\n  const x = [ [1], [2] ];\r\n  const y = [ [3], [4] ];\r\n  await MLR.train(x,y);\r\n}\r\n```\r\n\r\n## Predicting\r\n\r\nAll prediction inputs must be the same shape as training inputs. TensorScript provides an asynchronous predict method that converts tensor values to javascript objects. If you want the tensor from tensorflow, use the calculate method instead.\r\n\r\n### Predicting example\r\n\r\n```javascript\r\nimport { MultipleLinearRegression, } from 'tensorscript';\r\n\r\nasync function main(){\r\n  const MLR = new MultipleLinearRegression();\r\n  const x = [ [1], [2] ];\r\n  const y = [ [3], [4] ];\r\n  await MLR.train(x,y);\r\n\r\n  await MLR.predict([[3]]) //=> [[5]];\r\n  const tensorPrediction = await MLR.calculate([[3]]) //=> [[5]];\r\n  tensorPrediction.data()\r\n    .then(tensors=> /*Typed Array*/)\r\n}\r\n```\r\n\r\n## Examples\r\n\r\nFor more examples on how to do feature scaling and more, check out the *[Examples folder](https://github.com/repetere/tensorscript/tree/master/manual/examples)*.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/rjx/manual/usage.md",
    "name": "./manual/usage.md",
    "content": "# Frequently Asked Questions\r\n\r\n## Scaling\r\n\r\n- **How do I scale and descale my inputs?**\r\n  - The library is only for model create, data engineering and modeling is typically handled elsewhere\r\n  - Check out the regression examples (hint: use [ModelScript](https://repetere.github.io/modelscript/)).\r\n- **How do I cross validate, test/train split, K-fold, etc?**\r\n  - (See above) The library is only for model create, data engineering and modeling is typically handled elsewhere\r\n  - Check out the code examples (hint: use [ModelScript](https://repetere.github.io/modelscript/)).",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/rjx/manual/faq.md",
    "name": "./manual/faq.md",
    "content": "# Frequently Asked Questions\r\n\r\n## Scaling\r\n\r\n- **How do I scale and descale my inputs?**\r\n  - The library is only for model create, data engineering and modeling is typically handled elsewhere\r\n  - Check out the regression examples (hint: use [ModelScript](https://repetere.github.io/modelscript/)).\r\n- **How do I cross validate, test/train split, K-fold, etc?**\r\n  - (See above) The library is only for model create, data engineering and modeling is typically handled elsewhere\r\n  - Check out the code examples (hint: use [ModelScript](https://repetere.github.io/modelscript/)).",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/rjx/CHANGELOG.md",
    "name": "./CHANGELOG.md",
    "content": "# Changelog\n\n## 1.0.0 (2018-07-30)\n\n- **Feat**\n  - First Initial Release\n- **Fix**\n  - N/A\n- **Chore**\n  - Allow for multistep future forecasts in multivariate timeseries.\n  - Add basic clustering example.\n",
    "static": true,
    "access": "public"
  }
]